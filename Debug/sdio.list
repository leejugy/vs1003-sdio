
sdio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a138  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000664  0800a2d8  0800a2d8  0000b2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a93c  0800a93c  0000c060  2**0
                  CONTENTS
  4 .ARM          00000008  0800a93c  0800a93c  0000b93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a944  0800a944  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a944  0800a944  0000b944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a948  0800a948  0000b948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800a94c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010f88  20000060  0800a9ac  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010fe8  0800a9ac  0000cfe8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013750  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000344d  00000000  00000000  0001f7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  00022c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc4  00000000  00000000  00023cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019518  00000000  00000000  000249bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a3f  00000000  00000000  0003ded4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f189  00000000  00000000  00056913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5a9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048a8  00000000  00000000  000e5ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000ea388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a2c0 	.word	0x0800a2c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	0800a2c0 	.word	0x0800a2c0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	4b14      	ldr	r3, [pc, #80]	@ (80005ec <MX_DMA_Init+0x5c>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a13      	ldr	r2, [pc, #76]	@ (80005ec <MX_DMA_Init+0x5c>)
 80005a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b11      	ldr	r3, [pc, #68]	@ (80005ec <MX_DMA_Init+0x5c>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2100      	movs	r1, #0
 80005b6:	203a      	movs	r0, #58	@ 0x3a
 80005b8:	f001 fa67 	bl	8001a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80005bc:	203a      	movs	r0, #58	@ 0x3a
 80005be:	f001 fa80 	bl	8001ac2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	203b      	movs	r0, #59	@ 0x3b
 80005c8:	f001 fa5f 	bl	8001a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80005cc:	203b      	movs	r0, #59	@ 0x3b
 80005ce:	f001 fa78 	bl	8001ac2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2100      	movs	r1, #0
 80005d6:	2045      	movs	r0, #69	@ 0x45
 80005d8:	f001 fa57 	bl	8001a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80005dc:	2045      	movs	r0, #69	@ 0x45
 80005de:	f001 fa70 	bl	8001ac2 <HAL_NVIC_EnableIRQ>

}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800

080005f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	4b37      	ldr	r3, [pc, #220]	@ (80006e8 <MX_GPIO_Init+0xf8>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	4a36      	ldr	r2, [pc, #216]	@ (80006e8 <MX_GPIO_Init+0xf8>)
 8000610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000614:	6313      	str	r3, [r2, #48]	@ 0x30
 8000616:	4b34      	ldr	r3, [pc, #208]	@ (80006e8 <MX_GPIO_Init+0xf8>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	4b30      	ldr	r3, [pc, #192]	@ (80006e8 <MX_GPIO_Init+0xf8>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a2f      	ldr	r2, [pc, #188]	@ (80006e8 <MX_GPIO_Init+0xf8>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b2d      	ldr	r3, [pc, #180]	@ (80006e8 <MX_GPIO_Init+0xf8>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	4b29      	ldr	r3, [pc, #164]	@ (80006e8 <MX_GPIO_Init+0xf8>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	4a28      	ldr	r2, [pc, #160]	@ (80006e8 <MX_GPIO_Init+0xf8>)
 8000648:	f043 0302 	orr.w	r3, r3, #2
 800064c:	6313      	str	r3, [r2, #48]	@ 0x30
 800064e:	4b26      	ldr	r3, [pc, #152]	@ (80006e8 <MX_GPIO_Init+0xf8>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	f003 0302 	and.w	r3, r3, #2
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800065a:	2201      	movs	r2, #1
 800065c:	2101      	movs	r1, #1
 800065e:	4823      	ldr	r0, [pc, #140]	@ (80006ec <MX_GPIO_Init+0xfc>)
 8000660:	f001 ff84 	bl	800256c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	2102      	movs	r1, #2
 8000668:	4820      	ldr	r0, [pc, #128]	@ (80006ec <MX_GPIO_Init+0xfc>)
 800066a:	f001 ff7f 	bl	800256c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2101      	movs	r1, #1
 8000672:	481f      	ldr	r0, [pc, #124]	@ (80006f0 <MX_GPIO_Init+0x100>)
 8000674:	f001 ff7a 	bl	800256c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000678:	2303      	movs	r3, #3
 800067a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	2301      	movs	r3, #1
 800067e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	4619      	mov	r1, r3
 800068e:	4817      	ldr	r0, [pc, #92]	@ (80006ec <MX_GPIO_Init+0xfc>)
 8000690:	f001 fdd0 	bl	8002234 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000694:	2308      	movs	r3, #8
 8000696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	4619      	mov	r1, r3
 80006a6:	4811      	ldr	r0, [pc, #68]	@ (80006ec <MX_GPIO_Init+0xfc>)
 80006a8:	f001 fdc4 	bl	8002234 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ac:	2301      	movs	r3, #1
 80006ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b0:	2301      	movs	r3, #1
 80006b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	4619      	mov	r1, r3
 80006c2:	480b      	ldr	r0, [pc, #44]	@ (80006f0 <MX_GPIO_Init+0x100>)
 80006c4:	f001 fdb6 	bl	8002234 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006c8:	2302      	movs	r3, #2
 80006ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006cc:	2300      	movs	r3, #0
 80006ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	4619      	mov	r1, r3
 80006da:	4805      	ldr	r0, [pc, #20]	@ (80006f0 <MX_GPIO_Init+0x100>)
 80006dc:	f001 fdaa 	bl	8002234 <HAL_GPIO_Init>

}
 80006e0:	bf00      	nop
 80006e2:	3720      	adds	r7, #32
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020000 	.word	0x40020000
 80006f0:	40020400 	.word	0x40020400

080006f4 <HAL_UART_RxCpltCallback>:

//uart_control
void uart_send(uint8_t uart_num,char *fmt,...);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a7a      	ldr	r2, [pc, #488]	@ (80008ec <HAL_UART_RxCpltCallback+0x1f8>)
 8000702:	4293      	cmp	r3, r2
 8000704:	f040 80ee 	bne.w	80008e4 <HAL_UART_RxCpltCallback+0x1f0>
		HAL_UART_Receive_DMA(&huart1, &uart_rx_data, 1);
 8000708:	2201      	movs	r2, #1
 800070a:	4979      	ldr	r1, [pc, #484]	@ (80008f0 <HAL_UART_RxCpltCallback+0x1fc>)
 800070c:	4879      	ldr	r0, [pc, #484]	@ (80008f4 <HAL_UART_RxCpltCallback+0x200>)
 800070e:	f004 fb80 	bl	8004e12 <HAL_UART_Receive_DMA>
		if(uart_rx_data=='r'||
 8000712:	4b77      	ldr	r3, [pc, #476]	@ (80008f0 <HAL_UART_RxCpltCallback+0x1fc>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b72      	cmp	r3, #114	@ 0x72
 8000718:	d00f      	beq.n	800073a <HAL_UART_RxCpltCallback+0x46>
			 uart_rx_data=='1'||
 800071a:	4b75      	ldr	r3, [pc, #468]	@ (80008f0 <HAL_UART_RxCpltCallback+0x1fc>)
 800071c:	781b      	ldrb	r3, [r3, #0]
		if(uart_rx_data=='r'||
 800071e:	2b31      	cmp	r3, #49	@ 0x31
 8000720:	d00b      	beq.n	800073a <HAL_UART_RxCpltCallback+0x46>
			 uart_rx_data=='2'||
 8000722:	4b73      	ldr	r3, [pc, #460]	@ (80008f0 <HAL_UART_RxCpltCallback+0x1fc>)
 8000724:	781b      	ldrb	r3, [r3, #0]
			 uart_rx_data=='1'||
 8000726:	2b32      	cmp	r3, #50	@ 0x32
 8000728:	d007      	beq.n	800073a <HAL_UART_RxCpltCallback+0x46>
			 uart_rx_data=='3'||
 800072a:	4b71      	ldr	r3, [pc, #452]	@ (80008f0 <HAL_UART_RxCpltCallback+0x1fc>)
 800072c:	781b      	ldrb	r3, [r3, #0]
			 uart_rx_data=='2'||
 800072e:	2b33      	cmp	r3, #51	@ 0x33
 8000730:	d003      	beq.n	800073a <HAL_UART_RxCpltCallback+0x46>
			 uart_rx_data=='n'){
 8000732:	4b6f      	ldr	r3, [pc, #444]	@ (80008f0 <HAL_UART_RxCpltCallback+0x1fc>)
 8000734:	781b      	ldrb	r3, [r3, #0]
			 uart_rx_data=='3'||
 8000736:	2b6e      	cmp	r3, #110	@ 0x6e
 8000738:	d13c      	bne.n	80007b4 <HAL_UART_RxCpltCallback+0xc0>

		if(uart_rx_data=='1' && strcmp((char *)file_name,"0:/a.mp3")==0){
 800073a:	4b6d      	ldr	r3, [pc, #436]	@ (80008f0 <HAL_UART_RxCpltCallback+0x1fc>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b31      	cmp	r3, #49	@ 0x31
 8000740:	d10e      	bne.n	8000760 <HAL_UART_RxCpltCallback+0x6c>
 8000742:	496d      	ldr	r1, [pc, #436]	@ (80008f8 <HAL_UART_RxCpltCallback+0x204>)
 8000744:	486d      	ldr	r0, [pc, #436]	@ (80008fc <HAL_UART_RxCpltCallback+0x208>)
 8000746:	f7ff fd4b 	bl	80001e0 <strcmp>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d107      	bne.n	8000760 <HAL_UART_RxCpltCallback+0x6c>
			uart_send(1,"already in this song!.\n",current_vol);
 8000750:	4b6b      	ldr	r3, [pc, #428]	@ (8000900 <HAL_UART_RxCpltCallback+0x20c>)
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	496b      	ldr	r1, [pc, #428]	@ (8000904 <HAL_UART_RxCpltCallback+0x210>)
 8000758:	2001      	movs	r0, #1
 800075a:	f000 f8ed 	bl	8000938 <uart_send>
			return;
 800075e:	e0c1      	b.n	80008e4 <HAL_UART_RxCpltCallback+0x1f0>
		}
		else if(uart_rx_data=='2' && strcmp((char *)file_name,"0:/b.mp3")==0){
 8000760:	4b63      	ldr	r3, [pc, #396]	@ (80008f0 <HAL_UART_RxCpltCallback+0x1fc>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b32      	cmp	r3, #50	@ 0x32
 8000766:	d10e      	bne.n	8000786 <HAL_UART_RxCpltCallback+0x92>
 8000768:	4967      	ldr	r1, [pc, #412]	@ (8000908 <HAL_UART_RxCpltCallback+0x214>)
 800076a:	4864      	ldr	r0, [pc, #400]	@ (80008fc <HAL_UART_RxCpltCallback+0x208>)
 800076c:	f7ff fd38 	bl	80001e0 <strcmp>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d107      	bne.n	8000786 <HAL_UART_RxCpltCallback+0x92>
			uart_send(1,"already in this song!.\n",current_vol);
 8000776:	4b62      	ldr	r3, [pc, #392]	@ (8000900 <HAL_UART_RxCpltCallback+0x20c>)
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	461a      	mov	r2, r3
 800077c:	4961      	ldr	r1, [pc, #388]	@ (8000904 <HAL_UART_RxCpltCallback+0x210>)
 800077e:	2001      	movs	r0, #1
 8000780:	f000 f8da 	bl	8000938 <uart_send>
			return;
 8000784:	e0ae      	b.n	80008e4 <HAL_UART_RxCpltCallback+0x1f0>
		}
		else if(uart_rx_data=='3' && strcmp((char *)file_name,"0:/c.mp3")==0){
 8000786:	4b5a      	ldr	r3, [pc, #360]	@ (80008f0 <HAL_UART_RxCpltCallback+0x1fc>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b33      	cmp	r3, #51	@ 0x33
 800078c:	d10e      	bne.n	80007ac <HAL_UART_RxCpltCallback+0xb8>
 800078e:	495f      	ldr	r1, [pc, #380]	@ (800090c <HAL_UART_RxCpltCallback+0x218>)
 8000790:	485a      	ldr	r0, [pc, #360]	@ (80008fc <HAL_UART_RxCpltCallback+0x208>)
 8000792:	f7ff fd25 	bl	80001e0 <strcmp>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d107      	bne.n	80007ac <HAL_UART_RxCpltCallback+0xb8>
			uart_send(1,"already in this song!.\n",current_vol);
 800079c:	4b58      	ldr	r3, [pc, #352]	@ (8000900 <HAL_UART_RxCpltCallback+0x20c>)
 800079e:	881b      	ldrh	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	4958      	ldr	r1, [pc, #352]	@ (8000904 <HAL_UART_RxCpltCallback+0x210>)
 80007a4:	2001      	movs	r0, #1
 80007a6:	f000 f8c7 	bl	8000938 <uart_send>
			return;
 80007aa:	e09b      	b.n	80008e4 <HAL_UART_RxCpltCallback+0x1f0>
		}
			loop_flag = false;
 80007ac:	4b58      	ldr	r3, [pc, #352]	@ (8000910 <HAL_UART_RxCpltCallback+0x21c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	e097      	b.n	80008e4 <HAL_UART_RxCpltCallback+0x1f0>
		}
		else if(uart_rx_data == 'i'){
 80007b4:	4b4e      	ldr	r3, [pc, #312]	@ (80008f0 <HAL_UART_RxCpltCallback+0x1fc>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b69      	cmp	r3, #105	@ 0x69
 80007ba:	d11c      	bne.n	80007f6 <HAL_UART_RxCpltCallback+0x102>
			uart_rx_data = 0;
 80007bc:	4b4c      	ldr	r3, [pc, #304]	@ (80008f0 <HAL_UART_RxCpltCallback+0x1fc>)
 80007be:	2200      	movs	r2, #0
 80007c0:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=1;i<=sd_file_max_num;i++){
 80007c2:	2301      	movs	r3, #1
 80007c4:	73fb      	strb	r3, [r7, #15]
 80007c6:	e010      	b.n	80007ea <HAL_UART_RxCpltCallback+0xf6>
				uart_send(1,"%d.%s\n",i,sd_file[i].file_name);
 80007c8:	7bf9      	ldrb	r1, [r7, #15]
 80007ca:	7bfa      	ldrb	r2, [r7, #15]
 80007cc:	4613      	mov	r3, r2
 80007ce:	019b      	lsls	r3, r3, #6
 80007d0:	4413      	add	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	4a4f      	ldr	r2, [pc, #316]	@ (8000914 <HAL_UART_RxCpltCallback+0x220>)
 80007d6:	4413      	add	r3, r2
 80007d8:	3301      	adds	r3, #1
 80007da:	460a      	mov	r2, r1
 80007dc:	494e      	ldr	r1, [pc, #312]	@ (8000918 <HAL_UART_RxCpltCallback+0x224>)
 80007de:	2001      	movs	r0, #1
 80007e0:	f000 f8aa 	bl	8000938 <uart_send>
			for(uint8_t i=1;i<=sd_file_max_num;i++){
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	3301      	adds	r3, #1
 80007e8:	73fb      	strb	r3, [r7, #15]
 80007ea:	4b4c      	ldr	r3, [pc, #304]	@ (800091c <HAL_UART_RxCpltCallback+0x228>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	7bfa      	ldrb	r2, [r7, #15]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d9e9      	bls.n	80007c8 <HAL_UART_RxCpltCallback+0xd4>
 80007f4:	e076      	b.n	80008e4 <HAL_UART_RxCpltCallback+0x1f0>
			}
		}
		else if(uart_rx_data == ' '){
 80007f6:	4b3e      	ldr	r3, [pc, #248]	@ (80008f0 <HAL_UART_RxCpltCallback+0x1fc>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b20      	cmp	r3, #32
 80007fc:	d122      	bne.n	8000844 <HAL_UART_RxCpltCallback+0x150>
			stop_mp3 = (stop_mp3+1)%2;
 80007fe:	4b48      	ldr	r3, [pc, #288]	@ (8000920 <HAL_UART_RxCpltCallback+0x22c>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	3301      	adds	r3, #1
 8000804:	2b00      	cmp	r3, #0
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	bfb8      	it	lt
 800080c:	425b      	neglt	r3, r3
 800080e:	2b00      	cmp	r3, #0
 8000810:	bf14      	ite	ne
 8000812:	2301      	movne	r3, #1
 8000814:	2300      	moveq	r3, #0
 8000816:	b2da      	uxtb	r2, r3
 8000818:	4b41      	ldr	r3, [pc, #260]	@ (8000920 <HAL_UART_RxCpltCallback+0x22c>)
 800081a:	701a      	strb	r2, [r3, #0]
			if(stop_mp3){
 800081c:	4b40      	ldr	r3, [pc, #256]	@ (8000920 <HAL_UART_RxCpltCallback+0x22c>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d007      	beq.n	8000834 <HAL_UART_RxCpltCallback+0x140>
				uart_send(1,"stop.\n",current_vol);
 8000824:	4b36      	ldr	r3, [pc, #216]	@ (8000900 <HAL_UART_RxCpltCallback+0x20c>)
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	493e      	ldr	r1, [pc, #248]	@ (8000924 <HAL_UART_RxCpltCallback+0x230>)
 800082c:	2001      	movs	r0, #1
 800082e:	f000 f883 	bl	8000938 <uart_send>
 8000832:	e057      	b.n	80008e4 <HAL_UART_RxCpltCallback+0x1f0>
			}
			else{
				uart_send(1,"resume.\n",current_vol);
 8000834:	4b32      	ldr	r3, [pc, #200]	@ (8000900 <HAL_UART_RxCpltCallback+0x20c>)
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	493b      	ldr	r1, [pc, #236]	@ (8000928 <HAL_UART_RxCpltCallback+0x234>)
 800083c:	2001      	movs	r0, #1
 800083e:	f000 f87b 	bl	8000938 <uart_send>
 8000842:	e04f      	b.n	80008e4 <HAL_UART_RxCpltCallback+0x1f0>
			}
		}
		else if(uart_rx_data == '+'){
 8000844:	4b2a      	ldr	r3, [pc, #168]	@ (80008f0 <HAL_UART_RxCpltCallback+0x1fc>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b2b      	cmp	r3, #43	@ 0x2b
 800084a:	d123      	bne.n	8000894 <HAL_UART_RxCpltCallback+0x1a0>
			if(current_vol-0x0101>=0){
 800084c:	4b2c      	ldr	r3, [pc, #176]	@ (8000900 <HAL_UART_RxCpltCallback+0x20c>)
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000854:	d917      	bls.n	8000886 <HAL_UART_RxCpltCallback+0x192>
				current_vol-=0x0101;
 8000856:	4b2a      	ldr	r3, [pc, #168]	@ (8000900 <HAL_UART_RxCpltCallback+0x20c>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800085e:	b29a      	uxth	r2, r3
 8000860:	4b27      	ldr	r3, [pc, #156]	@ (8000900 <HAL_UART_RxCpltCallback+0x20c>)
 8000862:	801a      	strh	r2, [r3, #0]
				uart_send(1,"%d%%vol_plus\n",(current_vol*100)/0xFEFE);
 8000864:	4b26      	ldr	r3, [pc, #152]	@ (8000900 <HAL_UART_RxCpltCallback+0x20c>)
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	461a      	mov	r2, r3
 800086a:	2364      	movs	r3, #100	@ 0x64
 800086c:	fb02 f303 	mul.w	r3, r2, r3
 8000870:	4a2e      	ldr	r2, [pc, #184]	@ (800092c <HAL_UART_RxCpltCallback+0x238>)
 8000872:	fb82 1203 	smull	r1, r2, r2, r3
 8000876:	1392      	asrs	r2, r2, #14
 8000878:	17db      	asrs	r3, r3, #31
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	461a      	mov	r2, r3
 800087e:	492c      	ldr	r1, [pc, #176]	@ (8000930 <HAL_UART_RxCpltCallback+0x23c>)
 8000880:	2001      	movs	r0, #1
 8000882:	f000 f859 	bl	8000938 <uart_send>
			}
			SCI_Write(VS1003_VOL_REG,current_vol);
 8000886:	4b1e      	ldr	r3, [pc, #120]	@ (8000900 <HAL_UART_RxCpltCallback+0x20c>)
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	4619      	mov	r1, r3
 800088c:	200b      	movs	r0, #11
 800088e:	f000 f8cd 	bl	8000a2c <SCI_Write>
 8000892:	e027      	b.n	80008e4 <HAL_UART_RxCpltCallback+0x1f0>
		}
		else if(uart_rx_data == '-'){
 8000894:	4b16      	ldr	r3, [pc, #88]	@ (80008f0 <HAL_UART_RxCpltCallback+0x1fc>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b2d      	cmp	r3, #45	@ 0x2d
 800089a:	d123      	bne.n	80008e4 <HAL_UART_RxCpltCallback+0x1f0>
			if(current_vol+0x0101<=0xfefe){
 800089c:	4b18      	ldr	r3, [pc, #96]	@ (8000900 <HAL_UART_RxCpltCallback+0x20c>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	f64f 52fd 	movw	r2, #65021	@ 0xfdfd
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d817      	bhi.n	80008d8 <HAL_UART_RxCpltCallback+0x1e4>
				current_vol+=0x0101;
 80008a8:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <HAL_UART_RxCpltCallback+0x20c>)
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	f203 1301 	addw	r3, r3, #257	@ 0x101
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <HAL_UART_RxCpltCallback+0x20c>)
 80008b4:	801a      	strh	r2, [r3, #0]
				uart_send(1,"%d%%vol_minus\n",(current_vol*100)/0xFEFE);
 80008b6:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <HAL_UART_RxCpltCallback+0x20c>)
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	461a      	mov	r2, r3
 80008bc:	2364      	movs	r3, #100	@ 0x64
 80008be:	fb02 f303 	mul.w	r3, r2, r3
 80008c2:	4a1a      	ldr	r2, [pc, #104]	@ (800092c <HAL_UART_RxCpltCallback+0x238>)
 80008c4:	fb82 1203 	smull	r1, r2, r2, r3
 80008c8:	1392      	asrs	r2, r2, #14
 80008ca:	17db      	asrs	r3, r3, #31
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	461a      	mov	r2, r3
 80008d0:	4918      	ldr	r1, [pc, #96]	@ (8000934 <HAL_UART_RxCpltCallback+0x240>)
 80008d2:	2001      	movs	r0, #1
 80008d4:	f000 f830 	bl	8000938 <uart_send>
			}
			SCI_Write(VS1003_VOL_REG,current_vol);
 80008d8:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <HAL_UART_RxCpltCallback+0x20c>)
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	4619      	mov	r1, r3
 80008de:	200b      	movs	r0, #11
 80008e0:	f000 f8a4 	bl	8000a2c <SCI_Write>
		}
	}
  UNUSED(huart);
}
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40011000 	.word	0x40011000
 80008f0:	2000007c 	.word	0x2000007c
 80008f4:	2001074c 	.word	0x2001074c
 80008f8:	0800a2d8 	.word	0x0800a2d8
 80008fc:	200000a0 	.word	0x200000a0
 8000900:	20000000 	.word	0x20000000
 8000904:	0800a2e4 	.word	0x0800a2e4
 8000908:	0800a2fc 	.word	0x0800a2fc
 800090c:	0800a308 	.word	0x0800a308
 8000910:	20000002 	.word	0x20000002
 8000914:	200001a8 	.word	0x200001a8
 8000918:	0800a314 	.word	0x0800a314
 800091c:	200001a4 	.word	0x200001a4
 8000920:	200001a3 	.word	0x200001a3
 8000924:	0800a31c 	.word	0x0800a31c
 8000928:	0800a324 	.word	0x0800a324
 800092c:	4040c143 	.word	0x4040c143
 8000930:	0800a330 	.word	0x0800a330
 8000934:	0800a340 	.word	0x0800a340

08000938 <uart_send>:

void uart_send(uint8_t uart_num,char *fmt,...){
 8000938:	b40e      	push	{r1, r2, r3}
 800093a:	b580      	push	{r7, lr}
 800093c:	b091      	sub	sp, #68	@ 0x44
 800093e:	af00      	add	r7, sp, #0
 8000940:	4603      	mov	r3, r0
 8000942:	71fb      	strb	r3, [r7, #7]
	uint8_t uart_send_data[48];
	memset(uart_send_data,0,48);
 8000944:	f107 0310 	add.w	r3, r7, #16
 8000948:	2230      	movs	r2, #48	@ 0x30
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f009 f837 	bl	80099c0 <memset>
	va_list arg;
	va_start(arg,fmt);
 8000952:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000956:	60fb      	str	r3, [r7, #12]
	vsnprintf((char *)uart_send_data,48,fmt,arg);
 8000958:	f107 0010 	add.w	r0, r7, #16
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000960:	2130      	movs	r1, #48	@ 0x30
 8000962:	f009 f81f 	bl	80099a4 <vsniprintf>
	if(uart_num==1){
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d106      	bne.n	800097a <uart_send+0x42>
		HAL_UART_Transmit(&huart1, uart_send_data, 48, 10);
 800096c:	f107 0110 	add.w	r1, r7, #16
 8000970:	230a      	movs	r3, #10
 8000972:	2230      	movs	r2, #48	@ 0x30
 8000974:	4804      	ldr	r0, [pc, #16]	@ (8000988 <uart_send+0x50>)
 8000976:	f004 f9c1 	bl	8004cfc <HAL_UART_Transmit>
	}
	va_end(arg);
}
 800097a:	bf00      	nop
 800097c:	3744      	adds	r7, #68	@ 0x44
 800097e:	46bd      	mov	sp, r7
 8000980:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000984:	b003      	add	sp, #12
 8000986:	4770      	bx	lr
 8000988:	2001074c 	.word	0x2001074c

0800098c <SCI_Read>:

uint16_t SCI_Read(uint8_t add){
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
	uint16_t ret;
	uint8_t tx_data;
	uint8_t rx_data;
	while (DREQ_VAL == GPIO_PIN_RESET);
 8000996:	bf00      	nop
 8000998:	2102      	movs	r1, #2
 800099a:	4821      	ldr	r0, [pc, #132]	@ (8000a20 <SCI_Read+0x94>)
 800099c:	f001 fdce 	bl	800253c <HAL_GPIO_ReadPin>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d0f8      	beq.n	8000998 <SCI_Read+0xc>

	XCS_ON;
 80009a6:	2200      	movs	r2, #0
 80009a8:	2101      	movs	r1, #1
 80009aa:	481d      	ldr	r0, [pc, #116]	@ (8000a20 <SCI_Read+0x94>)
 80009ac:	f001 fdde 	bl	800256c <HAL_GPIO_WritePin>
	XDCS_OFF;
 80009b0:	2201      	movs	r2, #1
 80009b2:	2101      	movs	r1, #1
 80009b4:	481b      	ldr	r0, [pc, #108]	@ (8000a24 <SCI_Read+0x98>)
 80009b6:	f001 fdd9 	bl	800256c <HAL_GPIO_WritePin>

	tx_data = READ_VS1003_REG;
 80009ba:	2303      	movs	r3, #3
 80009bc:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi1, &tx_data, 1, 10);
 80009be:	f107 010d 	add.w	r1, r7, #13
 80009c2:	230a      	movs	r3, #10
 80009c4:	2201      	movs	r2, #1
 80009c6:	4818      	ldr	r0, [pc, #96]	@ (8000a28 <SCI_Read+0x9c>)
 80009c8:	f003 fbfb 	bl	80041c2 <HAL_SPI_Transmit>

	tx_data = add;
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi1, &tx_data, 1, 10);
 80009d0:	f107 010d 	add.w	r1, r7, #13
 80009d4:	230a      	movs	r3, #10
 80009d6:	2201      	movs	r2, #1
 80009d8:	4813      	ldr	r0, [pc, #76]	@ (8000a28 <SCI_Read+0x9c>)
 80009da:	f003 fbf2 	bl	80041c2 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &rx_data, 1, 10);
 80009de:	f107 010c 	add.w	r1, r7, #12
 80009e2:	230a      	movs	r3, #10
 80009e4:	2201      	movs	r2, #1
 80009e6:	4810      	ldr	r0, [pc, #64]	@ (8000a28 <SCI_Read+0x9c>)
 80009e8:	f003 fd2e 	bl	8004448 <HAL_SPI_Receive>
	ret = rx_data<<8;
 80009ec:	7b3b      	ldrb	r3, [r7, #12]
 80009ee:	021b      	lsls	r3, r3, #8
 80009f0:	81fb      	strh	r3, [r7, #14]

	HAL_SPI_Receive(&hspi1, &rx_data, 1, 10);
 80009f2:	f107 010c 	add.w	r1, r7, #12
 80009f6:	230a      	movs	r3, #10
 80009f8:	2201      	movs	r2, #1
 80009fa:	480b      	ldr	r0, [pc, #44]	@ (8000a28 <SCI_Read+0x9c>)
 80009fc:	f003 fd24 	bl	8004448 <HAL_SPI_Receive>
	ret |= rx_data;
 8000a00:	7b3b      	ldrb	r3, [r7, #12]
 8000a02:	461a      	mov	r2, r3
 8000a04:	89fb      	ldrh	r3, [r7, #14]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	81fb      	strh	r3, [r7, #14]

	XCS_OFF;
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	4804      	ldr	r0, [pc, #16]	@ (8000a20 <SCI_Read+0x94>)
 8000a10:	f001 fdac 	bl	800256c <HAL_GPIO_WritePin>

	return ret;
 8000a14:	89fb      	ldrh	r3, [r7, #14]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40020400 	.word	0x40020400
 8000a24:	40020000 	.word	0x40020000
 8000a28:	200106f0 	.word	0x200106f0

08000a2c <SCI_Write>:

void SCI_Write(uint8_t add,uint16_t write_val){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	460a      	mov	r2, r1
 8000a36:	71fb      	strb	r3, [r7, #7]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	80bb      	strh	r3, [r7, #4]
	uint8_t tx_data;
	while (DREQ_VAL == GPIO_PIN_RESET);
 8000a3c:	bf00      	nop
 8000a3e:	2102      	movs	r1, #2
 8000a40:	4820      	ldr	r0, [pc, #128]	@ (8000ac4 <SCI_Write+0x98>)
 8000a42:	f001 fd7b 	bl	800253c <HAL_GPIO_ReadPin>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d0f8      	beq.n	8000a3e <SCI_Write+0x12>

	XCS_ON;
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2101      	movs	r1, #1
 8000a50:	481c      	ldr	r0, [pc, #112]	@ (8000ac4 <SCI_Write+0x98>)
 8000a52:	f001 fd8b 	bl	800256c <HAL_GPIO_WritePin>
	XDCS_OFF;
 8000a56:	2201      	movs	r2, #1
 8000a58:	2101      	movs	r1, #1
 8000a5a:	481b      	ldr	r0, [pc, #108]	@ (8000ac8 <SCI_Write+0x9c>)
 8000a5c:	f001 fd86 	bl	800256c <HAL_GPIO_WritePin>

	tx_data = WRITE_VS1003_REG;
 8000a60:	2302      	movs	r3, #2
 8000a62:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &tx_data, 1, 10);
 8000a64:	f107 010f 	add.w	r1, r7, #15
 8000a68:	230a      	movs	r3, #10
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4817      	ldr	r0, [pc, #92]	@ (8000acc <SCI_Write+0xa0>)
 8000a6e:	f003 fba8 	bl	80041c2 <HAL_SPI_Transmit>

	tx_data = add;
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &tx_data, 1, 10);
 8000a76:	f107 010f 	add.w	r1, r7, #15
 8000a7a:	230a      	movs	r3, #10
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	4813      	ldr	r0, [pc, #76]	@ (8000acc <SCI_Write+0xa0>)
 8000a80:	f003 fb9f 	bl	80041c2 <HAL_SPI_Transmit>

	tx_data = write_val>>8;
 8000a84:	88bb      	ldrh	r3, [r7, #4]
 8000a86:	0a1b      	lsrs	r3, r3, #8
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &tx_data, 1, 10);
 8000a8e:	f107 010f 	add.w	r1, r7, #15
 8000a92:	230a      	movs	r3, #10
 8000a94:	2201      	movs	r2, #1
 8000a96:	480d      	ldr	r0, [pc, #52]	@ (8000acc <SCI_Write+0xa0>)
 8000a98:	f003 fb93 	bl	80041c2 <HAL_SPI_Transmit>

	tx_data = write_val;
 8000a9c:	88bb      	ldrh	r3, [r7, #4]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &tx_data, 1, 10);
 8000aa2:	f107 010f 	add.w	r1, r7, #15
 8000aa6:	230a      	movs	r3, #10
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	4808      	ldr	r0, [pc, #32]	@ (8000acc <SCI_Write+0xa0>)
 8000aac:	f003 fb89 	bl	80041c2 <HAL_SPI_Transmit>

	XCS_OFF;
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	4803      	ldr	r0, [pc, #12]	@ (8000ac4 <SCI_Write+0x98>)
 8000ab6:	f001 fd59 	bl	800256c <HAL_GPIO_WritePin>

}
 8000aba:	bf00      	nop
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40020400 	.word	0x40020400
 8000ac8:	40020000 	.word	0x40020000
 8000acc:	200106f0 	.word	0x200106f0

08000ad0 <SDI_Send>:

void SDI_Send(uint8_t *MP3_Data,size_t MP3_Len){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
	XDCS_ON;
 8000ada:	2200      	movs	r2, #0
 8000adc:	2101      	movs	r1, #1
 8000ade:	480f      	ldr	r0, [pc, #60]	@ (8000b1c <SDI_Send+0x4c>)
 8000ae0:	f001 fd44 	bl	800256c <HAL_GPIO_WritePin>
	for(uint8_t i=0;i<MP3_Len;i++){
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	73fb      	strb	r3, [r7, #15]
 8000ae8:	e00a      	b.n	8000b00 <SDI_Send+0x30>
		HAL_SPI_Transmit(&hspi1,&MP3_Data[i],1,10);
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	18d1      	adds	r1, r2, r3
 8000af0:	230a      	movs	r3, #10
 8000af2:	2201      	movs	r2, #1
 8000af4:	480a      	ldr	r0, [pc, #40]	@ (8000b20 <SDI_Send+0x50>)
 8000af6:	f003 fb64 	bl	80041c2 <HAL_SPI_Transmit>
	for(uint8_t i=0;i<MP3_Len;i++){
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	3301      	adds	r3, #1
 8000afe:	73fb      	strb	r3, [r7, #15]
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
 8000b02:	683a      	ldr	r2, [r7, #0]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d8f0      	bhi.n	8000aea <SDI_Send+0x1a>
	}
	XDCS_OFF;
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	4803      	ldr	r0, [pc, #12]	@ (8000b1c <SDI_Send+0x4c>)
 8000b0e:	f001 fd2d 	bl	800256c <HAL_GPIO_WritePin>
}
 8000b12:	bf00      	nop
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40020000 	.word	0x40020000
 8000b20:	200106f0 	.word	0x200106f0

08000b24 <vs1003_init>:

void vs1003_init(){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
	XRST_ON;
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	4857      	ldr	r0, [pc, #348]	@ (8000c8c <vs1003_init+0x168>)
 8000b30:	f001 fd1c 	bl	800256c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b34:	2001      	movs	r0, #1
 8000b36:	f000 fea9 	bl	800188c <HAL_Delay>
	XRST_OFF;
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	4853      	ldr	r0, [pc, #332]	@ (8000c8c <vs1003_init+0x168>)
 8000b40:	f001 fd14 	bl	800256c <HAL_GPIO_WritePin>
	XCS_OFF;
 8000b44:	2201      	movs	r2, #1
 8000b46:	2101      	movs	r1, #1
 8000b48:	4851      	ldr	r0, [pc, #324]	@ (8000c90 <vs1003_init+0x16c>)
 8000b4a:	f001 fd0f 	bl	800256c <HAL_GPIO_WritePin>
	XDCS_OFF;
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2101      	movs	r1, #1
 8000b52:	484e      	ldr	r0, [pc, #312]	@ (8000c8c <vs1003_init+0x168>)
 8000b54:	f001 fd0a 	bl	800256c <HAL_GPIO_WritePin>
	uint16_t _16_data;
	uint8_t retry = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	71fb      	strb	r3, [r7, #7]
  while(1){
  	_16_data = SCI_Read(VS1003_MODE_REG);
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f7ff ff15 	bl	800098c <SCI_Read>
 8000b62:	4603      	mov	r3, r0
 8000b64:	80bb      	strh	r3, [r7, #4]
  	SCI_Write(VS1003_MODE_REG,0x0804);
 8000b66:	f640 0104 	movw	r1, #2052	@ 0x804
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f7ff ff5e 	bl	8000a2c <SCI_Write>
  	if(_16_data==0x800 || retry++>=100){
 8000b70:	88bb      	ldrh	r3, [r7, #4]
 8000b72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000b76:	d004      	beq.n	8000b82 <vs1003_init+0x5e>
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	1c5a      	adds	r2, r3, #1
 8000b7c:	71fa      	strb	r2, [r7, #7]
 8000b7e:	2b63      	cmp	r3, #99	@ 0x63
 8000b80:	d9ec      	bls.n	8000b5c <vs1003_init+0x38>
  		uart_send(1,"ADD_MODE : 0x%04X\n",_16_data);
 8000b82:	88bb      	ldrh	r3, [r7, #4]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4943      	ldr	r1, [pc, #268]	@ (8000c94 <vs1003_init+0x170>)
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f7ff fed5 	bl	8000938 <uart_send>
  		break;
 8000b8e:	bf00      	nop
  	}
  }

  _16_data = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	80bb      	strh	r3, [r7, #4]
  retry = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	71fb      	strb	r3, [r7, #7]
  while(1){
    _16_data = SCI_Read(VS1003_CLOCKF_REG);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f7ff fef7 	bl	800098c <SCI_Read>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	80bb      	strh	r3, [r7, #4]
    SCI_Write(VS1003_CLOCKF_REG,0x9BE8);
 8000ba2:	f649 31e8 	movw	r1, #39912	@ 0x9be8
 8000ba6:	2003      	movs	r0, #3
 8000ba8:	f7ff ff40 	bl	8000a2c <SCI_Write>
    if(_16_data==0x9BE8 || retry++>=100){
 8000bac:	88bb      	ldrh	r3, [r7, #4]
 8000bae:	f649 32e8 	movw	r2, #39912	@ 0x9be8
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d004      	beq.n	8000bc0 <vs1003_init+0x9c>
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	1c5a      	adds	r2, r3, #1
 8000bba:	71fa      	strb	r2, [r7, #7]
 8000bbc:	2b63      	cmp	r3, #99	@ 0x63
 8000bbe:	d9eb      	bls.n	8000b98 <vs1003_init+0x74>
    	uart_send(1,"ADD_CLOCKF : 0x%04X\n",_16_data);
 8000bc0:	88bb      	ldrh	r3, [r7, #4]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4934      	ldr	r1, [pc, #208]	@ (8000c98 <vs1003_init+0x174>)
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f7ff feb6 	bl	8000938 <uart_send>
    	break;
 8000bcc:	bf00      	nop
   	}
  }

  _16_data = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	80bb      	strh	r3, [r7, #4]
  retry = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	71fb      	strb	r3, [r7, #7]
  while(1){
    _16_data = SCI_Read(VS1003_AUDATA_REG);
 8000bd6:	2005      	movs	r0, #5
 8000bd8:	f7ff fed8 	bl	800098c <SCI_Read>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	80bb      	strh	r3, [r7, #4]
    SCI_Write(VS1003_AUDATA_REG,mp3_64kbps_stereo_sampling_rate);
 8000be0:	f245 51f0 	movw	r1, #22000	@ 0x55f0
 8000be4:	2005      	movs	r0, #5
 8000be6:	f7ff ff21 	bl	8000a2c <SCI_Write>
    if(_16_data==mp3_64kbps_stereo_sampling_rate || retry++>=100){
 8000bea:	88bb      	ldrh	r3, [r7, #4]
 8000bec:	f245 52f0 	movw	r2, #22000	@ 0x55f0
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d004      	beq.n	8000bfe <vs1003_init+0xda>
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	71fa      	strb	r2, [r7, #7]
 8000bfa:	2b63      	cmp	r3, #99	@ 0x63
 8000bfc:	d9eb      	bls.n	8000bd6 <vs1003_init+0xb2>
    	uart_send(1,"ADD_AUDATA : 0x%04X\n",_16_data);
 8000bfe:	88bb      	ldrh	r3, [r7, #4]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4926      	ldr	r1, [pc, #152]	@ (8000c9c <vs1003_init+0x178>)
 8000c04:	2001      	movs	r0, #1
 8000c06:	f7ff fe97 	bl	8000938 <uart_send>
    	break;
 8000c0a:	bf00      	nop
   	}
  }

  _16_data = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	80bb      	strh	r3, [r7, #4]
  retry = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	71fb      	strb	r3, [r7, #7]
  while(1){
    _16_data = SCI_Read(VS1003_VOL_REG);
 8000c14:	200b      	movs	r0, #11
 8000c16:	f7ff feb9 	bl	800098c <SCI_Read>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	80bb      	strh	r3, [r7, #4]
    SCI_Write(VS1003_VOL_REG,current_vol);
 8000c1e:	4b20      	ldr	r3, [pc, #128]	@ (8000ca0 <vs1003_init+0x17c>)
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	4619      	mov	r1, r3
 8000c24:	200b      	movs	r0, #11
 8000c26:	f7ff ff01 	bl	8000a2c <SCI_Write>
    if(_16_data==current_vol || retry++>=100){
 8000c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca0 <vs1003_init+0x17c>)
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	88ba      	ldrh	r2, [r7, #4]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d004      	beq.n	8000c3e <vs1003_init+0x11a>
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	71fa      	strb	r2, [r7, #7]
 8000c3a:	2b63      	cmp	r3, #99	@ 0x63
 8000c3c:	d9ea      	bls.n	8000c14 <vs1003_init+0xf0>
    	uart_send(1,"ADD_VOL : 0x%04X\n",_16_data);
 8000c3e:	88bb      	ldrh	r3, [r7, #4]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4918      	ldr	r1, [pc, #96]	@ (8000ca4 <vs1003_init+0x180>)
 8000c44:	2001      	movs	r0, #1
 8000c46:	f7ff fe77 	bl	8000938 <uart_send>
    	break;
 8000c4a:	bf00      	nop
   	}
  }

  _16_data = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	80bb      	strh	r3, [r7, #4]
  retry = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	71fb      	strb	r3, [r7, #7]
  while(1){
    _16_data = SCI_Read(VS1003_DECODE_TIME);
 8000c54:	2004      	movs	r0, #4
 8000c56:	f7ff fe99 	bl	800098c <SCI_Read>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	80bb      	strh	r3, [r7, #4]
    SCI_Write(VS1003_DECODE_TIME,0x0000);
 8000c5e:	2100      	movs	r1, #0
 8000c60:	2004      	movs	r0, #4
 8000c62:	f7ff fee3 	bl	8000a2c <SCI_Write>
    if(_16_data==0x0000 || retry++>=100){
 8000c66:	88bb      	ldrh	r3, [r7, #4]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d004      	beq.n	8000c76 <vs1003_init+0x152>
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	1c5a      	adds	r2, r3, #1
 8000c70:	71fa      	strb	r2, [r7, #7]
 8000c72:	2b63      	cmp	r3, #99	@ 0x63
 8000c74:	d9ee      	bls.n	8000c54 <vs1003_init+0x130>
    	uart_send(1,"ADD_DECODE_TIME : 0x%04X\n",_16_data);
 8000c76:	88bb      	ldrh	r3, [r7, #4]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	490b      	ldr	r1, [pc, #44]	@ (8000ca8 <vs1003_init+0x184>)
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f7ff fe5b 	bl	8000938 <uart_send>
    	break;
 8000c82:	bf00      	nop
   	}
  }
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	40020400 	.word	0x40020400
 8000c94:	0800a350 	.word	0x0800a350
 8000c98:	0800a364 	.word	0x0800a364
 8000c9c:	0800a37c 	.word	0x0800a37c
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	0800a394 	.word	0x0800a394
 8000ca8:	0800a3a8 	.word	0x0800a3a8

08000cac <SD_file_info>:

void SD_file_info(){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b0d4      	sub	sp, #336	@ 0x150
 8000cb0:	af00      	add	r7, sp, #0
	DIR dp;
	FILINFO fno;
	bool do_flag = false;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
	uint8_t i = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f887 314e 	strb.w	r3, [r7, #334]	@ 0x14e
	sd_file_max_num = 0;
 8000cbe:	4b29      	ldr	r3, [pc, #164]	@ (8000d64 <SD_file_info+0xb8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]
	current_sd_file_num = 0;
 8000cc4:	4b28      	ldr	r3, [pc, #160]	@ (8000d68 <SD_file_info+0xbc>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]

	if(f_opendir(&dp, "0:/")==FR_OK){
 8000cca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cce:	4927      	ldr	r1, [pc, #156]	@ (8000d6c <SD_file_info+0xc0>)
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f008 fc48 	bl	8009566 <f_opendir>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d138      	bne.n	8000d4e <SD_file_info+0xa2>
		do_flag = true;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
	}
	while(do_flag){
 8000ce2:	e034      	b.n	8000d4e <SD_file_info+0xa2>
		f_readdir(&dp, &fno);
 8000ce4:	463a      	mov	r2, r7
 8000ce6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f008 fcad 	bl	800964c <f_readdir>
		if(dp.sect==0){
 8000cf2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d10a      	bne.n	8000d10 <SD_file_info+0x64>
			uart_send(1,"complete\n");
 8000cfa:	491d      	ldr	r1, [pc, #116]	@ (8000d70 <SD_file_info+0xc4>)
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f7ff fe1b 	bl	8000938 <uart_send>
			sd_file_max_num = i-1;
 8000d02:	f897 314e 	ldrb.w	r3, [r7, #334]	@ 0x14e
 8000d06:	3b01      	subs	r3, #1
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <SD_file_info+0xb8>)
 8000d0c:	701a      	strb	r2, [r3, #0]
			break;
 8000d0e:	e023      	b.n	8000d58 <SD_file_info+0xac>
		}
		else{
			sd_file[i].file_number = i;
 8000d10:	f897 214e 	ldrb.w	r2, [r7, #334]	@ 0x14e
 8000d14:	4917      	ldr	r1, [pc, #92]	@ (8000d74 <SD_file_info+0xc8>)
 8000d16:	4613      	mov	r3, r2
 8000d18:	019b      	lsls	r3, r3, #6
 8000d1a:	4413      	add	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f897 214e 	ldrb.w	r2, [r7, #334]	@ 0x14e
 8000d24:	701a      	strb	r2, [r3, #0]
			sprintf((char *)sd_file[i].file_name,"0:/%s",(char *)fno.fname);
 8000d26:	f897 214e 	ldrb.w	r2, [r7, #334]	@ 0x14e
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	019b      	lsls	r3, r3, #6
 8000d2e:	4413      	add	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4a10      	ldr	r2, [pc, #64]	@ (8000d74 <SD_file_info+0xc8>)
 8000d34:	4413      	add	r3, r2
 8000d36:	1c58      	adds	r0, r3, #1
 8000d38:	463b      	mov	r3, r7
 8000d3a:	3316      	adds	r3, #22
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	490e      	ldr	r1, [pc, #56]	@ (8000d78 <SD_file_info+0xcc>)
 8000d40:	f008 fde4 	bl	800990c <siprintf>
			i++;
 8000d44:	f897 314e 	ldrb.w	r3, [r7, #334]	@ 0x14e
 8000d48:	3301      	adds	r3, #1
 8000d4a:	f887 314e 	strb.w	r3, [r7, #334]	@ 0x14e
	while(do_flag){
 8000d4e:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1c6      	bne.n	8000ce4 <SD_file_info+0x38>
		}
	}
}
 8000d56:	bf00      	nop
 8000d58:	bf00      	nop
 8000d5a:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200001a4 	.word	0x200001a4
 8000d68:	200105a8 	.word	0x200105a8
 8000d6c:	0800a3c4 	.word	0x0800a3c4
 8000d70:	0800a3c8 	.word	0x0800a3c8
 8000d74:	200001a8 	.word	0x200001a8
 8000d78:	0800a3d4 	.word	0x0800a3d4

08000d7c <decoder_control>:
void decoder_control(){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	if(uart_rx_data=='r'||
 8000d80:	4b35      	ldr	r3, [pc, #212]	@ (8000e58 <decoder_control+0xdc>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b72      	cmp	r3, #114	@ 0x72
 8000d86:	d00f      	beq.n	8000da8 <decoder_control+0x2c>
		 uart_rx_data=='1'||
 8000d88:	4b33      	ldr	r3, [pc, #204]	@ (8000e58 <decoder_control+0xdc>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
	if(uart_rx_data=='r'||
 8000d8c:	2b31      	cmp	r3, #49	@ 0x31
 8000d8e:	d00b      	beq.n	8000da8 <decoder_control+0x2c>
		 uart_rx_data=='2'||
 8000d90:	4b31      	ldr	r3, [pc, #196]	@ (8000e58 <decoder_control+0xdc>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
		 uart_rx_data=='1'||
 8000d94:	2b32      	cmp	r3, #50	@ 0x32
 8000d96:	d007      	beq.n	8000da8 <decoder_control+0x2c>
		 uart_rx_data=='3'||
 8000d98:	4b2f      	ldr	r3, [pc, #188]	@ (8000e58 <decoder_control+0xdc>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
		 uart_rx_data=='2'||
 8000d9c:	2b33      	cmp	r3, #51	@ 0x33
 8000d9e:	d003      	beq.n	8000da8 <decoder_control+0x2c>
		 uart_rx_data=='n'){
 8000da0:	4b2d      	ldr	r3, [pc, #180]	@ (8000e58 <decoder_control+0xdc>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
		 uart_rx_data=='3'||
 8000da4:	2b6e      	cmp	r3, #110	@ 0x6e
 8000da6:	d154      	bne.n	8000e52 <decoder_control+0xd6>
		switch (uart_rx_data){
 8000da8:	4b2b      	ldr	r3, [pc, #172]	@ (8000e58 <decoder_control+0xdc>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b6e      	cmp	r3, #110	@ 0x6e
 8000dae:	d022      	beq.n	8000df6 <decoder_control+0x7a>
 8000db0:	2b6e      	cmp	r3, #110	@ 0x6e
 8000db2:	dc3d      	bgt.n	8000e30 <decoder_control+0xb4>
 8000db4:	2b33      	cmp	r3, #51	@ 0x33
 8000db6:	d016      	beq.n	8000de6 <decoder_control+0x6a>
 8000db8:	2b33      	cmp	r3, #51	@ 0x33
 8000dba:	dc39      	bgt.n	8000e30 <decoder_control+0xb4>
 8000dbc:	2b31      	cmp	r3, #49	@ 0x31
 8000dbe:	d002      	beq.n	8000dc6 <decoder_control+0x4a>
 8000dc0:	2b32      	cmp	r3, #50	@ 0x32
 8000dc2:	d008      	beq.n	8000dd6 <decoder_control+0x5a>
 8000dc4:	e034      	b.n	8000e30 <decoder_control+0xb4>
		case '1':
			current_sd_file_num = 1;
 8000dc6:	4b25      	ldr	r3, [pc, #148]	@ (8000e5c <decoder_control+0xe0>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	701a      	strb	r2, [r3, #0]
		  sprintf((char *)file_name, "0:/a.mp3");
 8000dcc:	4924      	ldr	r1, [pc, #144]	@ (8000e60 <decoder_control+0xe4>)
 8000dce:	4825      	ldr	r0, [pc, #148]	@ (8000e64 <decoder_control+0xe8>)
 8000dd0:	f008 fd9c 	bl	800990c <siprintf>
		  break;
 8000dd4:	e02c      	b.n	8000e30 <decoder_control+0xb4>
		case '2':
			current_sd_file_num = 2;
 8000dd6:	4b21      	ldr	r3, [pc, #132]	@ (8000e5c <decoder_control+0xe0>)
 8000dd8:	2202      	movs	r2, #2
 8000dda:	701a      	strb	r2, [r3, #0]
		  sprintf((char *)file_name, "0:/b.mp3");
 8000ddc:	4922      	ldr	r1, [pc, #136]	@ (8000e68 <decoder_control+0xec>)
 8000dde:	4821      	ldr	r0, [pc, #132]	@ (8000e64 <decoder_control+0xe8>)
 8000de0:	f008 fd94 	bl	800990c <siprintf>
		  break;
 8000de4:	e024      	b.n	8000e30 <decoder_control+0xb4>
		case '3':
			current_sd_file_num = 3;
 8000de6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e5c <decoder_control+0xe0>)
 8000de8:	2203      	movs	r2, #3
 8000dea:	701a      	strb	r2, [r3, #0]
		  sprintf((char *)file_name, "0:/c.mp3");
 8000dec:	491f      	ldr	r1, [pc, #124]	@ (8000e6c <decoder_control+0xf0>)
 8000dee:	481d      	ldr	r0, [pc, #116]	@ (8000e64 <decoder_control+0xe8>)
 8000df0:	f008 fd8c 	bl	800990c <siprintf>
		  break;
 8000df4:	e01c      	b.n	8000e30 <decoder_control+0xb4>
		case 'n':
			if(current_sd_file_num++>=sd_file_max_num){
 8000df6:	4b19      	ldr	r3, [pc, #100]	@ (8000e5c <decoder_control+0xe0>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	b2d1      	uxtb	r1, r2
 8000dfe:	4a17      	ldr	r2, [pc, #92]	@ (8000e5c <decoder_control+0xe0>)
 8000e00:	7011      	strb	r1, [r2, #0]
 8000e02:	4a1b      	ldr	r2, [pc, #108]	@ (8000e70 <decoder_control+0xf4>)
 8000e04:	7812      	ldrb	r2, [r2, #0]
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d302      	bcc.n	8000e10 <decoder_control+0x94>
				current_sd_file_num = 1;
 8000e0a:	4b14      	ldr	r3, [pc, #80]	@ (8000e5c <decoder_control+0xe0>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	701a      	strb	r2, [r3, #0]
			}
			sprintf((char *)file_name, "%s",(char *)sd_file[current_sd_file_num].file_name);
 8000e10:	4b12      	ldr	r3, [pc, #72]	@ (8000e5c <decoder_control+0xe0>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4613      	mov	r3, r2
 8000e18:	019b      	lsls	r3, r3, #6
 8000e1a:	4413      	add	r3, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	4a15      	ldr	r2, [pc, #84]	@ (8000e74 <decoder_control+0xf8>)
 8000e20:	4413      	add	r3, r2
 8000e22:	3301      	adds	r3, #1
 8000e24:	461a      	mov	r2, r3
 8000e26:	4914      	ldr	r1, [pc, #80]	@ (8000e78 <decoder_control+0xfc>)
 8000e28:	480e      	ldr	r0, [pc, #56]	@ (8000e64 <decoder_control+0xe8>)
 8000e2a:	f008 fd6f 	bl	800990c <siprintf>
			break;
 8000e2e:	bf00      	nop
		}
		uart_send(1,"you are in %d.\n",current_sd_file_num);
 8000e30:	4b0a      	ldr	r3, [pc, #40]	@ (8000e5c <decoder_control+0xe0>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	4911      	ldr	r1, [pc, #68]	@ (8000e7c <decoder_control+0x100>)
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f7ff fd7d 	bl	8000938 <uart_send>
		loop_flag=true;
 8000e3e:	4b10      	ldr	r3, [pc, #64]	@ (8000e80 <decoder_control+0x104>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	701a      	strb	r2, [r3, #0]
		uart_rx_data = 0;
 8000e44:	4b04      	ldr	r3, [pc, #16]	@ (8000e58 <decoder_control+0xdc>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
		sd_user(SD_READ,(char *)file_name);
 8000e4a:	4906      	ldr	r1, [pc, #24]	@ (8000e64 <decoder_control+0xe8>)
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f000 f819 	bl	8000e84 <sd_user>
	}
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	2000007c 	.word	0x2000007c
 8000e5c:	200105a8 	.word	0x200105a8
 8000e60:	0800a2d8 	.word	0x0800a2d8
 8000e64:	200000a0 	.word	0x200000a0
 8000e68:	0800a2fc 	.word	0x0800a2fc
 8000e6c:	0800a308 	.word	0x0800a308
 8000e70:	200001a4 	.word	0x200001a4
 8000e74:	200001a8 	.word	0x200001a8
 8000e78:	0800a3dc 	.word	0x0800a3dc
 8000e7c:	0800a3e0 	.word	0x0800a3e0
 8000e80:	20000002 	.word	0x20000002

08000e84 <sd_user>:

void sd_user(SD_RW_MODE SD_RW,char file_derectory[]){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	6039      	str	r1, [r7, #0]
 8000e8e:	71fb      	strb	r3, [r7, #7]
	UINT byte;
	uint32_t total_byte = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  if(SD_RW==SD_READ){
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d134      	bne.n	8000f04 <sd_user+0x80>
  	if(f_open(&SDFile,(const TCHAR*)file_derectory,FA_OPEN_EXISTING|FA_READ)==FR_OK){
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	6839      	ldr	r1, [r7, #0]
 8000e9e:	483d      	ldr	r0, [pc, #244]	@ (8000f94 <sd_user+0x110>)
 8000ea0:	f007 ffc0 	bl	8008e24 <f_open>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d127      	bne.n	8000efa <sd_user+0x76>
  		while(loop_flag){
 8000eaa:	e021      	b.n	8000ef0 <sd_user+0x6c>
  			f_read(&SDFile, sd_buf, 32, &byte);
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	2220      	movs	r2, #32
 8000eb2:	4939      	ldr	r1, [pc, #228]	@ (8000f98 <sd_user+0x114>)
 8000eb4:	4837      	ldr	r0, [pc, #220]	@ (8000f94 <sd_user+0x110>)
 8000eb6:	f008 f96f 	bl	8009198 <f_read>
  			total_byte+=byte;
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]
  			while(DREQ_VAL==GPIO_PIN_RESET);
 8000ec2:	bf00      	nop
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	4835      	ldr	r0, [pc, #212]	@ (8000f9c <sd_user+0x118>)
 8000ec8:	f001 fb38 	bl	800253c <HAL_GPIO_ReadPin>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d0f8      	beq.n	8000ec4 <sd_user+0x40>
  			SDI_Send(sd_buf,32);
 8000ed2:	2120      	movs	r1, #32
 8000ed4:	4830      	ldr	r0, [pc, #192]	@ (8000f98 <sd_user+0x114>)
 8000ed6:	f7ff fdfb 	bl	8000ad0 <SDI_Send>
  			while(stop_mp3);
 8000eda:	bf00      	nop
 8000edc:	4b30      	ldr	r3, [pc, #192]	@ (8000fa0 <sd_user+0x11c>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1fb      	bne.n	8000edc <sd_user+0x58>
  			if(byte < 32){
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	2b1f      	cmp	r3, #31
 8000ee8:	d802      	bhi.n	8000ef0 <sd_user+0x6c>
  				loop_flag=false;
 8000eea:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa4 <sd_user+0x120>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
  		while(loop_flag){
 8000ef0:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa4 <sd_user+0x120>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1d9      	bne.n	8000eac <sd_user+0x28>
 8000ef8:	e03f      	b.n	8000f7a <sd_user+0xf6>
  			}
  		}
  	}
  	else{
  		uart_send(1,"error\n");
 8000efa:	492b      	ldr	r1, [pc, #172]	@ (8000fa8 <sd_user+0x124>)
 8000efc:	2001      	movs	r0, #1
 8000efe:	f7ff fd1b 	bl	8000938 <uart_send>
 8000f02:	e03a      	b.n	8000f7a <sd_user+0xf6>
  	}
  }
  else if(SD_RW==SD_WRITE){
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d11a      	bne.n	8000f40 <sd_user+0xbc>
  	if(f_open(&SDFile,(const TCHAR*)file_derectory,FA_OPEN_EXISTING|FA_WRITE)==FR_OK){
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	6839      	ldr	r1, [r7, #0]
 8000f0e:	4821      	ldr	r0, [pc, #132]	@ (8000f94 <sd_user+0x110>)
 8000f10:	f007 ff88 	bl	8008e24 <f_open>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d10d      	bne.n	8000f36 <sd_user+0xb2>
    	f_read(&SDFile, sd_buf, 32, &byte);
 8000f1a:	f107 0308 	add.w	r3, r7, #8
 8000f1e:	2220      	movs	r2, #32
 8000f20:	491d      	ldr	r1, [pc, #116]	@ (8000f98 <sd_user+0x114>)
 8000f22:	481c      	ldr	r0, [pc, #112]	@ (8000f94 <sd_user+0x110>)
 8000f24:	f008 f938 	bl	8009198 <f_read>
    	uart_send(1,"\n%d byte read!\n",byte);
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	491f      	ldr	r1, [pc, #124]	@ (8000fac <sd_user+0x128>)
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f7ff fd02 	bl	8000938 <uart_send>
 8000f34:	e021      	b.n	8000f7a <sd_user+0xf6>
    }
    else{
    	uart_send(1,"error\n");
 8000f36:	491c      	ldr	r1, [pc, #112]	@ (8000fa8 <sd_user+0x124>)
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f7ff fcfd 	bl	8000938 <uart_send>
 8000f3e:	e01c      	b.n	8000f7a <sd_user+0xf6>
    }
  }
  else if(SD_RW==SD_NEW_WRITE){
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d119      	bne.n	8000f7a <sd_user+0xf6>
    if(f_open(&SDFile,(const TCHAR*)file_derectory,FA_CREATE_NEW|FA_WRITE)==FR_OK){
 8000f46:	2206      	movs	r2, #6
 8000f48:	6839      	ldr	r1, [r7, #0]
 8000f4a:	4812      	ldr	r0, [pc, #72]	@ (8000f94 <sd_user+0x110>)
 8000f4c:	f007 ff6a 	bl	8008e24 <f_open>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10d      	bne.n	8000f72 <sd_user+0xee>
     	f_read(&SDFile, sd_buf, 32, &byte);
 8000f56:	f107 0308 	add.w	r3, r7, #8
 8000f5a:	2220      	movs	r2, #32
 8000f5c:	490e      	ldr	r1, [pc, #56]	@ (8000f98 <sd_user+0x114>)
 8000f5e:	480d      	ldr	r0, [pc, #52]	@ (8000f94 <sd_user+0x110>)
 8000f60:	f008 f91a 	bl	8009198 <f_read>
     	uart_send(1,"\n%d byte read!\n",byte);
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	461a      	mov	r2, r3
 8000f68:	4910      	ldr	r1, [pc, #64]	@ (8000fac <sd_user+0x128>)
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f7ff fce4 	bl	8000938 <uart_send>
 8000f70:	e003      	b.n	8000f7a <sd_user+0xf6>
    }
     else{
     	uart_send(1,"error\n");
 8000f72:	490d      	ldr	r1, [pc, #52]	@ (8000fa8 <sd_user+0x124>)
 8000f74:	2001      	movs	r0, #1
 8000f76:	f7ff fcdf 	bl	8000938 <uart_send>
    }
  }
  uart_send(1,"total_byte : %d\n",total_byte);
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	490c      	ldr	r1, [pc, #48]	@ (8000fb0 <sd_user+0x12c>)
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f7ff fcda 	bl	8000938 <uart_send>
  f_close(&SDFile);
 8000f84:	4803      	ldr	r0, [pc, #12]	@ (8000f94 <sd_user+0x110>)
 8000f86:	f008 fac4 	bl	8009512 <f_close>
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20010a34 	.word	0x20010a34
 8000f98:	20000080 	.word	0x20000080
 8000f9c:	40020400 	.word	0x40020400
 8000fa0:	200001a3 	.word	0x200001a3
 8000fa4:	20000002 	.word	0x20000002
 8000fa8:	0800a3f0 	.word	0x0800a3f0
 8000fac:	0800a3f8 	.word	0x0800a3f8
 8000fb0:	0800a408 	.word	0x0800a408

08000fb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb8:	f000 fbf6 	bl	80017a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fbc:	f000 f840 	bl	8001040 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc0:	f7ff fb16 	bl	80005f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fc4:	f7ff fae4 	bl	8000590 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000fc8:	f000 fb1e 	bl	8001608 <MX_USART1_UART_Init>
  MX_SDIO_SD_Init();
 8000fcc:	f000 f8a6 	bl	800111c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000fd0:	f005 f988 	bl	80062e4 <MX_FATFS_Init>
  MX_SPI1_Init();
 8000fd4:	f000 f9b2 	bl	800133c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  vs1003_init();
 8000fd8:	f7ff fda4 	bl	8000b24 <vs1003_init>
  UART_Start_Receive_DMA(&huart1, &uart_rx_data, 1);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4911      	ldr	r1, [pc, #68]	@ (8001024 <main+0x70>)
 8000fe0:	4811      	ldr	r0, [pc, #68]	@ (8001028 <main+0x74>)
 8000fe2:	f004 f8b3 	bl	800514c <UART_Start_Receive_DMA>
  retSD = f_mount(&SDFatFS,(TCHAR const*)&SDPath[0],1);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4910      	ldr	r1, [pc, #64]	@ (800102c <main+0x78>)
 8000fea:	4811      	ldr	r0, [pc, #68]	@ (8001030 <main+0x7c>)
 8000fec:	f007 fed4 	bl	8008d98 <f_mount>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <main+0x80>)
 8000ff6:	701a      	strb	r2, [r3, #0]
  if(retSD==FR_OK){
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <main+0x80>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d104      	bne.n	800100a <main+0x56>
    	uart_send(1,"f_mount ture!\n");
 8001000:	490d      	ldr	r1, [pc, #52]	@ (8001038 <main+0x84>)
 8001002:	2001      	movs	r0, #1
 8001004:	f7ff fc98 	bl	8000938 <uart_send>
 8001008:	e006      	b.n	8001018 <main+0x64>
    }
  else{
    uart_send(1,"mount false error code : %d\n",retSD);
 800100a:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <main+0x80>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	490a      	ldr	r1, [pc, #40]	@ (800103c <main+0x88>)
 8001012:	2001      	movs	r0, #1
 8001014:	f7ff fc90 	bl	8000938 <uart_send>
  }
  SD_file_info();
 8001018:	f7ff fe48 	bl	8000cac <SD_file_info>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		decoder_control();
 800101c:	f7ff feae 	bl	8000d7c <decoder_control>
 8001020:	e7fc      	b.n	800101c <main+0x68>
 8001022:	bf00      	nop
 8001024:	2000007c 	.word	0x2000007c
 8001028:	2001074c 	.word	0x2001074c
 800102c:	200107fc 	.word	0x200107fc
 8001030:	20010800 	.word	0x20010800
 8001034:	200107f8 	.word	0x200107f8
 8001038:	0800a41c 	.word	0x0800a41c
 800103c:	0800a42c 	.word	0x0800a42c

08001040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b094      	sub	sp, #80	@ 0x50
 8001044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001046:	f107 0320 	add.w	r3, r7, #32
 800104a:	2230      	movs	r2, #48	@ 0x30
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f008 fcb6 	bl	80099c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	4b27      	ldr	r3, [pc, #156]	@ (8001108 <SystemClock_Config+0xc8>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106c:	4a26      	ldr	r2, [pc, #152]	@ (8001108 <SystemClock_Config+0xc8>)
 800106e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001072:	6413      	str	r3, [r2, #64]	@ 0x40
 8001074:	4b24      	ldr	r3, [pc, #144]	@ (8001108 <SystemClock_Config+0xc8>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001080:	2300      	movs	r3, #0
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	4b21      	ldr	r3, [pc, #132]	@ (800110c <SystemClock_Config+0xcc>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a20      	ldr	r2, [pc, #128]	@ (800110c <SystemClock_Config+0xcc>)
 800108a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4b1e      	ldr	r3, [pc, #120]	@ (800110c <SystemClock_Config+0xcc>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800109c:	2302      	movs	r3, #2
 800109e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a0:	2301      	movs	r3, #1
 80010a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a4:	2310      	movs	r3, #16
 80010a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a8:	2302      	movs	r3, #2
 80010aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ac:	2300      	movs	r3, #0
 80010ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010b0:	2308      	movs	r3, #8
 80010b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80010b4:	2364      	movs	r3, #100	@ 0x64
 80010b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010b8:	2302      	movs	r3, #2
 80010ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80010bc:	2305      	movs	r3, #5
 80010be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c0:	f107 0320 	add.w	r3, r7, #32
 80010c4:	4618      	mov	r0, r3
 80010c6:	f001 fa6b 	bl	80025a0 <HAL_RCC_OscConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010d0:	f000 f81e 	bl	8001110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d4:	230f      	movs	r3, #15
 80010d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d8:	2302      	movs	r3, #2
 80010da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	2103      	movs	r1, #3
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 fccd 	bl	8002a90 <HAL_RCC_ClockConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010fc:	f000 f808 	bl	8001110 <Error_Handler>
  }
}
 8001100:	bf00      	nop
 8001102:	3750      	adds	r7, #80	@ 0x50
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40023800 	.word	0x40023800
 800110c:	40007000 	.word	0x40007000

08001110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001114:	b672      	cpsid	i
}
 8001116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <Error_Handler+0x8>

0800111c <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001120:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <MX_SDIO_SD_Init+0x38>)
 8001122:	4a0d      	ldr	r2, [pc, #52]	@ (8001158 <MX_SDIO_SD_Init+0x3c>)
 8001124:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001126:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <MX_SDIO_SD_Init+0x38>)
 8001128:	2200      	movs	r2, #0
 800112a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800112c:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <MX_SDIO_SD_Init+0x38>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001132:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <MX_SDIO_SD_Init+0x38>)
 8001134:	2200      	movs	r2, #0
 8001136:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <MX_SDIO_SD_Init+0x38>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800113e:	4b05      	ldr	r3, [pc, #20]	@ (8001154 <MX_SDIO_SD_Init+0x38>)
 8001140:	2200      	movs	r2, #0
 8001142:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001144:	4b03      	ldr	r3, [pc, #12]	@ (8001154 <MX_SDIO_SD_Init+0x38>)
 8001146:	2200      	movs	r2, #0
 8001148:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	200105ac 	.word	0x200105ac
 8001158:	40012c00 	.word	0x40012c00

0800115c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	@ 0x28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a68      	ldr	r2, [pc, #416]	@ (800131c <HAL_SD_MspInit+0x1c0>)
 800117a:	4293      	cmp	r3, r2
 800117c:	f040 80c9 	bne.w	8001312 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001180:	2300      	movs	r3, #0
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	4b66      	ldr	r3, [pc, #408]	@ (8001320 <HAL_SD_MspInit+0x1c4>)
 8001186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001188:	4a65      	ldr	r2, [pc, #404]	@ (8001320 <HAL_SD_MspInit+0x1c4>)
 800118a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800118e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001190:	4b63      	ldr	r3, [pc, #396]	@ (8001320 <HAL_SD_MspInit+0x1c4>)
 8001192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	4b5f      	ldr	r3, [pc, #380]	@ (8001320 <HAL_SD_MspInit+0x1c4>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a4:	4a5e      	ldr	r2, [pc, #376]	@ (8001320 <HAL_SD_MspInit+0x1c4>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ac:	4b5c      	ldr	r3, [pc, #368]	@ (8001320 <HAL_SD_MspInit+0x1c4>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	4b58      	ldr	r3, [pc, #352]	@ (8001320 <HAL_SD_MspInit+0x1c4>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c0:	4a57      	ldr	r2, [pc, #348]	@ (8001320 <HAL_SD_MspInit+0x1c4>)
 80011c2:	f043 0302 	orr.w	r3, r3, #2
 80011c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c8:	4b55      	ldr	r3, [pc, #340]	@ (8001320 <HAL_SD_MspInit+0x1c4>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PA6     ------> SDIO_CMD
    PB15     ------> SDIO_CK
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011d4:	2340      	movs	r3, #64	@ 0x40
 80011d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011dc:	2301      	movs	r3, #1
 80011de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80011e4:	230c      	movs	r3, #12
 80011e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	484d      	ldr	r0, [pc, #308]	@ (8001324 <HAL_SD_MspInit+0x1c8>)
 80011f0:	f001 f820 	bl	8002234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_7;
 80011f4:	f248 0380 	movw	r3, #32896	@ 0x8080
 80011f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011fe:	2301      	movs	r3, #1
 8001200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001206:	230c      	movs	r3, #12
 8001208:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	4845      	ldr	r0, [pc, #276]	@ (8001328 <HAL_SD_MspInit+0x1cc>)
 8001212:	f001 f80f 	bl	8002234 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001216:	4b45      	ldr	r3, [pc, #276]	@ (800132c <HAL_SD_MspInit+0x1d0>)
 8001218:	4a45      	ldr	r2, [pc, #276]	@ (8001330 <HAL_SD_MspInit+0x1d4>)
 800121a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800121c:	4b43      	ldr	r3, [pc, #268]	@ (800132c <HAL_SD_MspInit+0x1d0>)
 800121e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001222:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001224:	4b41      	ldr	r3, [pc, #260]	@ (800132c <HAL_SD_MspInit+0x1d0>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800122a:	4b40      	ldr	r3, [pc, #256]	@ (800132c <HAL_SD_MspInit+0x1d0>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001230:	4b3e      	ldr	r3, [pc, #248]	@ (800132c <HAL_SD_MspInit+0x1d0>)
 8001232:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001236:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001238:	4b3c      	ldr	r3, [pc, #240]	@ (800132c <HAL_SD_MspInit+0x1d0>)
 800123a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800123e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001240:	4b3a      	ldr	r3, [pc, #232]	@ (800132c <HAL_SD_MspInit+0x1d0>)
 8001242:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001246:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001248:	4b38      	ldr	r3, [pc, #224]	@ (800132c <HAL_SD_MspInit+0x1d0>)
 800124a:	2220      	movs	r2, #32
 800124c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800124e:	4b37      	ldr	r3, [pc, #220]	@ (800132c <HAL_SD_MspInit+0x1d0>)
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001254:	4b35      	ldr	r3, [pc, #212]	@ (800132c <HAL_SD_MspInit+0x1d0>)
 8001256:	2204      	movs	r2, #4
 8001258:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800125a:	4b34      	ldr	r3, [pc, #208]	@ (800132c <HAL_SD_MspInit+0x1d0>)
 800125c:	2203      	movs	r2, #3
 800125e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001260:	4b32      	ldr	r3, [pc, #200]	@ (800132c <HAL_SD_MspInit+0x1d0>)
 8001262:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001266:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001268:	4b30      	ldr	r3, [pc, #192]	@ (800132c <HAL_SD_MspInit+0x1d0>)
 800126a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800126e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001270:	482e      	ldr	r0, [pc, #184]	@ (800132c <HAL_SD_MspInit+0x1d0>)
 8001272:	f000 fc41 	bl	8001af8 <HAL_DMA_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 800127c:	f7ff ff48 	bl	8001110 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a2a      	ldr	r2, [pc, #168]	@ (800132c <HAL_SD_MspInit+0x1d0>)
 8001284:	641a      	str	r2, [r3, #64]	@ 0x40
 8001286:	4a29      	ldr	r2, [pc, #164]	@ (800132c <HAL_SD_MspInit+0x1d0>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800128c:	4b29      	ldr	r3, [pc, #164]	@ (8001334 <HAL_SD_MspInit+0x1d8>)
 800128e:	4a2a      	ldr	r2, [pc, #168]	@ (8001338 <HAL_SD_MspInit+0x1dc>)
 8001290:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001292:	4b28      	ldr	r3, [pc, #160]	@ (8001334 <HAL_SD_MspInit+0x1d8>)
 8001294:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001298:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800129a:	4b26      	ldr	r3, [pc, #152]	@ (8001334 <HAL_SD_MspInit+0x1d8>)
 800129c:	2240      	movs	r2, #64	@ 0x40
 800129e:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a0:	4b24      	ldr	r3, [pc, #144]	@ (8001334 <HAL_SD_MspInit+0x1d8>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012a6:	4b23      	ldr	r3, [pc, #140]	@ (8001334 <HAL_SD_MspInit+0x1d8>)
 80012a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012ac:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012ae:	4b21      	ldr	r3, [pc, #132]	@ (8001334 <HAL_SD_MspInit+0x1d8>)
 80012b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012b4:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001334 <HAL_SD_MspInit+0x1d8>)
 80012b8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012bc:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80012be:	4b1d      	ldr	r3, [pc, #116]	@ (8001334 <HAL_SD_MspInit+0x1d8>)
 80012c0:	2220      	movs	r2, #32
 80012c2:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <HAL_SD_MspInit+0x1d8>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80012ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <HAL_SD_MspInit+0x1d8>)
 80012cc:	2204      	movs	r2, #4
 80012ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80012d0:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <HAL_SD_MspInit+0x1d8>)
 80012d2:	2203      	movs	r2, #3
 80012d4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80012d6:	4b17      	ldr	r3, [pc, #92]	@ (8001334 <HAL_SD_MspInit+0x1d8>)
 80012d8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80012dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80012de:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <HAL_SD_MspInit+0x1d8>)
 80012e0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80012e4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80012e6:	4813      	ldr	r0, [pc, #76]	@ (8001334 <HAL_SD_MspInit+0x1d8>)
 80012e8:	f000 fc06 	bl	8001af8 <HAL_DMA_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 80012f2:	f7ff ff0d 	bl	8001110 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001334 <HAL_SD_MspInit+0x1d8>)
 80012fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001334 <HAL_SD_MspInit+0x1d8>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	2031      	movs	r0, #49	@ 0x31
 8001308:	f000 fbbf 	bl	8001a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800130c:	2031      	movs	r0, #49	@ 0x31
 800130e:	f000 fbd8 	bl	8001ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001312:	bf00      	nop
 8001314:	3728      	adds	r7, #40	@ 0x28
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40012c00 	.word	0x40012c00
 8001320:	40023800 	.word	0x40023800
 8001324:	40020000 	.word	0x40020000
 8001328:	40020400 	.word	0x40020400
 800132c:	20010630 	.word	0x20010630
 8001330:	40026458 	.word	0x40026458
 8001334:	20010690 	.word	0x20010690
 8001338:	400264a0 	.word	0x400264a0

0800133c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001340:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <MX_SPI1_Init+0x64>)
 8001342:	4a18      	ldr	r2, [pc, #96]	@ (80013a4 <MX_SPI1_Init+0x68>)
 8001344:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001346:	4b16      	ldr	r3, [pc, #88]	@ (80013a0 <MX_SPI1_Init+0x64>)
 8001348:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800134c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800134e:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <MX_SPI1_Init+0x64>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001354:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <MX_SPI1_Init+0x64>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800135a:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <MX_SPI1_Init+0x64>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001360:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <MX_SPI1_Init+0x64>)
 8001362:	2200      	movs	r2, #0
 8001364:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001366:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <MX_SPI1_Init+0x64>)
 8001368:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800136c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800136e:	4b0c      	ldr	r3, [pc, #48]	@ (80013a0 <MX_SPI1_Init+0x64>)
 8001370:	2220      	movs	r2, #32
 8001372:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001374:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <MX_SPI1_Init+0x64>)
 8001376:	2200      	movs	r2, #0
 8001378:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800137a:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <MX_SPI1_Init+0x64>)
 800137c:	2200      	movs	r2, #0
 800137e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001380:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <MX_SPI1_Init+0x64>)
 8001382:	2200      	movs	r2, #0
 8001384:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001386:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <MX_SPI1_Init+0x64>)
 8001388:	220a      	movs	r2, #10
 800138a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800138c:	4804      	ldr	r0, [pc, #16]	@ (80013a0 <MX_SPI1_Init+0x64>)
 800138e:	f002 fe8f 	bl	80040b0 <HAL_SPI_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001398:	f7ff feba 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200106f0 	.word	0x200106f0
 80013a4:	40013000 	.word	0x40013000

080013a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	@ 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a28      	ldr	r2, [pc, #160]	@ (8001468 <HAL_SPI_MspInit+0xc0>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d149      	bne.n	800145e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b27      	ldr	r3, [pc, #156]	@ (800146c <HAL_SPI_MspInit+0xc4>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d2:	4a26      	ldr	r2, [pc, #152]	@ (800146c <HAL_SPI_MspInit+0xc4>)
 80013d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013da:	4b24      	ldr	r3, [pc, #144]	@ (800146c <HAL_SPI_MspInit+0xc4>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	4b20      	ldr	r3, [pc, #128]	@ (800146c <HAL_SPI_MspInit+0xc4>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	4a1f      	ldr	r2, [pc, #124]	@ (800146c <HAL_SPI_MspInit+0xc4>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f6:	4b1d      	ldr	r3, [pc, #116]	@ (800146c <HAL_SPI_MspInit+0xc4>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b19      	ldr	r3, [pc, #100]	@ (800146c <HAL_SPI_MspInit+0xc4>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	4a18      	ldr	r2, [pc, #96]	@ (800146c <HAL_SPI_MspInit+0xc4>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	6313      	str	r3, [r2, #48]	@ 0x30
 8001412:	4b16      	ldr	r3, [pc, #88]	@ (800146c <HAL_SPI_MspInit+0xc4>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800141e:	23a0      	movs	r3, #160	@ 0xa0
 8001420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142a:	2303      	movs	r3, #3
 800142c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800142e:	2305      	movs	r3, #5
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	480d      	ldr	r0, [pc, #52]	@ (8001470 <HAL_SPI_MspInit+0xc8>)
 800143a:	f000 fefb 	bl	8002234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800143e:	2310      	movs	r3, #16
 8001440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800144e:	2305      	movs	r3, #5
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	4806      	ldr	r0, [pc, #24]	@ (8001474 <HAL_SPI_MspInit+0xcc>)
 800145a:	f000 feeb 	bl	8002234 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800145e:	bf00      	nop
 8001460:	3728      	adds	r7, #40	@ 0x28
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40013000 	.word	0x40013000
 800146c:	40023800 	.word	0x40023800
 8001470:	40020000 	.word	0x40020000
 8001474:	40020400 	.word	0x40020400

08001478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <HAL_MspInit+0x4c>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001486:	4a0f      	ldr	r2, [pc, #60]	@ (80014c4 <HAL_MspInit+0x4c>)
 8001488:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800148c:	6453      	str	r3, [r2, #68]	@ 0x44
 800148e:	4b0d      	ldr	r3, [pc, #52]	@ (80014c4 <HAL_MspInit+0x4c>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001492:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <HAL_MspInit+0x4c>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	4a08      	ldr	r2, [pc, #32]	@ (80014c4 <HAL_MspInit+0x4c>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_MspInit+0x4c>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800

080014c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <NMI_Handler+0x4>

080014d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <HardFault_Handler+0x4>

080014d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <MemManage_Handler+0x4>

080014e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <BusFault_Handler+0x4>

080014e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <UsageFault_Handler+0x4>

080014f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800151e:	f000 f995 	bl	800184c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800152c:	4802      	ldr	r0, [pc, #8]	@ (8001538 <SDIO_IRQHandler+0x10>)
 800152e:	f001 ff07 	bl	8003340 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200105ac 	.word	0x200105ac

0800153c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001540:	4802      	ldr	r0, [pc, #8]	@ (800154c <DMA2_Stream2_IRQHandler+0x10>)
 8001542:	f000 fc01 	bl	8001d48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20010794 	.word	0x20010794

08001550 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001554:	4802      	ldr	r0, [pc, #8]	@ (8001560 <DMA2_Stream3_IRQHandler+0x10>)
 8001556:	f000 fbf7 	bl	8001d48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20010630 	.word	0x20010630

08001564 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001568:	4802      	ldr	r0, [pc, #8]	@ (8001574 <DMA2_Stream6_IRQHandler+0x10>)
 800156a:	f000 fbed 	bl	8001d48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20010690 	.word	0x20010690

08001578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001580:	4a14      	ldr	r2, [pc, #80]	@ (80015d4 <_sbrk+0x5c>)
 8001582:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <_sbrk+0x60>)
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800158c:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <_sbrk+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001594:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <_sbrk+0x64>)
 8001596:	4a12      	ldr	r2, [pc, #72]	@ (80015e0 <_sbrk+0x68>)
 8001598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800159a:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <_sbrk+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d207      	bcs.n	80015b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a8:	f008 fa12 	bl	80099d0 <__errno>
 80015ac:	4603      	mov	r3, r0
 80015ae:	220c      	movs	r2, #12
 80015b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	e009      	b.n	80015cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b8:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015be:	4b07      	ldr	r3, [pc, #28]	@ (80015dc <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	4a05      	ldr	r2, [pc, #20]	@ (80015dc <_sbrk+0x64>)
 80015c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ca:	68fb      	ldr	r3, [r7, #12]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20020000 	.word	0x20020000
 80015d8:	00000400 	.word	0x00000400
 80015dc:	20010748 	.word	0x20010748
 80015e0:	20010fe8 	.word	0x20010fe8

080015e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <SystemInit+0x20>)
 80015ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015ee:	4a05      	ldr	r2, [pc, #20]	@ (8001604 <SystemInit+0x20>)
 80015f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800160c:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <MX_USART1_UART_Init+0x4c>)
 800160e:	4a12      	ldr	r2, [pc, #72]	@ (8001658 <MX_USART1_UART_Init+0x50>)
 8001610:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001612:	4b10      	ldr	r3, [pc, #64]	@ (8001654 <MX_USART1_UART_Init+0x4c>)
 8001614:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001618:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800161a:	4b0e      	ldr	r3, [pc, #56]	@ (8001654 <MX_USART1_UART_Init+0x4c>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001620:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <MX_USART1_UART_Init+0x4c>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001626:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <MX_USART1_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800162c:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <MX_USART1_UART_Init+0x4c>)
 800162e:	220c      	movs	r2, #12
 8001630:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001632:	4b08      	ldr	r3, [pc, #32]	@ (8001654 <MX_USART1_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001638:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <MX_USART1_UART_Init+0x4c>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800163e:	4805      	ldr	r0, [pc, #20]	@ (8001654 <MX_USART1_UART_Init+0x4c>)
 8001640:	f003 fb0c 	bl	8004c5c <HAL_UART_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800164a:	f7ff fd61 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2001074c 	.word	0x2001074c
 8001658:	40011000 	.word	0x40011000

0800165c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	@ 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a31      	ldr	r2, [pc, #196]	@ (8001740 <HAL_UART_MspInit+0xe4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d15b      	bne.n	8001736 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	4b30      	ldr	r3, [pc, #192]	@ (8001744 <HAL_UART_MspInit+0xe8>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001686:	4a2f      	ldr	r2, [pc, #188]	@ (8001744 <HAL_UART_MspInit+0xe8>)
 8001688:	f043 0310 	orr.w	r3, r3, #16
 800168c:	6453      	str	r3, [r2, #68]	@ 0x44
 800168e:	4b2d      	ldr	r3, [pc, #180]	@ (8001744 <HAL_UART_MspInit+0xe8>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001692:	f003 0310 	and.w	r3, r3, #16
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b29      	ldr	r3, [pc, #164]	@ (8001744 <HAL_UART_MspInit+0xe8>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	4a28      	ldr	r2, [pc, #160]	@ (8001744 <HAL_UART_MspInit+0xe8>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016aa:	4b26      	ldr	r3, [pc, #152]	@ (8001744 <HAL_UART_MspInit+0xe8>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80016b6:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 80016ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c4:	2303      	movs	r3, #3
 80016c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016c8:	2307      	movs	r3, #7
 80016ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	4619      	mov	r1, r3
 80016d2:	481d      	ldr	r0, [pc, #116]	@ (8001748 <HAL_UART_MspInit+0xec>)
 80016d4:	f000 fdae 	bl	8002234 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80016d8:	4b1c      	ldr	r3, [pc, #112]	@ (800174c <HAL_UART_MspInit+0xf0>)
 80016da:	4a1d      	ldr	r2, [pc, #116]	@ (8001750 <HAL_UART_MspInit+0xf4>)
 80016dc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80016de:	4b1b      	ldr	r3, [pc, #108]	@ (800174c <HAL_UART_MspInit+0xf0>)
 80016e0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80016e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016e6:	4b19      	ldr	r3, [pc, #100]	@ (800174c <HAL_UART_MspInit+0xf0>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ec:	4b17      	ldr	r3, [pc, #92]	@ (800174c <HAL_UART_MspInit+0xf0>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016f2:	4b16      	ldr	r3, [pc, #88]	@ (800174c <HAL_UART_MspInit+0xf0>)
 80016f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016f8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016fa:	4b14      	ldr	r3, [pc, #80]	@ (800174c <HAL_UART_MspInit+0xf0>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001700:	4b12      	ldr	r3, [pc, #72]	@ (800174c <HAL_UART_MspInit+0xf0>)
 8001702:	2200      	movs	r2, #0
 8001704:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001706:	4b11      	ldr	r3, [pc, #68]	@ (800174c <HAL_UART_MspInit+0xf0>)
 8001708:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800170c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800170e:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <HAL_UART_MspInit+0xf0>)
 8001710:	2200      	movs	r2, #0
 8001712:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001714:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <HAL_UART_MspInit+0xf0>)
 8001716:	2200      	movs	r2, #0
 8001718:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800171a:	480c      	ldr	r0, [pc, #48]	@ (800174c <HAL_UART_MspInit+0xf0>)
 800171c:	f000 f9ec 	bl	8001af8 <HAL_DMA_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001726:	f7ff fcf3 	bl	8001110 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a07      	ldr	r2, [pc, #28]	@ (800174c <HAL_UART_MspInit+0xf0>)
 800172e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001730:	4a06      	ldr	r2, [pc, #24]	@ (800174c <HAL_UART_MspInit+0xf0>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001736:	bf00      	nop
 8001738:	3728      	adds	r7, #40	@ 0x28
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40011000 	.word	0x40011000
 8001744:	40023800 	.word	0x40023800
 8001748:	40020000 	.word	0x40020000
 800174c:	20010794 	.word	0x20010794
 8001750:	40026440 	.word	0x40026440

08001754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001754:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800178c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001758:	f7ff ff44 	bl	80015e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800175c:	480c      	ldr	r0, [pc, #48]	@ (8001790 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800175e:	490d      	ldr	r1, [pc, #52]	@ (8001794 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001760:	4a0d      	ldr	r2, [pc, #52]	@ (8001798 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001764:	e002      	b.n	800176c <LoopCopyDataInit>

08001766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176a:	3304      	adds	r3, #4

0800176c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800176c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001770:	d3f9      	bcc.n	8001766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001772:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001774:	4c0a      	ldr	r4, [pc, #40]	@ (80017a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001778:	e001      	b.n	800177e <LoopFillZerobss>

0800177a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800177c:	3204      	adds	r2, #4

0800177e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001780:	d3fb      	bcc.n	800177a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001782:	f008 f92b 	bl	80099dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001786:	f7ff fc15 	bl	8000fb4 <main>
  bx  lr    
 800178a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800178c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001794:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001798:	0800a94c 	.word	0x0800a94c
  ldr r2, =_sbss
 800179c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80017a0:	20010fe8 	.word	0x20010fe8

080017a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017a4:	e7fe      	b.n	80017a4 <ADC_IRQHandler>
	...

080017a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017ac:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <HAL_Init+0x40>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0d      	ldr	r2, [pc, #52]	@ (80017e8 <HAL_Init+0x40>)
 80017b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017b8:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0a      	ldr	r2, [pc, #40]	@ (80017e8 <HAL_Init+0x40>)
 80017be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c4:	4b08      	ldr	r3, [pc, #32]	@ (80017e8 <HAL_Init+0x40>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a07      	ldr	r2, [pc, #28]	@ (80017e8 <HAL_Init+0x40>)
 80017ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d0:	2003      	movs	r0, #3
 80017d2:	f000 f94f 	bl	8001a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017d6:	200f      	movs	r0, #15
 80017d8:	f000 f808 	bl	80017ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017dc:	f7ff fe4c 	bl	8001478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023c00 	.word	0x40023c00

080017ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017f4:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <HAL_InitTick+0x54>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b12      	ldr	r3, [pc, #72]	@ (8001844 <HAL_InitTick+0x58>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4619      	mov	r1, r3
 80017fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001802:	fbb3 f3f1 	udiv	r3, r3, r1
 8001806:	fbb2 f3f3 	udiv	r3, r2, r3
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f967 	bl	8001ade <HAL_SYSTICK_Config>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e00e      	b.n	8001838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b0f      	cmp	r3, #15
 800181e:	d80a      	bhi.n	8001836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001820:	2200      	movs	r2, #0
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	f04f 30ff 	mov.w	r0, #4294967295
 8001828:	f000 f92f 	bl	8001a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800182c:	4a06      	ldr	r2, [pc, #24]	@ (8001848 <HAL_InitTick+0x5c>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	e000      	b.n	8001838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000004 	.word	0x20000004
 8001844:	2000000c 	.word	0x2000000c
 8001848:	20000008 	.word	0x20000008

0800184c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001850:	4b06      	ldr	r3, [pc, #24]	@ (800186c <HAL_IncTick+0x20>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <HAL_IncTick+0x24>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4413      	add	r3, r2
 800185c:	4a04      	ldr	r2, [pc, #16]	@ (8001870 <HAL_IncTick+0x24>)
 800185e:	6013      	str	r3, [r2, #0]
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	2000000c 	.word	0x2000000c
 8001870:	200107f4 	.word	0x200107f4

08001874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return uwTick;
 8001878:	4b03      	ldr	r3, [pc, #12]	@ (8001888 <HAL_GetTick+0x14>)
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	200107f4 	.word	0x200107f4

0800188c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001894:	f7ff ffee 	bl	8001874 <HAL_GetTick>
 8001898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a4:	d005      	beq.n	80018b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018a6:	4b0a      	ldr	r3, [pc, #40]	@ (80018d0 <HAL_Delay+0x44>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4413      	add	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018b2:	bf00      	nop
 80018b4:	f7ff ffde 	bl	8001874 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d8f7      	bhi.n	80018b4 <HAL_Delay+0x28>
  {
  }
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	2000000c 	.word	0x2000000c

080018d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018f0:	4013      	ands	r3, r2
 80018f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001906:	4a04      	ldr	r2, [pc, #16]	@ (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	60d3      	str	r3, [r2, #12]
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001920:	4b04      	ldr	r3, [pc, #16]	@ (8001934 <__NVIC_GetPriorityGrouping+0x18>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	f003 0307 	and.w	r3, r3, #7
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	2b00      	cmp	r3, #0
 8001948:	db0b      	blt.n	8001962 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	f003 021f 	and.w	r2, r3, #31
 8001950:	4907      	ldr	r1, [pc, #28]	@ (8001970 <__NVIC_EnableIRQ+0x38>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	095b      	lsrs	r3, r3, #5
 8001958:	2001      	movs	r0, #1
 800195a:	fa00 f202 	lsl.w	r2, r0, r2
 800195e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000e100 	.word	0xe000e100

08001974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	2b00      	cmp	r3, #0
 8001986:	db0a      	blt.n	800199e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	490c      	ldr	r1, [pc, #48]	@ (80019c0 <__NVIC_SetPriority+0x4c>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	0112      	lsls	r2, r2, #4
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	440b      	add	r3, r1
 8001998:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800199c:	e00a      	b.n	80019b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4908      	ldr	r1, [pc, #32]	@ (80019c4 <__NVIC_SetPriority+0x50>)
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	3b04      	subs	r3, #4
 80019ac:	0112      	lsls	r2, r2, #4
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	440b      	add	r3, r1
 80019b2:	761a      	strb	r2, [r3, #24]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000e100 	.word	0xe000e100
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b089      	sub	sp, #36	@ 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f1c3 0307 	rsb	r3, r3, #7
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	bf28      	it	cs
 80019e6:	2304      	movcs	r3, #4
 80019e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3304      	adds	r3, #4
 80019ee:	2b06      	cmp	r3, #6
 80019f0:	d902      	bls.n	80019f8 <NVIC_EncodePriority+0x30>
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3b03      	subs	r3, #3
 80019f6:	e000      	b.n	80019fa <NVIC_EncodePriority+0x32>
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43da      	mvns	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a10:	f04f 31ff 	mov.w	r1, #4294967295
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1a:	43d9      	mvns	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	4313      	orrs	r3, r2
         );
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3724      	adds	r7, #36	@ 0x24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
	...

08001a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a40:	d301      	bcc.n	8001a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a42:	2301      	movs	r3, #1
 8001a44:	e00f      	b.n	8001a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a46:	4a0a      	ldr	r2, [pc, #40]	@ (8001a70 <SysTick_Config+0x40>)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a4e:	210f      	movs	r1, #15
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295
 8001a54:	f7ff ff8e 	bl	8001974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a58:	4b05      	ldr	r3, [pc, #20]	@ (8001a70 <SysTick_Config+0x40>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a5e:	4b04      	ldr	r3, [pc, #16]	@ (8001a70 <SysTick_Config+0x40>)
 8001a60:	2207      	movs	r2, #7
 8001a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	e000e010 	.word	0xe000e010

08001a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff ff29 	bl	80018d4 <__NVIC_SetPriorityGrouping>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	4603      	mov	r3, r0
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
 8001a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a9c:	f7ff ff3e 	bl	800191c <__NVIC_GetPriorityGrouping>
 8001aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	68b9      	ldr	r1, [r7, #8]
 8001aa6:	6978      	ldr	r0, [r7, #20]
 8001aa8:	f7ff ff8e 	bl	80019c8 <NVIC_EncodePriority>
 8001aac:	4602      	mov	r2, r0
 8001aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff5d 	bl	8001974 <__NVIC_SetPriority>
}
 8001aba:	bf00      	nop
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	4603      	mov	r3, r0
 8001aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff31 	bl	8001938 <__NVIC_EnableIRQ>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff ffa2 	bl	8001a30 <SysTick_Config>
 8001aec:	4603      	mov	r3, r0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b04:	f7ff feb6 	bl	8001874 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e099      	b.n	8001c48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2202      	movs	r2, #2
 8001b18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0201 	bic.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b34:	e00f      	b.n	8001b56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b36:	f7ff fe9d 	bl	8001874 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b05      	cmp	r3, #5
 8001b42:	d908      	bls.n	8001b56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2220      	movs	r2, #32
 8001b48:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e078      	b.n	8001c48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1e8      	bne.n	8001b36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	4b38      	ldr	r3, [pc, #224]	@ (8001c50 <HAL_DMA_Init+0x158>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d107      	bne.n	8001bc0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f023 0307 	bic.w	r3, r3, #7
 8001bd6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d117      	bne.n	8001c1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d00e      	beq.n	8001c1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 fa9d 	bl	800213c <DMA_CheckFifoParam>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d008      	beq.n	8001c1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2240      	movs	r2, #64	@ 0x40
 8001c0c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001c16:	2301      	movs	r3, #1
 8001c18:	e016      	b.n	8001c48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 fa54 	bl	80020d0 <DMA_CalcBaseAndBitshift>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c30:	223f      	movs	r2, #63	@ 0x3f
 8001c32:	409a      	lsls	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	f010803f 	.word	0xf010803f

08001c54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
 8001c60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d101      	bne.n	8001c7a <HAL_DMA_Start_IT+0x26>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e040      	b.n	8001cfc <HAL_DMA_Start_IT+0xa8>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d12f      	bne.n	8001cee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2202      	movs	r2, #2
 8001c92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	68b9      	ldr	r1, [r7, #8]
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f000 f9e6 	bl	8002074 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cac:	223f      	movs	r2, #63	@ 0x3f
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0216 	orr.w	r2, r2, #22
 8001cc2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d007      	beq.n	8001cdc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0208 	orr.w	r2, r2, #8
 8001cda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0201 	orr.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	e005      	b.n	8001cfa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d004      	beq.n	8001d22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2280      	movs	r2, #128	@ 0x80
 8001d1c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00c      	b.n	8001d3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2205      	movs	r2, #5
 8001d26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0201 	bic.w	r2, r2, #1
 8001d38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d54:	4b8e      	ldr	r3, [pc, #568]	@ (8001f90 <HAL_DMA_IRQHandler+0x248>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a8e      	ldr	r2, [pc, #568]	@ (8001f94 <HAL_DMA_IRQHandler+0x24c>)
 8001d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5e:	0a9b      	lsrs	r3, r3, #10
 8001d60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d72:	2208      	movs	r2, #8
 8001d74:	409a      	lsls	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d01a      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d013      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0204 	bic.w	r2, r2, #4
 8001d9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da0:	2208      	movs	r2, #8
 8001da2:	409a      	lsls	r2, r3
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dac:	f043 0201 	orr.w	r2, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db8:	2201      	movs	r2, #1
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d012      	beq.n	8001dea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00b      	beq.n	8001dea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de2:	f043 0202 	orr.w	r2, r3, #2
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dee:	2204      	movs	r2, #4
 8001df0:	409a      	lsls	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4013      	ands	r3, r2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d012      	beq.n	8001e20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00b      	beq.n	8001e20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e18:	f043 0204 	orr.w	r2, r3, #4
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e24:	2210      	movs	r2, #16
 8001e26:	409a      	lsls	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d043      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d03c      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e42:	2210      	movs	r2, #16
 8001e44:	409a      	lsls	r2, r3
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d018      	beq.n	8001e8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d108      	bne.n	8001e78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d024      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	4798      	blx	r3
 8001e76:	e01f      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d01b      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	4798      	blx	r3
 8001e88:	e016      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d107      	bne.n	8001ea8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0208 	bic.w	r2, r2, #8
 8001ea6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 808f 	beq.w	8001fe8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 8087 	beq.w	8001fe8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ede:	2220      	movs	r2, #32
 8001ee0:	409a      	lsls	r2, r3
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b05      	cmp	r3, #5
 8001ef0:	d136      	bne.n	8001f60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 0216 	bic.w	r2, r2, #22
 8001f00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	695a      	ldr	r2, [r3, #20]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d103      	bne.n	8001f22 <HAL_DMA_IRQHandler+0x1da>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d007      	beq.n	8001f32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0208 	bic.w	r2, r2, #8
 8001f30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f36:	223f      	movs	r2, #63	@ 0x3f
 8001f38:	409a      	lsls	r2, r3
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d07e      	beq.n	8002054 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	4798      	blx	r3
        }
        return;
 8001f5e:	e079      	b.n	8002054 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d01d      	beq.n	8001faa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10d      	bne.n	8001f98 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d031      	beq.n	8001fe8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	4798      	blx	r3
 8001f8c:	e02c      	b.n	8001fe8 <HAL_DMA_IRQHandler+0x2a0>
 8001f8e:	bf00      	nop
 8001f90:	20000004 	.word	0x20000004
 8001f94:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d023      	beq.n	8001fe8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	4798      	blx	r3
 8001fa8:	e01e      	b.n	8001fe8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10f      	bne.n	8001fd8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0210 	bic.w	r2, r2, #16
 8001fc6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d032      	beq.n	8002056 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d022      	beq.n	8002042 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2205      	movs	r2, #5
 8002000:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0201 	bic.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	3301      	adds	r3, #1
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	429a      	cmp	r2, r3
 800201e:	d307      	bcc.n	8002030 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f2      	bne.n	8002014 <HAL_DMA_IRQHandler+0x2cc>
 800202e:	e000      	b.n	8002032 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002030:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002046:	2b00      	cmp	r3, #0
 8002048:	d005      	beq.n	8002056 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	4798      	blx	r3
 8002052:	e000      	b.n	8002056 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002054:	bf00      	nop
    }
  }
}
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
 8002080:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002090:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	2b40      	cmp	r3, #64	@ 0x40
 80020a0:	d108      	bne.n	80020b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020b2:	e007      	b.n	80020c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	60da      	str	r2, [r3, #12]
}
 80020c4:	bf00      	nop
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	3b10      	subs	r3, #16
 80020e0:	4a14      	ldr	r2, [pc, #80]	@ (8002134 <DMA_CalcBaseAndBitshift+0x64>)
 80020e2:	fba2 2303 	umull	r2, r3, r2, r3
 80020e6:	091b      	lsrs	r3, r3, #4
 80020e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020ea:	4a13      	ldr	r2, [pc, #76]	@ (8002138 <DMA_CalcBaseAndBitshift+0x68>)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4413      	add	r3, r2
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d909      	bls.n	8002112 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002106:	f023 0303 	bic.w	r3, r3, #3
 800210a:	1d1a      	adds	r2, r3, #4
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002110:	e007      	b.n	8002122 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800211a:	f023 0303 	bic.w	r3, r3, #3
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002126:	4618      	mov	r0, r3
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	aaaaaaab 	.word	0xaaaaaaab
 8002138:	0800a4ac 	.word	0x0800a4ac

0800213c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d11f      	bne.n	8002196 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	2b03      	cmp	r3, #3
 800215a:	d856      	bhi.n	800220a <DMA_CheckFifoParam+0xce>
 800215c:	a201      	add	r2, pc, #4	@ (adr r2, 8002164 <DMA_CheckFifoParam+0x28>)
 800215e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002162:	bf00      	nop
 8002164:	08002175 	.word	0x08002175
 8002168:	08002187 	.word	0x08002187
 800216c:	08002175 	.word	0x08002175
 8002170:	0800220b 	.word	0x0800220b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002178:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d046      	beq.n	800220e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002184:	e043      	b.n	800220e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800218a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800218e:	d140      	bne.n	8002212 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002194:	e03d      	b.n	8002212 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800219e:	d121      	bne.n	80021e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d837      	bhi.n	8002216 <DMA_CheckFifoParam+0xda>
 80021a6:	a201      	add	r2, pc, #4	@ (adr r2, 80021ac <DMA_CheckFifoParam+0x70>)
 80021a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ac:	080021bd 	.word	0x080021bd
 80021b0:	080021c3 	.word	0x080021c3
 80021b4:	080021bd 	.word	0x080021bd
 80021b8:	080021d5 	.word	0x080021d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
      break;
 80021c0:	e030      	b.n	8002224 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d025      	beq.n	800221a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021d2:	e022      	b.n	800221a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021dc:	d11f      	bne.n	800221e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021e2:	e01c      	b.n	800221e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d903      	bls.n	80021f2 <DMA_CheckFifoParam+0xb6>
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d003      	beq.n	80021f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021f0:	e018      	b.n	8002224 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	73fb      	strb	r3, [r7, #15]
      break;
 80021f6:	e015      	b.n	8002224 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00e      	beq.n	8002222 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
      break;
 8002208:	e00b      	b.n	8002222 <DMA_CheckFifoParam+0xe6>
      break;
 800220a:	bf00      	nop
 800220c:	e00a      	b.n	8002224 <DMA_CheckFifoParam+0xe8>
      break;
 800220e:	bf00      	nop
 8002210:	e008      	b.n	8002224 <DMA_CheckFifoParam+0xe8>
      break;
 8002212:	bf00      	nop
 8002214:	e006      	b.n	8002224 <DMA_CheckFifoParam+0xe8>
      break;
 8002216:	bf00      	nop
 8002218:	e004      	b.n	8002224 <DMA_CheckFifoParam+0xe8>
      break;
 800221a:	bf00      	nop
 800221c:	e002      	b.n	8002224 <DMA_CheckFifoParam+0xe8>
      break;   
 800221e:	bf00      	nop
 8002220:	e000      	b.n	8002224 <DMA_CheckFifoParam+0xe8>
      break;
 8002222:	bf00      	nop
    }
  } 
  
  return status; 
 8002224:	7bfb      	ldrb	r3, [r7, #15]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop

08002234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002234:	b480      	push	{r7}
 8002236:	b089      	sub	sp, #36	@ 0x24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002246:	2300      	movs	r3, #0
 8002248:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	e159      	b.n	8002504 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002250:	2201      	movs	r2, #1
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	4013      	ands	r3, r2
 8002262:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	429a      	cmp	r2, r3
 800226a:	f040 8148 	bne.w	80024fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	2b01      	cmp	r3, #1
 8002278:	d005      	beq.n	8002286 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002282:	2b02      	cmp	r3, #2
 8002284:	d130      	bne.n	80022e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	2203      	movs	r2, #3
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022bc:	2201      	movs	r2, #1
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f003 0201 	and.w	r2, r3, #1
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b03      	cmp	r3, #3
 80022f2:	d017      	beq.n	8002324 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	2203      	movs	r2, #3
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d123      	bne.n	8002378 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	08da      	lsrs	r2, r3, #3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3208      	adds	r2, #8
 8002338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	220f      	movs	r2, #15
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	691a      	ldr	r2, [r3, #16]
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	08da      	lsrs	r2, r3, #3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3208      	adds	r2, #8
 8002372:	69b9      	ldr	r1, [r7, #24]
 8002374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	2203      	movs	r2, #3
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0203 	and.w	r2, r3, #3
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 80a2 	beq.w	80024fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	4b57      	ldr	r3, [pc, #348]	@ (800251c <HAL_GPIO_Init+0x2e8>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c2:	4a56      	ldr	r2, [pc, #344]	@ (800251c <HAL_GPIO_Init+0x2e8>)
 80023c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ca:	4b54      	ldr	r3, [pc, #336]	@ (800251c <HAL_GPIO_Init+0x2e8>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023d6:	4a52      	ldr	r2, [pc, #328]	@ (8002520 <HAL_GPIO_Init+0x2ec>)
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	089b      	lsrs	r3, r3, #2
 80023dc:	3302      	adds	r3, #2
 80023de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	220f      	movs	r2, #15
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4013      	ands	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a49      	ldr	r2, [pc, #292]	@ (8002524 <HAL_GPIO_Init+0x2f0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d019      	beq.n	8002436 <HAL_GPIO_Init+0x202>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a48      	ldr	r2, [pc, #288]	@ (8002528 <HAL_GPIO_Init+0x2f4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d013      	beq.n	8002432 <HAL_GPIO_Init+0x1fe>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a47      	ldr	r2, [pc, #284]	@ (800252c <HAL_GPIO_Init+0x2f8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00d      	beq.n	800242e <HAL_GPIO_Init+0x1fa>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a46      	ldr	r2, [pc, #280]	@ (8002530 <HAL_GPIO_Init+0x2fc>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d007      	beq.n	800242a <HAL_GPIO_Init+0x1f6>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a45      	ldr	r2, [pc, #276]	@ (8002534 <HAL_GPIO_Init+0x300>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d101      	bne.n	8002426 <HAL_GPIO_Init+0x1f2>
 8002422:	2304      	movs	r3, #4
 8002424:	e008      	b.n	8002438 <HAL_GPIO_Init+0x204>
 8002426:	2307      	movs	r3, #7
 8002428:	e006      	b.n	8002438 <HAL_GPIO_Init+0x204>
 800242a:	2303      	movs	r3, #3
 800242c:	e004      	b.n	8002438 <HAL_GPIO_Init+0x204>
 800242e:	2302      	movs	r3, #2
 8002430:	e002      	b.n	8002438 <HAL_GPIO_Init+0x204>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <HAL_GPIO_Init+0x204>
 8002436:	2300      	movs	r3, #0
 8002438:	69fa      	ldr	r2, [r7, #28]
 800243a:	f002 0203 	and.w	r2, r2, #3
 800243e:	0092      	lsls	r2, r2, #2
 8002440:	4093      	lsls	r3, r2
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002448:	4935      	ldr	r1, [pc, #212]	@ (8002520 <HAL_GPIO_Init+0x2ec>)
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	089b      	lsrs	r3, r3, #2
 800244e:	3302      	adds	r3, #2
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002456:	4b38      	ldr	r3, [pc, #224]	@ (8002538 <HAL_GPIO_Init+0x304>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	43db      	mvns	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800247a:	4a2f      	ldr	r2, [pc, #188]	@ (8002538 <HAL_GPIO_Init+0x304>)
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002480:	4b2d      	ldr	r3, [pc, #180]	@ (8002538 <HAL_GPIO_Init+0x304>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024a4:	4a24      	ldr	r2, [pc, #144]	@ (8002538 <HAL_GPIO_Init+0x304>)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024aa:	4b23      	ldr	r3, [pc, #140]	@ (8002538 <HAL_GPIO_Init+0x304>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4013      	ands	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ce:	4a1a      	ldr	r2, [pc, #104]	@ (8002538 <HAL_GPIO_Init+0x304>)
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d4:	4b18      	ldr	r3, [pc, #96]	@ (8002538 <HAL_GPIO_Init+0x304>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024f8:	4a0f      	ldr	r2, [pc, #60]	@ (8002538 <HAL_GPIO_Init+0x304>)
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3301      	adds	r3, #1
 8002502:	61fb      	str	r3, [r7, #28]
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	2b0f      	cmp	r3, #15
 8002508:	f67f aea2 	bls.w	8002250 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800250c:	bf00      	nop
 800250e:	bf00      	nop
 8002510:	3724      	adds	r7, #36	@ 0x24
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800
 8002520:	40013800 	.word	0x40013800
 8002524:	40020000 	.word	0x40020000
 8002528:	40020400 	.word	0x40020400
 800252c:	40020800 	.word	0x40020800
 8002530:	40020c00 	.word	0x40020c00
 8002534:	40021000 	.word	0x40021000
 8002538:	40013c00 	.word	0x40013c00

0800253c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691a      	ldr	r2, [r3, #16]
 800254c:	887b      	ldrh	r3, [r7, #2]
 800254e:	4013      	ands	r3, r2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d002      	beq.n	800255a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
 8002558:	e001      	b.n	800255e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800255a:	2300      	movs	r3, #0
 800255c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800255e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	807b      	strh	r3, [r7, #2]
 8002578:	4613      	mov	r3, r2
 800257a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800257c:	787b      	ldrb	r3, [r7, #1]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002582:	887a      	ldrh	r2, [r7, #2]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002588:	e003      	b.n	8002592 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800258a:	887b      	ldrh	r3, [r7, #2]
 800258c:	041a      	lsls	r2, r3, #16
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	619a      	str	r2, [r3, #24]
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
	...

080025a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e267      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d075      	beq.n	80026aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025be:	4b88      	ldr	r3, [pc, #544]	@ (80027e0 <HAL_RCC_OscConfig+0x240>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d00c      	beq.n	80025e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ca:	4b85      	ldr	r3, [pc, #532]	@ (80027e0 <HAL_RCC_OscConfig+0x240>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d112      	bne.n	80025fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025d6:	4b82      	ldr	r3, [pc, #520]	@ (80027e0 <HAL_RCC_OscConfig+0x240>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025e2:	d10b      	bne.n	80025fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e4:	4b7e      	ldr	r3, [pc, #504]	@ (80027e0 <HAL_RCC_OscConfig+0x240>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d05b      	beq.n	80026a8 <HAL_RCC_OscConfig+0x108>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d157      	bne.n	80026a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e242      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002604:	d106      	bne.n	8002614 <HAL_RCC_OscConfig+0x74>
 8002606:	4b76      	ldr	r3, [pc, #472]	@ (80027e0 <HAL_RCC_OscConfig+0x240>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a75      	ldr	r2, [pc, #468]	@ (80027e0 <HAL_RCC_OscConfig+0x240>)
 800260c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	e01d      	b.n	8002650 <HAL_RCC_OscConfig+0xb0>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800261c:	d10c      	bne.n	8002638 <HAL_RCC_OscConfig+0x98>
 800261e:	4b70      	ldr	r3, [pc, #448]	@ (80027e0 <HAL_RCC_OscConfig+0x240>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a6f      	ldr	r2, [pc, #444]	@ (80027e0 <HAL_RCC_OscConfig+0x240>)
 8002624:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	4b6d      	ldr	r3, [pc, #436]	@ (80027e0 <HAL_RCC_OscConfig+0x240>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a6c      	ldr	r2, [pc, #432]	@ (80027e0 <HAL_RCC_OscConfig+0x240>)
 8002630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e00b      	b.n	8002650 <HAL_RCC_OscConfig+0xb0>
 8002638:	4b69      	ldr	r3, [pc, #420]	@ (80027e0 <HAL_RCC_OscConfig+0x240>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a68      	ldr	r2, [pc, #416]	@ (80027e0 <HAL_RCC_OscConfig+0x240>)
 800263e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	4b66      	ldr	r3, [pc, #408]	@ (80027e0 <HAL_RCC_OscConfig+0x240>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a65      	ldr	r2, [pc, #404]	@ (80027e0 <HAL_RCC_OscConfig+0x240>)
 800264a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800264e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d013      	beq.n	8002680 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7ff f90c 	bl	8001874 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002660:	f7ff f908 	bl	8001874 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b64      	cmp	r3, #100	@ 0x64
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e207      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002672:	4b5b      	ldr	r3, [pc, #364]	@ (80027e0 <HAL_RCC_OscConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f0      	beq.n	8002660 <HAL_RCC_OscConfig+0xc0>
 800267e:	e014      	b.n	80026aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002680:	f7ff f8f8 	bl	8001874 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002688:	f7ff f8f4 	bl	8001874 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b64      	cmp	r3, #100	@ 0x64
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e1f3      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269a:	4b51      	ldr	r3, [pc, #324]	@ (80027e0 <HAL_RCC_OscConfig+0x240>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0xe8>
 80026a6:	e000      	b.n	80026aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d063      	beq.n	800277e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026b6:	4b4a      	ldr	r3, [pc, #296]	@ (80027e0 <HAL_RCC_OscConfig+0x240>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 030c 	and.w	r3, r3, #12
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00b      	beq.n	80026da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026c2:	4b47      	ldr	r3, [pc, #284]	@ (80027e0 <HAL_RCC_OscConfig+0x240>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d11c      	bne.n	8002708 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ce:	4b44      	ldr	r3, [pc, #272]	@ (80027e0 <HAL_RCC_OscConfig+0x240>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d116      	bne.n	8002708 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026da:	4b41      	ldr	r3, [pc, #260]	@ (80027e0 <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d005      	beq.n	80026f2 <HAL_RCC_OscConfig+0x152>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d001      	beq.n	80026f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e1c7      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f2:	4b3b      	ldr	r3, [pc, #236]	@ (80027e0 <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4937      	ldr	r1, [pc, #220]	@ (80027e0 <HAL_RCC_OscConfig+0x240>)
 8002702:	4313      	orrs	r3, r2
 8002704:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002706:	e03a      	b.n	800277e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d020      	beq.n	8002752 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002710:	4b34      	ldr	r3, [pc, #208]	@ (80027e4 <HAL_RCC_OscConfig+0x244>)
 8002712:	2201      	movs	r2, #1
 8002714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002716:	f7ff f8ad 	bl	8001874 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800271e:	f7ff f8a9 	bl	8001874 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e1a8      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002730:	4b2b      	ldr	r3, [pc, #172]	@ (80027e0 <HAL_RCC_OscConfig+0x240>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273c:	4b28      	ldr	r3, [pc, #160]	@ (80027e0 <HAL_RCC_OscConfig+0x240>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4925      	ldr	r1, [pc, #148]	@ (80027e0 <HAL_RCC_OscConfig+0x240>)
 800274c:	4313      	orrs	r3, r2
 800274e:	600b      	str	r3, [r1, #0]
 8002750:	e015      	b.n	800277e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002752:	4b24      	ldr	r3, [pc, #144]	@ (80027e4 <HAL_RCC_OscConfig+0x244>)
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002758:	f7ff f88c 	bl	8001874 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002760:	f7ff f888 	bl	8001874 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e187      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002772:	4b1b      	ldr	r3, [pc, #108]	@ (80027e0 <HAL_RCC_OscConfig+0x240>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b00      	cmp	r3, #0
 8002788:	d036      	beq.n	80027f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d016      	beq.n	80027c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002792:	4b15      	ldr	r3, [pc, #84]	@ (80027e8 <HAL_RCC_OscConfig+0x248>)
 8002794:	2201      	movs	r2, #1
 8002796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002798:	f7ff f86c 	bl	8001874 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027a0:	f7ff f868 	bl	8001874 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e167      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b2:	4b0b      	ldr	r3, [pc, #44]	@ (80027e0 <HAL_RCC_OscConfig+0x240>)
 80027b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0x200>
 80027be:	e01b      	b.n	80027f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027c0:	4b09      	ldr	r3, [pc, #36]	@ (80027e8 <HAL_RCC_OscConfig+0x248>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c6:	f7ff f855 	bl	8001874 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027cc:	e00e      	b.n	80027ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ce:	f7ff f851 	bl	8001874 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d907      	bls.n	80027ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e150      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
 80027e0:	40023800 	.word	0x40023800
 80027e4:	42470000 	.word	0x42470000
 80027e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ec:	4b88      	ldr	r3, [pc, #544]	@ (8002a10 <HAL_RCC_OscConfig+0x470>)
 80027ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1ea      	bne.n	80027ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 8097 	beq.w	8002934 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002806:	2300      	movs	r3, #0
 8002808:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800280a:	4b81      	ldr	r3, [pc, #516]	@ (8002a10 <HAL_RCC_OscConfig+0x470>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10f      	bne.n	8002836 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	4b7d      	ldr	r3, [pc, #500]	@ (8002a10 <HAL_RCC_OscConfig+0x470>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281e:	4a7c      	ldr	r2, [pc, #496]	@ (8002a10 <HAL_RCC_OscConfig+0x470>)
 8002820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002824:	6413      	str	r3, [r2, #64]	@ 0x40
 8002826:	4b7a      	ldr	r3, [pc, #488]	@ (8002a10 <HAL_RCC_OscConfig+0x470>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002832:	2301      	movs	r3, #1
 8002834:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002836:	4b77      	ldr	r3, [pc, #476]	@ (8002a14 <HAL_RCC_OscConfig+0x474>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d118      	bne.n	8002874 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002842:	4b74      	ldr	r3, [pc, #464]	@ (8002a14 <HAL_RCC_OscConfig+0x474>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a73      	ldr	r2, [pc, #460]	@ (8002a14 <HAL_RCC_OscConfig+0x474>)
 8002848:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800284c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800284e:	f7ff f811 	bl	8001874 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002856:	f7ff f80d 	bl	8001874 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e10c      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002868:	4b6a      	ldr	r3, [pc, #424]	@ (8002a14 <HAL_RCC_OscConfig+0x474>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0f0      	beq.n	8002856 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d106      	bne.n	800288a <HAL_RCC_OscConfig+0x2ea>
 800287c:	4b64      	ldr	r3, [pc, #400]	@ (8002a10 <HAL_RCC_OscConfig+0x470>)
 800287e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002880:	4a63      	ldr	r2, [pc, #396]	@ (8002a10 <HAL_RCC_OscConfig+0x470>)
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	6713      	str	r3, [r2, #112]	@ 0x70
 8002888:	e01c      	b.n	80028c4 <HAL_RCC_OscConfig+0x324>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b05      	cmp	r3, #5
 8002890:	d10c      	bne.n	80028ac <HAL_RCC_OscConfig+0x30c>
 8002892:	4b5f      	ldr	r3, [pc, #380]	@ (8002a10 <HAL_RCC_OscConfig+0x470>)
 8002894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002896:	4a5e      	ldr	r2, [pc, #376]	@ (8002a10 <HAL_RCC_OscConfig+0x470>)
 8002898:	f043 0304 	orr.w	r3, r3, #4
 800289c:	6713      	str	r3, [r2, #112]	@ 0x70
 800289e:	4b5c      	ldr	r3, [pc, #368]	@ (8002a10 <HAL_RCC_OscConfig+0x470>)
 80028a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a2:	4a5b      	ldr	r2, [pc, #364]	@ (8002a10 <HAL_RCC_OscConfig+0x470>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80028aa:	e00b      	b.n	80028c4 <HAL_RCC_OscConfig+0x324>
 80028ac:	4b58      	ldr	r3, [pc, #352]	@ (8002a10 <HAL_RCC_OscConfig+0x470>)
 80028ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b0:	4a57      	ldr	r2, [pc, #348]	@ (8002a10 <HAL_RCC_OscConfig+0x470>)
 80028b2:	f023 0301 	bic.w	r3, r3, #1
 80028b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80028b8:	4b55      	ldr	r3, [pc, #340]	@ (8002a10 <HAL_RCC_OscConfig+0x470>)
 80028ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028bc:	4a54      	ldr	r2, [pc, #336]	@ (8002a10 <HAL_RCC_OscConfig+0x470>)
 80028be:	f023 0304 	bic.w	r3, r3, #4
 80028c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d015      	beq.n	80028f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028cc:	f7fe ffd2 	bl	8001874 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d2:	e00a      	b.n	80028ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d4:	f7fe ffce 	bl	8001874 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e0cb      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ea:	4b49      	ldr	r3, [pc, #292]	@ (8002a10 <HAL_RCC_OscConfig+0x470>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0ee      	beq.n	80028d4 <HAL_RCC_OscConfig+0x334>
 80028f6:	e014      	b.n	8002922 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f8:	f7fe ffbc 	bl	8001874 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fe:	e00a      	b.n	8002916 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002900:	f7fe ffb8 	bl	8001874 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800290e:	4293      	cmp	r3, r2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e0b5      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002916:	4b3e      	ldr	r3, [pc, #248]	@ (8002a10 <HAL_RCC_OscConfig+0x470>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1ee      	bne.n	8002900 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002922:	7dfb      	ldrb	r3, [r7, #23]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d105      	bne.n	8002934 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002928:	4b39      	ldr	r3, [pc, #228]	@ (8002a10 <HAL_RCC_OscConfig+0x470>)
 800292a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292c:	4a38      	ldr	r2, [pc, #224]	@ (8002a10 <HAL_RCC_OscConfig+0x470>)
 800292e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002932:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80a1 	beq.w	8002a80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800293e:	4b34      	ldr	r3, [pc, #208]	@ (8002a10 <HAL_RCC_OscConfig+0x470>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b08      	cmp	r3, #8
 8002948:	d05c      	beq.n	8002a04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d141      	bne.n	80029d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002952:	4b31      	ldr	r3, [pc, #196]	@ (8002a18 <HAL_RCC_OscConfig+0x478>)
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002958:	f7fe ff8c 	bl	8001874 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002960:	f7fe ff88 	bl	8001874 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e087      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002972:	4b27      	ldr	r3, [pc, #156]	@ (8002a10 <HAL_RCC_OscConfig+0x470>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69da      	ldr	r2, [r3, #28]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298c:	019b      	lsls	r3, r3, #6
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002994:	085b      	lsrs	r3, r3, #1
 8002996:	3b01      	subs	r3, #1
 8002998:	041b      	lsls	r3, r3, #16
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a0:	061b      	lsls	r3, r3, #24
 80029a2:	491b      	ldr	r1, [pc, #108]	@ (8002a10 <HAL_RCC_OscConfig+0x470>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a18 <HAL_RCC_OscConfig+0x478>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ae:	f7fe ff61 	bl	8001874 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b6:	f7fe ff5d 	bl	8001874 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e05c      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c8:	4b11      	ldr	r3, [pc, #68]	@ (8002a10 <HAL_RCC_OscConfig+0x470>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x416>
 80029d4:	e054      	b.n	8002a80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d6:	4b10      	ldr	r3, [pc, #64]	@ (8002a18 <HAL_RCC_OscConfig+0x478>)
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029dc:	f7fe ff4a 	bl	8001874 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e4:	f7fe ff46 	bl	8001874 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e045      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f6:	4b06      	ldr	r3, [pc, #24]	@ (8002a10 <HAL_RCC_OscConfig+0x470>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x444>
 8002a02:	e03d      	b.n	8002a80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d107      	bne.n	8002a1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e038      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
 8002a10:	40023800 	.word	0x40023800
 8002a14:	40007000 	.word	0x40007000
 8002a18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002a8c <HAL_RCC_OscConfig+0x4ec>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d028      	beq.n	8002a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d121      	bne.n	8002a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d11a      	bne.n	8002a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d111      	bne.n	8002a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a62:	085b      	lsrs	r3, r3, #1
 8002a64:	3b01      	subs	r3, #1
 8002a66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d107      	bne.n	8002a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40023800 	.word	0x40023800

08002a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0cc      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa4:	4b68      	ldr	r3, [pc, #416]	@ (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d90c      	bls.n	8002acc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab2:	4b65      	ldr	r3, [pc, #404]	@ (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b63      	ldr	r3, [pc, #396]	@ (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0b8      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d020      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae4:	4b59      	ldr	r3, [pc, #356]	@ (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4a58      	ldr	r2, [pc, #352]	@ (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002aee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002afc:	4b53      	ldr	r3, [pc, #332]	@ (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	4a52      	ldr	r2, [pc, #328]	@ (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b08:	4b50      	ldr	r3, [pc, #320]	@ (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	494d      	ldr	r1, [pc, #308]	@ (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d044      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d107      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2e:	4b47      	ldr	r3, [pc, #284]	@ (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d119      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e07f      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d003      	beq.n	8002b4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d107      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b4e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d109      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e06f      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e067      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b6e:	4b37      	ldr	r3, [pc, #220]	@ (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f023 0203 	bic.w	r2, r3, #3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	4934      	ldr	r1, [pc, #208]	@ (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b80:	f7fe fe78 	bl	8001874 <HAL_GetTick>
 8002b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b86:	e00a      	b.n	8002b9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b88:	f7fe fe74 	bl	8001874 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e04f      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9e:	4b2b      	ldr	r3, [pc, #172]	@ (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 020c 	and.w	r2, r3, #12
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d1eb      	bne.n	8002b88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb0:	4b25      	ldr	r3, [pc, #148]	@ (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d20c      	bcs.n	8002bd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bbe:	4b22      	ldr	r3, [pc, #136]	@ (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc6:	4b20      	ldr	r3, [pc, #128]	@ (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d001      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e032      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be4:	4b19      	ldr	r3, [pc, #100]	@ (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4916      	ldr	r1, [pc, #88]	@ (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d009      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c02:	4b12      	ldr	r3, [pc, #72]	@ (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	490e      	ldr	r1, [pc, #56]	@ (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c16:	f000 f821 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	091b      	lsrs	r3, r3, #4
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	490a      	ldr	r1, [pc, #40]	@ (8002c50 <HAL_RCC_ClockConfig+0x1c0>)
 8002c28:	5ccb      	ldrb	r3, [r1, r3]
 8002c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2e:	4a09      	ldr	r2, [pc, #36]	@ (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c32:	4b09      	ldr	r3, [pc, #36]	@ (8002c58 <HAL_RCC_ClockConfig+0x1c8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe fdd8 	bl	80017ec <HAL_InitTick>

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40023c00 	.word	0x40023c00
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	0800a494 	.word	0x0800a494
 8002c54:	20000004 	.word	0x20000004
 8002c58:	20000008 	.word	0x20000008

08002c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c60:	b090      	sub	sp, #64	@ 0x40
 8002c62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c68:	2300      	movs	r3, #0
 8002c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c74:	4b59      	ldr	r3, [pc, #356]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 030c 	and.w	r3, r3, #12
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d00d      	beq.n	8002c9c <HAL_RCC_GetSysClockFreq+0x40>
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	f200 80a1 	bhi.w	8002dc8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <HAL_RCC_GetSysClockFreq+0x34>
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d003      	beq.n	8002c96 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c8e:	e09b      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c90:	4b53      	ldr	r3, [pc, #332]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c92:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002c94:	e09b      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c96:	4b53      	ldr	r3, [pc, #332]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c98:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c9a:	e098      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c9c:	4b4f      	ldr	r3, [pc, #316]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ca4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ca6:	4b4d      	ldr	r3, [pc, #308]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d028      	beq.n	8002d04 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cb2:	4b4a      	ldr	r3, [pc, #296]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	099b      	lsrs	r3, r3, #6
 8002cb8:	2200      	movs	r2, #0
 8002cba:	623b      	str	r3, [r7, #32]
 8002cbc:	627a      	str	r2, [r7, #36]	@ 0x24
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	4b47      	ldr	r3, [pc, #284]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cc8:	fb03 f201 	mul.w	r2, r3, r1
 8002ccc:	2300      	movs	r3, #0
 8002cce:	fb00 f303 	mul.w	r3, r0, r3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	4a43      	ldr	r2, [pc, #268]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cd6:	fba0 1202 	umull	r1, r2, r0, r2
 8002cda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cdc:	460a      	mov	r2, r1
 8002cde:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002ce0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ce2:	4413      	add	r3, r2
 8002ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce8:	2200      	movs	r2, #0
 8002cea:	61bb      	str	r3, [r7, #24]
 8002cec:	61fa      	str	r2, [r7, #28]
 8002cee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cf2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002cf6:	f7fd fad3 	bl	80002a0 <__aeabi_uldivmod>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4613      	mov	r3, r2
 8002d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d02:	e053      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d04:	4b35      	ldr	r3, [pc, #212]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	099b      	lsrs	r3, r3, #6
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	617a      	str	r2, [r7, #20]
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d16:	f04f 0b00 	mov.w	fp, #0
 8002d1a:	4652      	mov	r2, sl
 8002d1c:	465b      	mov	r3, fp
 8002d1e:	f04f 0000 	mov.w	r0, #0
 8002d22:	f04f 0100 	mov.w	r1, #0
 8002d26:	0159      	lsls	r1, r3, #5
 8002d28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d2c:	0150      	lsls	r0, r2, #5
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	ebb2 080a 	subs.w	r8, r2, sl
 8002d36:	eb63 090b 	sbc.w	r9, r3, fp
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	f04f 0300 	mov.w	r3, #0
 8002d42:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d46:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d4a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d4e:	ebb2 0408 	subs.w	r4, r2, r8
 8002d52:	eb63 0509 	sbc.w	r5, r3, r9
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	f04f 0300 	mov.w	r3, #0
 8002d5e:	00eb      	lsls	r3, r5, #3
 8002d60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d64:	00e2      	lsls	r2, r4, #3
 8002d66:	4614      	mov	r4, r2
 8002d68:	461d      	mov	r5, r3
 8002d6a:	eb14 030a 	adds.w	r3, r4, sl
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	eb45 030b 	adc.w	r3, r5, fp
 8002d74:	607b      	str	r3, [r7, #4]
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d82:	4629      	mov	r1, r5
 8002d84:	028b      	lsls	r3, r1, #10
 8002d86:	4621      	mov	r1, r4
 8002d88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d8c:	4621      	mov	r1, r4
 8002d8e:	028a      	lsls	r2, r1, #10
 8002d90:	4610      	mov	r0, r2
 8002d92:	4619      	mov	r1, r3
 8002d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d96:	2200      	movs	r2, #0
 8002d98:	60bb      	str	r3, [r7, #8]
 8002d9a:	60fa      	str	r2, [r7, #12]
 8002d9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002da0:	f7fd fa7e 	bl	80002a0 <__aeabi_uldivmod>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4613      	mov	r3, r2
 8002daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dac:	4b0b      	ldr	r3, [pc, #44]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	0c1b      	lsrs	r3, r3, #16
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	3301      	adds	r3, #1
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002dbc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dc6:	e002      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dc8:	4b05      	ldr	r3, [pc, #20]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002dca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3740      	adds	r7, #64	@ 0x40
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	00f42400 	.word	0x00f42400
 8002de4:	017d7840 	.word	0x017d7840

08002de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dec:	4b03      	ldr	r3, [pc, #12]	@ (8002dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8002dee:	681b      	ldr	r3, [r3, #0]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	20000004 	.word	0x20000004

08002e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e04:	f7ff fff0 	bl	8002de8 <HAL_RCC_GetHCLKFreq>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	4b05      	ldr	r3, [pc, #20]	@ (8002e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	0a9b      	lsrs	r3, r3, #10
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	4903      	ldr	r1, [pc, #12]	@ (8002e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e16:	5ccb      	ldrb	r3, [r1, r3]
 8002e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40023800 	.word	0x40023800
 8002e24:	0800a4a4 	.word	0x0800a4a4

08002e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e2c:	f7ff ffdc 	bl	8002de8 <HAL_RCC_GetHCLKFreq>
 8002e30:	4602      	mov	r2, r0
 8002e32:	4b05      	ldr	r3, [pc, #20]	@ (8002e48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	0b5b      	lsrs	r3, r3, #13
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	4903      	ldr	r1, [pc, #12]	@ (8002e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e3e:	5ccb      	ldrb	r3, [r1, r3]
 8002e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	0800a4a4 	.word	0x0800a4a4

08002e50 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e022      	b.n	8002ea8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d105      	bne.n	8002e7a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7fe f971 	bl	800115c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2203      	movs	r2, #3
 8002e7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f814 	bl	8002eb0 <HAL_SD_InitCard>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e00a      	b.n	8002ea8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002eb0:	b5b0      	push	{r4, r5, r7, lr}
 8002eb2:	b08e      	sub	sp, #56	@ 0x38
 8002eb4:	af04      	add	r7, sp, #16
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002ecc:	2376      	movs	r3, #118	@ 0x76
 8002ece:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681d      	ldr	r5, [r3, #0]
 8002ed4:	466c      	mov	r4, sp
 8002ed6:	f107 0314 	add.w	r3, r7, #20
 8002eda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002ede:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002ee2:	f107 0308 	add.w	r3, r7, #8
 8002ee6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ee8:	4628      	mov	r0, r5
 8002eea:	f002 fcc9 	bl	8005880 <SDIO_Init>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8002ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e04f      	b.n	8002fa0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002f00:	4b29      	ldr	r3, [pc, #164]	@ (8002fa8 <HAL_SD_InitCard+0xf8>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f002 fd01 	bl	8005912 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002f10:	4b25      	ldr	r3, [pc, #148]	@ (8002fa8 <HAL_SD_InitCard+0xf8>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002f16:	2002      	movs	r0, #2
 8002f18:	f7fe fcb8 	bl	800188c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 ff6b 	bl	8003df8 <SD_PowerON>
 8002f22:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00b      	beq.n	8002f42 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e02e      	b.n	8002fa0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 fe8a 	bl	8003c5c <SD_InitCard>
 8002f48:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00b      	beq.n	8002f68 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e01b      	b.n	8002fa0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002f70:	4618      	mov	r0, r3
 8002f72:	f002 fd60 	bl	8005a36 <SDMMC_CmdBlockLength>
 8002f76:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00f      	beq.n	8002f9e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a0a      	ldr	r2, [pc, #40]	@ (8002fac <HAL_SD_InitCard+0xfc>)
 8002f84:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3728      	adds	r7, #40	@ 0x28
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8002fa8:	422580a0 	.word	0x422580a0
 8002fac:	004005ff 	.word	0x004005ff

08002fb0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08c      	sub	sp, #48	@ 0x30
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d107      	bne.n	8002fd8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fcc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0c0      	b.n	800315a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	f040 80b9 	bne.w	8003158 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002fec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	441a      	add	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d907      	bls.n	800300a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffe:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e0a7      	b.n	800315a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2203      	movs	r2, #3
 800300e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2200      	movs	r2, #0
 8003018:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	6812      	ldr	r2, [r2, #0]
 8003024:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8003028:	f043 0302 	orr.w	r3, r3, #2
 800302c:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003032:	4a4c      	ldr	r2, [pc, #304]	@ (8003164 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8003034:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303a:	4a4b      	ldr	r2, [pc, #300]	@ (8003168 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800303c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003042:	2200      	movs	r2, #0
 8003044:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304a:	2200      	movs	r2, #0
 800304c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	3380      	adds	r3, #128	@ 0x80
 8003074:	4619      	mov	r1, r3
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	025b      	lsls	r3, r3, #9
 800307c:	089b      	lsrs	r3, r3, #2
 800307e:	f7fe fde9 	bl	8001c54 <HAL_DMA_Start_IT>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d017      	beq.n	80030b8 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8003096:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a33      	ldr	r2, [pc, #204]	@ (800316c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800309e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e050      	b.n	800315a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80030b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003170 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d002      	beq.n	80030cc <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80030c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c8:	025b      	lsls	r3, r3, #9
 80030ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80030cc:	f04f 33ff 	mov.w	r3, #4294967295
 80030d0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	025b      	lsls	r3, r3, #9
 80030d6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80030d8:	2390      	movs	r3, #144	@ 0x90
 80030da:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80030dc:	2302      	movs	r3, #2
 80030de:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80030e4:	2301      	movs	r3, #1
 80030e6:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f107 0210 	add.w	r2, r7, #16
 80030f0:	4611      	mov	r1, r2
 80030f2:	4618      	mov	r0, r3
 80030f4:	f002 fc73 	bl	80059de <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d90a      	bls.n	8003114 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2282      	movs	r2, #130	@ 0x82
 8003102:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800310a:	4618      	mov	r0, r3
 800310c:	f002 fcd7 	bl	8005abe <SDMMC_CmdReadMultiBlock>
 8003110:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003112:	e009      	b.n	8003128 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2281      	movs	r2, #129	@ 0x81
 8003118:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003120:	4618      	mov	r0, r3
 8003122:	f002 fcaa 	bl	8005a7a <SDMMC_CmdReadSingleBlock>
 8003126:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800312a:	2b00      	cmp	r3, #0
 800312c:	d012      	beq.n	8003154 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a0e      	ldr	r2, [pc, #56]	@ (800316c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003134:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800313a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313c:	431a      	orrs	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e002      	b.n	800315a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	e000      	b.n	800315a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8003158:	2302      	movs	r3, #2
  }
}
 800315a:	4618      	mov	r0, r3
 800315c:	3730      	adds	r7, #48	@ 0x30
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	08003a6b 	.word	0x08003a6b
 8003168:	08003add 	.word	0x08003add
 800316c:	004005ff 	.word	0x004005ff
 8003170:	4225858c 	.word	0x4225858c

08003174 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08c      	sub	sp, #48	@ 0x30
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d107      	bne.n	800319c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003190:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0c5      	b.n	8003328 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	f040 80be 	bne.w	8003326 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80031b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	441a      	add	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d907      	bls.n	80031ce <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e0ac      	b.n	8003328 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2203      	movs	r2, #3
 80031d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2200      	movs	r2, #0
 80031dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 80031ec:	f043 0302 	orr.w	r3, r3, #2
 80031f0:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f6:	4a4e      	ldr	r2, [pc, #312]	@ (8003330 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80031f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031fe:	4a4d      	ldr	r2, [pc, #308]	@ (8003334 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003200:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003206:	2200      	movs	r2, #0
 8003208:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800320e:	2b01      	cmp	r3, #1
 8003210:	d002      	beq.n	8003218 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003214:	025b      	lsls	r3, r3, #9
 8003216:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d90a      	bls.n	8003234 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	22a0      	movs	r2, #160	@ 0xa0
 8003222:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800322a:	4618      	mov	r0, r3
 800322c:	f002 fc8b 	bl	8005b46 <SDMMC_CmdWriteMultiBlock>
 8003230:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003232:	e009      	b.n	8003248 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2290      	movs	r2, #144	@ 0x90
 8003238:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003240:	4618      	mov	r0, r3
 8003242:	f002 fc5e 	bl	8005b02 <SDMMC_CmdWriteSingleBlock>
 8003246:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800324a:	2b00      	cmp	r3, #0
 800324c:	d012      	beq.n	8003274 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a39      	ldr	r2, [pc, #228]	@ (8003338 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003254:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800325a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800325c:	431a      	orrs	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e059      	b.n	8003328 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003274:	4b31      	ldr	r3, [pc, #196]	@ (800333c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003276:	2201      	movs	r2, #1
 8003278:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800327e:	2240      	movs	r2, #64	@ 0x40
 8003280:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3380      	adds	r3, #128	@ 0x80
 80032aa:	461a      	mov	r2, r3
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	025b      	lsls	r3, r3, #9
 80032b0:	089b      	lsrs	r3, r3, #2
 80032b2:	f7fe fccf 	bl	8001c54 <HAL_DMA_Start_IT>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d01c      	beq.n	80032f6 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	6812      	ldr	r2, [r2, #0]
 80032c6:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 80032ca:	f023 0302 	bic.w	r3, r3, #2
 80032ce:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a18      	ldr	r2, [pc, #96]	@ (8003338 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80032d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032dc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e018      	b.n	8003328 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295
 80032fa:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	025b      	lsls	r3, r3, #9
 8003300:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003302:	2390      	movs	r3, #144	@ 0x90
 8003304:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800330a:	2300      	movs	r3, #0
 800330c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800330e:	2301      	movs	r3, #1
 8003310:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f107 0210 	add.w	r2, r7, #16
 800331a:	4611      	mov	r1, r2
 800331c:	4618      	mov	r0, r3
 800331e:	f002 fb5e 	bl	80059de <SDIO_ConfigData>

      return HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	e000      	b.n	8003328 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003326:	2302      	movs	r3, #2
  }
}
 8003328:	4618      	mov	r0, r3
 800332a:	3730      	adds	r7, #48	@ 0x30
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	08003a41 	.word	0x08003a41
 8003334:	08003add 	.word	0x08003add
 8003338:	004005ff 	.word	0x004005ff
 800333c:	4225858c 	.word	0x4225858c

08003340 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003354:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d008      	beq.n	800336e <HAL_SD_IRQHandler+0x2e>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 fdfc 	bl	8003f64 <SD_Read_IT>
 800336c:	e165      	b.n	800363a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 808f 	beq.w	800349c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003386:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8003396:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800339a:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0201 	bic.w	r2, r2, #1
 80033aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d039      	beq.n	800342a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d104      	bne.n	80033ca <HAL_SD_IRQHandler+0x8a>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f003 0320 	and.w	r3, r3, #32
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d011      	beq.n	80033ee <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f002 fbdc 	bl	8005b8c <SDMMC_CmdStopTransfer>
 80033d4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f92f 	bl	800364c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f240 523a 	movw	r2, #1338	@ 0x53a
 80033f6:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d104      	bne.n	800341a <HAL_SD_IRQHandler+0xda>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f002 fffa 	bl	8006414 <HAL_SD_RxCpltCallback>
 8003420:	e10b      	b.n	800363a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f002 ffec 	bl	8006400 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003428:	e107      	b.n	800363a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 8102 	beq.w	800363a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b00      	cmp	r3, #0
 800343e:	d011      	beq.n	8003464 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f002 fba1 	bl	8005b8c <SDMMC_CmdStopTransfer>
 800344a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d008      	beq.n	8003464 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	431a      	orrs	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f8f4 	bl	800364c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	f040 80e5 	bne.w	800363a <HAL_SD_IRQHandler+0x2fa>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	f040 80df 	bne.w	800363a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0208 	bic.w	r2, r2, #8
 800348a:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f002 ffb3 	bl	8006400 <HAL_SD_TxCpltCallback>
}
 800349a:	e0ce      	b.n	800363a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d008      	beq.n	80034bc <HAL_SD_IRQHandler+0x17c>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fda6 	bl	8004006 <SD_Write_IT>
 80034ba:	e0be      	b.n	800363a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034c2:	f240 233a 	movw	r3, #570	@ 0x23a
 80034c6:	4013      	ands	r3, r2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 80b6 	beq.w	800363a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d005      	beq.n	80034e8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e0:	f043 0202 	orr.w	r2, r3, #2
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d005      	beq.n	8003502 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fa:	f043 0208 	orr.w	r2, r3, #8
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003514:	f043 0220 	orr.w	r2, r3, #32
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003522:	f003 0310 	and.w	r3, r3, #16
 8003526:	2b00      	cmp	r3, #0
 8003528:	d005      	beq.n	8003536 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352e:	f043 0210 	orr.w	r2, r3, #16
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800353c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003548:	f043 0208 	orr.w	r2, r3, #8
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f240 723a 	movw	r2, #1850	@ 0x73a
 8003558:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6812      	ldr	r2, [r2, #0]
 8003564:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8003568:	f023 0302 	bic.w	r3, r3, #2
 800356c:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f002 fb0a 	bl	8005b8c <SDMMC_CmdStopTransfer>
 8003578:	4602      	mov	r2, r0
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f855 	bl	800364c <HAL_SD_ErrorCallback>
}
 80035a2:	e04a      	b.n	800363a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d045      	beq.n	800363a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f003 0310 	and.w	r3, r3, #16
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d104      	bne.n	80035c2 <HAL_SD_IRQHandler+0x282>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d011      	beq.n	80035e6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c6:	4a1f      	ldr	r2, [pc, #124]	@ (8003644 <HAL_SD_IRQHandler+0x304>)
 80035c8:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fe fb98 	bl	8001d04 <HAL_DMA_Abort_IT>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d02f      	beq.n	800363a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 face 	bl	8003b80 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80035e4:	e029      	b.n	800363a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d104      	bne.n	80035fa <HAL_SD_IRQHandler+0x2ba>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d011      	beq.n	800361e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fe:	4a12      	ldr	r2, [pc, #72]	@ (8003648 <HAL_SD_IRQHandler+0x308>)
 8003600:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003606:	4618      	mov	r0, r3
 8003608:	f7fe fb7c 	bl	8001d04 <HAL_DMA_Abort_IT>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d013      	beq.n	800363a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fae9 	bl	8003bee <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800361c:	e00d      	b.n	800363a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f002 feda 	bl	80063ec <HAL_SD_AbortCallback>
}
 8003638:	e7ff      	b.n	800363a <HAL_SD_IRQHandler+0x2fa>
 800363a:	bf00      	nop
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	08003b81 	.word	0x08003b81
 8003648:	08003bef 	.word	0x08003bef

0800364c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800366e:	0f9b      	lsrs	r3, r3, #30
 8003670:	b2da      	uxtb	r2, r3
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800367a:	0e9b      	lsrs	r3, r3, #26
 800367c:	b2db      	uxtb	r3, r3
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	b2da      	uxtb	r2, r3
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800368c:	0e1b      	lsrs	r3, r3, #24
 800368e:	b2db      	uxtb	r3, r3
 8003690:	f003 0303 	and.w	r3, r3, #3
 8003694:	b2da      	uxtb	r2, r3
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800369e:	0c1b      	lsrs	r3, r3, #16
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036aa:	0a1b      	lsrs	r3, r3, #8
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036c0:	0d1b      	lsrs	r3, r3, #20
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036cc:	0c1b      	lsrs	r3, r3, #16
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	f003 030f 	and.w	r3, r3, #15
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036de:	0bdb      	lsrs	r3, r3, #15
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036f0:	0b9b      	lsrs	r3, r3, #14
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003702:	0b5b      	lsrs	r3, r3, #13
 8003704:	b2db      	uxtb	r3, r3
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	b2da      	uxtb	r2, r3
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003714:	0b1b      	lsrs	r3, r3, #12
 8003716:	b2db      	uxtb	r3, r3
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	b2da      	uxtb	r2, r3
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2200      	movs	r2, #0
 8003726:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372c:	2b00      	cmp	r3, #0
 800372e:	d163      	bne.n	80037f8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003734:	009a      	lsls	r2, r3, #2
 8003736:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800373a:	4013      	ands	r3, r2
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8003740:	0f92      	lsrs	r2, r2, #30
 8003742:	431a      	orrs	r2, r3
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800374c:	0edb      	lsrs	r3, r3, #27
 800374e:	b2db      	uxtb	r3, r3
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	b2da      	uxtb	r2, r3
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800375e:	0e1b      	lsrs	r3, r3, #24
 8003760:	b2db      	uxtb	r3, r3
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	b2da      	uxtb	r2, r3
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003770:	0d5b      	lsrs	r3, r3, #21
 8003772:	b2db      	uxtb	r3, r3
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	b2da      	uxtb	r2, r3
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003782:	0c9b      	lsrs	r3, r3, #18
 8003784:	b2db      	uxtb	r3, r3
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	b2da      	uxtb	r2, r3
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003794:	0bdb      	lsrs	r3, r3, #15
 8003796:	b2db      	uxtb	r3, r3
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	b2da      	uxtb	r2, r3
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	7e1b      	ldrb	r3, [r3, #24]
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	3302      	adds	r3, #2
 80037b8:	2201      	movs	r2, #1
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80037c2:	fb03 f202 	mul.w	r2, r3, r2
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	7a1b      	ldrb	r3, [r3, #8]
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	2201      	movs	r2, #1
 80037d6:	409a      	lsls	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80037e4:	0a52      	lsrs	r2, r2, #9
 80037e6:	fb03 f202 	mul.w	r2, r3, r2
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037f4:	661a      	str	r2, [r3, #96]	@ 0x60
 80037f6:	e031      	b.n	800385c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d11d      	bne.n	800383c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003804:	041b      	lsls	r3, r3, #16
 8003806:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800380e:	0c1b      	lsrs	r3, r3, #16
 8003810:	431a      	orrs	r2, r3
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	3301      	adds	r3, #1
 800381c:	029a      	lsls	r2, r3, #10
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003830:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	661a      	str	r2, [r3, #96]	@ 0x60
 800383a:	e00f      	b.n	800385c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a58      	ldr	r2, [pc, #352]	@ (80039a4 <HAL_SD_GetCardCSD+0x344>)
 8003842:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003848:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e09d      	b.n	8003998 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003860:	0b9b      	lsrs	r3, r3, #14
 8003862:	b2db      	uxtb	r3, r3
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	b2da      	uxtb	r2, r3
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003872:	09db      	lsrs	r3, r3, #7
 8003874:	b2db      	uxtb	r3, r3
 8003876:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800387a:	b2da      	uxtb	r2, r3
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003884:	b2db      	uxtb	r3, r3
 8003886:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800388a:	b2da      	uxtb	r2, r3
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003894:	0fdb      	lsrs	r3, r3, #31
 8003896:	b2da      	uxtb	r2, r3
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a0:	0f5b      	lsrs	r3, r3, #29
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b2:	0e9b      	lsrs	r3, r3, #26
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038c4:	0d9b      	lsrs	r3, r3, #22
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	f003 030f 	and.w	r3, r3, #15
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d6:	0d5b      	lsrs	r3, r3, #21
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f2:	0c1b      	lsrs	r3, r3, #16
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003906:	0bdb      	lsrs	r3, r3, #15
 8003908:	b2db      	uxtb	r3, r3
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	b2da      	uxtb	r2, r3
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800391a:	0b9b      	lsrs	r3, r3, #14
 800391c:	b2db      	uxtb	r3, r3
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	b2da      	uxtb	r2, r3
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392e:	0b5b      	lsrs	r3, r3, #13
 8003930:	b2db      	uxtb	r3, r3
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	b2da      	uxtb	r2, r3
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003942:	0b1b      	lsrs	r3, r3, #12
 8003944:	b2db      	uxtb	r3, r3
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	b2da      	uxtb	r2, r3
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003956:	0a9b      	lsrs	r3, r3, #10
 8003958:	b2db      	uxtb	r3, r3
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	b2da      	uxtb	r2, r3
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800396a:	0a1b      	lsrs	r3, r3, #8
 800396c:	b2db      	uxtb	r3, r3
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	b2da      	uxtb	r2, r3
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800397e:	085b      	lsrs	r3, r3, #1
 8003980:	b2db      	uxtb	r3, r3
 8003982:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003986:	b2da      	uxtb	r2, r3
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	004005ff 	.word	0x004005ff

080039a8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003a0c:	f107 030c 	add.w	r3, r7, #12
 8003a10:	4619      	mov	r1, r3
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 fa7e 	bl	8003f14 <SD_SendStatus>
 8003a18:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	0a5b      	lsrs	r3, r3, #9
 8003a30:	f003 030f 	and.w	r3, r3, #15
 8003a34:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003a36:	693b      	ldr	r3, [r7, #16]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a4c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a5c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003a5e:	bf00      	nop
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a76:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7c:	2b82      	cmp	r3, #130	@ 0x82
 8003a7e:	d111      	bne.n	8003aa4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f002 f881 	bl	8005b8c <SDMMC_CmdStopTransfer>
 8003a8a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d008      	beq.n	8003aa4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f7ff fdd4 	bl	800364c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0208 	bic.w	r2, r2, #8
 8003ab2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003abc:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f002 fca1 	bl	8006414 <HAL_SD_RxCpltCallback>
#endif
}
 8003ad2:	bf00      	nop
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7fe fab6 	bl	800205c <HAL_DMA_GetError>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d03e      	beq.n	8003b74 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003afc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b04:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d002      	beq.n	8003b12 <SD_DMAError+0x36>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d12d      	bne.n	8003b6e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a19      	ldr	r2, [pc, #100]	@ (8003b7c <SD_DMAError+0xa0>)
 8003b18:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8003b28:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b2e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003b36:	6978      	ldr	r0, [r7, #20]
 8003b38:	f7ff ff62 	bl	8003a00 <HAL_SD_GetCardState>
 8003b3c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b06      	cmp	r3, #6
 8003b42:	d002      	beq.n	8003b4a <SD_DMAError+0x6e>
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b05      	cmp	r3, #5
 8003b48:	d10a      	bne.n	8003b60 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f002 f81c 	bl	8005b8c <SDMMC_CmdStopTransfer>
 8003b54:	4602      	mov	r2, r0
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003b6e:	6978      	ldr	r0, [r7, #20]
 8003b70:	f7ff fd6c 	bl	800364c <HAL_SD_ErrorCallback>
#endif
  }
}
 8003b74:	bf00      	nop
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	004005ff 	.word	0x004005ff

08003b80 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003b96:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f7ff ff31 	bl	8003a00 <HAL_SD_GetCardState>
 8003b9e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b06      	cmp	r3, #6
 8003bb2:	d002      	beq.n	8003bba <SD_DMATxAbort+0x3a>
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2b05      	cmp	r3, #5
 8003bb8:	d10a      	bne.n	8003bd0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f001 ffe4 	bl	8005b8c <SDMMC_CmdStopTransfer>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d103      	bne.n	8003be0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f002 fc07 	bl	80063ec <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003bde:	e002      	b.n	8003be6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f7ff fd33 	bl	800364c <HAL_SD_ErrorCallback>
}
 8003be6:	bf00      	nop
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b084      	sub	sp, #16
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfa:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003c04:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f7ff fefa 	bl	8003a00 <HAL_SD_GetCardState>
 8003c0c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2b06      	cmp	r3, #6
 8003c20:	d002      	beq.n	8003c28 <SD_DMARxAbort+0x3a>
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	2b05      	cmp	r3, #5
 8003c26:	d10a      	bne.n	8003c3e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f001 ffad 	bl	8005b8c <SDMMC_CmdStopTransfer>
 8003c32:	4602      	mov	r2, r0
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d103      	bne.n	8003c4e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f002 fbd0 	bl	80063ec <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003c4c:	e002      	b.n	8003c54 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f7ff fcfc 	bl	800364c <HAL_SD_ErrorCallback>
}
 8003c54:	bf00      	nop
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003c5c:	b5b0      	push	{r4, r5, r7, lr}
 8003c5e:	b094      	sub	sp, #80	@ 0x50
 8003c60:	af04      	add	r7, sp, #16
 8003c62:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003c64:	2301      	movs	r3, #1
 8003c66:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f001 fe5e 	bl	800592e <SDIO_GetPowerState>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d102      	bne.n	8003c7e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003c78:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003c7c:	e0b8      	b.n	8003df0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	d02f      	beq.n	8003ce6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f002 f845 	bl	8005d1a <SDMMC_CmdSendCID>
 8003c90:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <SD_InitCard+0x40>
    {
      return errorstate;
 8003c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c9a:	e0a9      	b.n	8003df0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f001 fe88 	bl	80059b8 <SDIO_GetResponse>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2104      	movs	r1, #4
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f001 fe7f 	bl	80059b8 <SDIO_GetResponse>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2108      	movs	r1, #8
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f001 fe76 	bl	80059b8 <SDIO_GetResponse>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	210c      	movs	r1, #12
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f001 fe6d 	bl	80059b8 <SDIO_GetResponse>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cea:	2b03      	cmp	r3, #3
 8003cec:	d00d      	beq.n	8003d0a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f107 020e 	add.w	r2, r7, #14
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f002 f84b 	bl	8005d94 <SDMMC_CmdSetRelAdd>
 8003cfe:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <SD_InitCard+0xae>
    {
      return errorstate;
 8003d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d08:	e072      	b.n	8003df0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0e:	2b03      	cmp	r3, #3
 8003d10:	d036      	beq.n	8003d80 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003d12:	89fb      	ldrh	r3, [r7, #14]
 8003d14:	461a      	mov	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d22:	041b      	lsls	r3, r3, #16
 8003d24:	4619      	mov	r1, r3
 8003d26:	4610      	mov	r0, r2
 8003d28:	f002 f815 	bl	8005d56 <SDMMC_CmdSendCSD>
 8003d2c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003d34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d36:	e05b      	b.n	8003df0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f001 fe3a 	bl	80059b8 <SDIO_GetResponse>
 8003d44:	4602      	mov	r2, r0
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2104      	movs	r1, #4
 8003d50:	4618      	mov	r0, r3
 8003d52:	f001 fe31 	bl	80059b8 <SDIO_GetResponse>
 8003d56:	4602      	mov	r2, r0
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2108      	movs	r1, #8
 8003d62:	4618      	mov	r0, r3
 8003d64:	f001 fe28 	bl	80059b8 <SDIO_GetResponse>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	210c      	movs	r1, #12
 8003d74:	4618      	mov	r0, r3
 8003d76:	f001 fe1f 	bl	80059b8 <SDIO_GetResponse>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2104      	movs	r1, #4
 8003d86:	4618      	mov	r0, r3
 8003d88:	f001 fe16 	bl	80059b8 <SDIO_GetResponse>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	0d1a      	lsrs	r2, r3, #20
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003d94:	f107 0310 	add.w	r3, r7, #16
 8003d98:	4619      	mov	r1, r3
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff fc60 	bl	8003660 <HAL_SD_GetCardCSD>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d002      	beq.n	8003dac <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003da6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003daa:	e021      	b.n	8003df0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6819      	ldr	r1, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003db4:	041b      	lsls	r3, r3, #16
 8003db6:	2200      	movs	r2, #0
 8003db8:	461c      	mov	r4, r3
 8003dba:	4615      	mov	r5, r2
 8003dbc:	4622      	mov	r2, r4
 8003dbe:	462b      	mov	r3, r5
 8003dc0:	4608      	mov	r0, r1
 8003dc2:	f001 ff05 	bl	8005bd0 <SDMMC_CmdSelDesel>
 8003dc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <SD_InitCard+0x176>
  {
    return errorstate;
 8003dce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dd0:	e00e      	b.n	8003df0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681d      	ldr	r5, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	466c      	mov	r4, sp
 8003dda:	f103 0210 	add.w	r2, r3, #16
 8003dde:	ca07      	ldmia	r2, {r0, r1, r2}
 8003de0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003de4:	3304      	adds	r3, #4
 8003de6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003de8:	4628      	mov	r0, r5
 8003dea:	f001 fd49 	bl	8005880 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3740      	adds	r7, #64	@ 0x40
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bdb0      	pop	{r4, r5, r7, pc}

08003df8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	617b      	str	r3, [r7, #20]
 8003e08:	2300      	movs	r3, #0
 8003e0a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f001 ff00 	bl	8005c16 <SDMMC_CmdGoIdleState>
 8003e16:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	e072      	b.n	8003f08 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f001 ff13 	bl	8005c52 <SDMMC_CmdOperCond>
 8003e2c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00d      	beq.n	8003e50 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f001 fee9 	bl	8005c16 <SDMMC_CmdGoIdleState>
 8003e44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d004      	beq.n	8003e56 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	e05b      	b.n	8003f08 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d137      	bne.n	8003ece <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2100      	movs	r1, #0
 8003e64:	4618      	mov	r0, r3
 8003e66:	f001 ff13 	bl	8005c90 <SDMMC_CmdAppCommand>
 8003e6a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d02d      	beq.n	8003ece <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e72:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003e76:	e047      	b.n	8003f08 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f001 ff06 	bl	8005c90 <SDMMC_CmdAppCommand>
 8003e84:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <SD_PowerON+0x98>
    {
      return errorstate;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	e03b      	b.n	8003f08 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	491e      	ldr	r1, [pc, #120]	@ (8003f10 <SD_PowerON+0x118>)
 8003e96:	4618      	mov	r0, r3
 8003e98:	f001 ff1c 	bl	8005cd4 <SDMMC_CmdAppOperCommand>
 8003e9c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003ea4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003ea8:	e02e      	b.n	8003f08 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2100      	movs	r1, #0
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f001 fd81 	bl	80059b8 <SDIO_GetResponse>
 8003eb6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	0fdb      	lsrs	r3, r3, #31
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <SD_PowerON+0xcc>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <SD_PowerON+0xce>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	613b      	str	r3, [r7, #16]

    count++;
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d802      	bhi.n	8003ede <SD_PowerON+0xe6>
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0cc      	beq.n	8003e78 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d902      	bls.n	8003eee <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003ee8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003eec:	e00c      	b.n	8003f08 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d003      	beq.n	8003f00 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	645a      	str	r2, [r3, #68]	@ 0x44
 8003efe:	e002      	b.n	8003f06 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3718      	adds	r7, #24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	c1100000 	.word	0xc1100000

08003f14 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d102      	bne.n	8003f2a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003f24:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003f28:	e018      	b.n	8003f5c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f32:	041b      	lsls	r3, r3, #16
 8003f34:	4619      	mov	r1, r3
 8003f36:	4610      	mov	r0, r2
 8003f38:	f001 ff4d 	bl	8005dd6 <SDMMC_CmdSendStatus>
 8003f3c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	e009      	b.n	8003f5c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f001 fd32 	bl	80059b8 <SDIO_GetResponse>
 8003f54:	4602      	mov	r2, r0
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f70:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f76:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d03f      	beq.n	8003ffe <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8003f7e:	2300      	movs	r3, #0
 8003f80:	617b      	str	r3, [r7, #20]
 8003f82:	e033      	b.n	8003fec <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f001 fca4 	bl	80058d6 <SDIO_ReadFIFO>
 8003f8e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	0a1b      	lsrs	r3, r3, #8
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	0c1b      	lsrs	r3, r3, #16
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	0e1b      	lsrs	r3, r3, #24
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	2b07      	cmp	r3, #7
 8003ff0:	d9c8      	bls.n	8003f84 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8003ffe:	bf00      	nop
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b086      	sub	sp, #24
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004018:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d043      	beq.n	80040a8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004020:	2300      	movs	r3, #0
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	e037      	b.n	8004096 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	3301      	adds	r3, #1
 8004030:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	3b01      	subs	r3, #1
 8004036:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	021a      	lsls	r2, r3, #8
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	4313      	orrs	r3, r2
 8004042:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	3301      	adds	r3, #1
 8004048:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	3b01      	subs	r3, #1
 800404e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	041a      	lsls	r2, r3, #16
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	4313      	orrs	r3, r2
 800405a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	3301      	adds	r3, #1
 8004060:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	3b01      	subs	r3, #1
 8004066:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	061a      	lsls	r2, r3, #24
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	4313      	orrs	r3, r2
 8004072:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	3301      	adds	r3, #1
 8004078:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	3b01      	subs	r3, #1
 800407e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f107 0208 	add.w	r2, r7, #8
 8004088:	4611      	mov	r1, r2
 800408a:	4618      	mov	r0, r3
 800408c:	f001 fc30 	bl	80058f0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	3301      	adds	r3, #1
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2b07      	cmp	r3, #7
 800409a:	d9c4      	bls.n	8004026 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80040a8:	bf00      	nop
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e07b      	b.n	80041ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d108      	bne.n	80040dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040d2:	d009      	beq.n	80040e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	61da      	str	r2, [r3, #28]
 80040da:	e005      	b.n	80040e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d106      	bne.n	8004108 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fd f950 	bl	80013a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800411e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800416c:	ea42 0103 	orr.w	r1, r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004174:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	0c1b      	lsrs	r3, r3, #16
 8004186:	f003 0104 	and.w	r1, r3, #4
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418e:	f003 0210 	and.w	r2, r3, #16
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	69da      	ldr	r2, [r3, #28]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b088      	sub	sp, #32
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	603b      	str	r3, [r7, #0]
 80041ce:	4613      	mov	r3, r2
 80041d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <HAL_SPI_Transmit+0x22>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e12d      	b.n	8004440 <HAL_SPI_Transmit+0x27e>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041ec:	f7fd fb42 	bl	8001874 <HAL_GetTick>
 80041f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80041f2:	88fb      	ldrh	r3, [r7, #6]
 80041f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d002      	beq.n	8004208 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004202:	2302      	movs	r3, #2
 8004204:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004206:	e116      	b.n	8004436 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <HAL_SPI_Transmit+0x52>
 800420e:	88fb      	ldrh	r3, [r7, #6]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d102      	bne.n	800421a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004218:	e10d      	b.n	8004436 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2203      	movs	r2, #3
 800421e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	88fa      	ldrh	r2, [r7, #6]
 8004232:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	88fa      	ldrh	r2, [r7, #6]
 8004238:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004260:	d10f      	bne.n	8004282 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004270:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004280:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800428c:	2b40      	cmp	r3, #64	@ 0x40
 800428e:	d007      	beq.n	80042a0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800429e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042a8:	d14f      	bne.n	800434a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <HAL_SPI_Transmit+0xf6>
 80042b2:	8afb      	ldrh	r3, [r7, #22]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d142      	bne.n	800433e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042bc:	881a      	ldrh	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c8:	1c9a      	adds	r2, r3, #2
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80042dc:	e02f      	b.n	800433e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d112      	bne.n	8004312 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f0:	881a      	ldrh	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fc:	1c9a      	adds	r2, r3, #2
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004306:	b29b      	uxth	r3, r3
 8004308:	3b01      	subs	r3, #1
 800430a:	b29a      	uxth	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004310:	e015      	b.n	800433e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004312:	f7fd faaf 	bl	8001874 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d803      	bhi.n	800432a <HAL_SPI_Transmit+0x168>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004328:	d102      	bne.n	8004330 <HAL_SPI_Transmit+0x16e>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d106      	bne.n	800433e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800433c:	e07b      	b.n	8004436 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004342:	b29b      	uxth	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1ca      	bne.n	80042de <HAL_SPI_Transmit+0x11c>
 8004348:	e050      	b.n	80043ec <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d002      	beq.n	8004358 <HAL_SPI_Transmit+0x196>
 8004352:	8afb      	ldrh	r3, [r7, #22]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d144      	bne.n	80043e2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	330c      	adds	r3, #12
 8004362:	7812      	ldrb	r2, [r2, #0]
 8004364:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004374:	b29b      	uxth	r3, r3
 8004376:	3b01      	subs	r3, #1
 8004378:	b29a      	uxth	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800437e:	e030      	b.n	80043e2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b02      	cmp	r3, #2
 800438c:	d113      	bne.n	80043b6 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	330c      	adds	r3, #12
 8004398:	7812      	ldrb	r2, [r2, #0]
 800439a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80043b4:	e015      	b.n	80043e2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043b6:	f7fd fa5d 	bl	8001874 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d803      	bhi.n	80043ce <HAL_SPI_Transmit+0x20c>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043cc:	d102      	bne.n	80043d4 <HAL_SPI_Transmit+0x212>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d106      	bne.n	80043e2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80043e0:	e029      	b.n	8004436 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1c9      	bne.n	8004380 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	6839      	ldr	r1, [r7, #0]
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 fbdf 	bl	8004bb4 <SPI_EndRxTxTransaction>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d002      	beq.n	8004402 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10a      	bne.n	8004420 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800440a:	2300      	movs	r3, #0
 800440c:	613b      	str	r3, [r7, #16]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	613b      	str	r3, [r7, #16]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	613b      	str	r3, [r7, #16]
 800441e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	77fb      	strb	r3, [r7, #31]
 800442c:	e003      	b.n	8004436 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800443e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004440:	4618      	mov	r0, r3
 8004442:	3720      	adds	r7, #32
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af02      	add	r7, sp, #8
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	4613      	mov	r3, r2
 8004456:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004458:	2300      	movs	r3, #0
 800445a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b01      	cmp	r3, #1
 8004466:	d002      	beq.n	800446e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004468:	2302      	movs	r3, #2
 800446a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800446c:	e0fb      	b.n	8004666 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004476:	d112      	bne.n	800449e <HAL_SPI_Receive+0x56>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10e      	bne.n	800449e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2204      	movs	r2, #4
 8004484:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004488:	88fa      	ldrh	r2, [r7, #6]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	4613      	mov	r3, r2
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	68b9      	ldr	r1, [r7, #8]
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 f8ef 	bl	8004678 <HAL_SPI_TransmitReceive>
 800449a:	4603      	mov	r3, r0
 800449c:	e0e8      	b.n	8004670 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d101      	bne.n	80044ac <HAL_SPI_Receive+0x64>
 80044a8:	2302      	movs	r3, #2
 80044aa:	e0e1      	b.n	8004670 <HAL_SPI_Receive+0x228>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044b4:	f7fd f9de 	bl	8001874 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <HAL_SPI_Receive+0x7e>
 80044c0:	88fb      	ldrh	r3, [r7, #6]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d102      	bne.n	80044cc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044ca:	e0cc      	b.n	8004666 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2204      	movs	r2, #4
 80044d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	88fa      	ldrh	r2, [r7, #6]
 80044e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	88fa      	ldrh	r2, [r7, #6]
 80044ea:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004512:	d10f      	bne.n	8004534 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004522:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004532:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800453e:	2b40      	cmp	r3, #64	@ 0x40
 8004540:	d007      	beq.n	8004552 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004550:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d16a      	bne.n	8004630 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800455a:	e032      	b.n	80045c2 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b01      	cmp	r3, #1
 8004568:	d115      	bne.n	8004596 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f103 020c 	add.w	r2, r3, #12
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004576:	7812      	ldrb	r2, [r2, #0]
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800458a:	b29b      	uxth	r3, r3
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004594:	e015      	b.n	80045c2 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004596:	f7fd f96d 	bl	8001874 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d803      	bhi.n	80045ae <HAL_SPI_Receive+0x166>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ac:	d102      	bne.n	80045b4 <HAL_SPI_Receive+0x16c>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d106      	bne.n	80045c2 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80045c0:	e051      	b.n	8004666 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1c7      	bne.n	800455c <HAL_SPI_Receive+0x114>
 80045cc:	e035      	b.n	800463a <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d113      	bne.n	8004604 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e6:	b292      	uxth	r2, r2
 80045e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ee:	1c9a      	adds	r2, r3, #2
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004602:	e015      	b.n	8004630 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004604:	f7fd f936 	bl	8001874 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	429a      	cmp	r2, r3
 8004612:	d803      	bhi.n	800461c <HAL_SPI_Receive+0x1d4>
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461a:	d102      	bne.n	8004622 <HAL_SPI_Receive+0x1da>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800462e:	e01a      	b.n	8004666 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1c9      	bne.n	80045ce <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	6839      	ldr	r1, [r7, #0]
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 fa52 	bl	8004ae8 <SPI_EndRxTransaction>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2220      	movs	r2, #32
 800464e:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	75fb      	strb	r3, [r7, #23]
 800465c:	e003      	b.n	8004666 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800466e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08c      	sub	sp, #48	@ 0x30
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
 8004684:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004686:	2301      	movs	r3, #1
 8004688:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004696:	2b01      	cmp	r3, #1
 8004698:	d101      	bne.n	800469e <HAL_SPI_TransmitReceive+0x26>
 800469a:	2302      	movs	r3, #2
 800469c:	e198      	b.n	80049d0 <HAL_SPI_TransmitReceive+0x358>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046a6:	f7fd f8e5 	bl	8001874 <HAL_GetTick>
 80046aa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80046bc:	887b      	ldrh	r3, [r7, #2]
 80046be:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80046c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d00f      	beq.n	80046e8 <HAL_SPI_TransmitReceive+0x70>
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046ce:	d107      	bne.n	80046e0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d103      	bne.n	80046e0 <HAL_SPI_TransmitReceive+0x68>
 80046d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d003      	beq.n	80046e8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80046e0:	2302      	movs	r3, #2
 80046e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80046e6:	e16d      	b.n	80049c4 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d005      	beq.n	80046fa <HAL_SPI_TransmitReceive+0x82>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <HAL_SPI_TransmitReceive+0x82>
 80046f4:	887b      	ldrh	r3, [r7, #2]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d103      	bne.n	8004702 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004700:	e160      	b.n	80049c4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b04      	cmp	r3, #4
 800470c:	d003      	beq.n	8004716 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2205      	movs	r2, #5
 8004712:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	887a      	ldrh	r2, [r7, #2]
 8004726:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	887a      	ldrh	r2, [r7, #2]
 800472c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	887a      	ldrh	r2, [r7, #2]
 8004738:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	887a      	ldrh	r2, [r7, #2]
 800473e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004756:	2b40      	cmp	r3, #64	@ 0x40
 8004758:	d007      	beq.n	800476a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004768:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004772:	d17c      	bne.n	800486e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <HAL_SPI_TransmitReceive+0x10a>
 800477c:	8b7b      	ldrh	r3, [r7, #26]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d16a      	bne.n	8004858 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004786:	881a      	ldrh	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004792:	1c9a      	adds	r2, r3, #2
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800479c:	b29b      	uxth	r3, r3
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047a6:	e057      	b.n	8004858 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d11b      	bne.n	80047ee <HAL_SPI_TransmitReceive+0x176>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d016      	beq.n	80047ee <HAL_SPI_TransmitReceive+0x176>
 80047c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d113      	bne.n	80047ee <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ca:	881a      	ldrh	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d6:	1c9a      	adds	r2, r3, #2
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047ea:	2300      	movs	r3, #0
 80047ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d119      	bne.n	8004830 <HAL_SPI_TransmitReceive+0x1b8>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004800:	b29b      	uxth	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d014      	beq.n	8004830 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68da      	ldr	r2, [r3, #12]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004810:	b292      	uxth	r2, r2
 8004812:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004818:	1c9a      	adds	r2, r3, #2
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004822:	b29b      	uxth	r3, r3
 8004824:	3b01      	subs	r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800482c:	2301      	movs	r3, #1
 800482e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004830:	f7fd f820 	bl	8001874 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800483c:	429a      	cmp	r2, r3
 800483e:	d80b      	bhi.n	8004858 <HAL_SPI_TransmitReceive+0x1e0>
 8004840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004846:	d007      	beq.n	8004858 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004856:	e0b5      	b.n	80049c4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800485c:	b29b      	uxth	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1a2      	bne.n	80047a8 <HAL_SPI_TransmitReceive+0x130>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004866:	b29b      	uxth	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d19d      	bne.n	80047a8 <HAL_SPI_TransmitReceive+0x130>
 800486c:	e080      	b.n	8004970 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <HAL_SPI_TransmitReceive+0x204>
 8004876:	8b7b      	ldrh	r3, [r7, #26]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d16f      	bne.n	800495c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	330c      	adds	r3, #12
 8004886:	7812      	ldrb	r2, [r2, #0]
 8004888:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800488e:	1c5a      	adds	r2, r3, #1
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004898:	b29b      	uxth	r3, r3
 800489a:	3b01      	subs	r3, #1
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048a2:	e05b      	b.n	800495c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d11c      	bne.n	80048ec <HAL_SPI_TransmitReceive+0x274>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d017      	beq.n	80048ec <HAL_SPI_TransmitReceive+0x274>
 80048bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d114      	bne.n	80048ec <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	330c      	adds	r3, #12
 80048cc:	7812      	ldrb	r2, [r2, #0]
 80048ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d4:	1c5a      	adds	r2, r3, #1
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d119      	bne.n	800492e <HAL_SPI_TransmitReceive+0x2b6>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048fe:	b29b      	uxth	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d014      	beq.n	800492e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490e:	b2d2      	uxtb	r2, r2
 8004910:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800492a:	2301      	movs	r3, #1
 800492c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800492e:	f7fc ffa1 	bl	8001874 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800493a:	429a      	cmp	r2, r3
 800493c:	d803      	bhi.n	8004946 <HAL_SPI_TransmitReceive+0x2ce>
 800493e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004944:	d102      	bne.n	800494c <HAL_SPI_TransmitReceive+0x2d4>
 8004946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004948:	2b00      	cmp	r3, #0
 800494a:	d107      	bne.n	800495c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800495a:	e033      	b.n	80049c4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004960:	b29b      	uxth	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d19e      	bne.n	80048a4 <HAL_SPI_TransmitReceive+0x22c>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800496a:	b29b      	uxth	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d199      	bne.n	80048a4 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004972:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 f91d 	bl	8004bb4 <SPI_EndRxTxTransaction>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d006      	beq.n	800498e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2220      	movs	r2, #32
 800498a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800498c:	e01a      	b.n	80049c4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10a      	bne.n	80049ac <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004996:	2300      	movs	r3, #0
 8004998:	617b      	str	r3, [r7, #20]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d003      	beq.n	80049bc <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049ba:	e003      	b.n	80049c4 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80049cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3730      	adds	r7, #48	@ 0x30
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b088      	sub	sp, #32
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	603b      	str	r3, [r7, #0]
 80049e4:	4613      	mov	r3, r2
 80049e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049e8:	f7fc ff44 	bl	8001874 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f0:	1a9b      	subs	r3, r3, r2
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	4413      	add	r3, r2
 80049f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049f8:	f7fc ff3c 	bl	8001874 <HAL_GetTick>
 80049fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049fe:	4b39      	ldr	r3, [pc, #228]	@ (8004ae4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	015b      	lsls	r3, r3, #5
 8004a04:	0d1b      	lsrs	r3, r3, #20
 8004a06:	69fa      	ldr	r2, [r7, #28]
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a0e:	e054      	b.n	8004aba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a16:	d050      	beq.n	8004aba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a18:	f7fc ff2c 	bl	8001874 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	69fa      	ldr	r2, [r7, #28]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d902      	bls.n	8004a2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d13d      	bne.n	8004aaa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004a3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a46:	d111      	bne.n	8004a6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a50:	d004      	beq.n	8004a5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a5a:	d107      	bne.n	8004a6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a74:	d10f      	bne.n	8004a96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e017      	b.n	8004ada <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689a      	ldr	r2, [r3, #8]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	bf0c      	ite	eq
 8004aca:	2301      	moveq	r3, #1
 8004acc:	2300      	movne	r3, #0
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	79fb      	ldrb	r3, [r7, #7]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d19b      	bne.n	8004a10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3720      	adds	r7, #32
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000004 	.word	0x20000004

08004ae8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af02      	add	r7, sp, #8
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004afc:	d111      	bne.n	8004b22 <SPI_EndRxTransaction+0x3a>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b06:	d004      	beq.n	8004b12 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b10:	d107      	bne.n	8004b22 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b20:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b2a:	d12a      	bne.n	8004b82 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b34:	d012      	beq.n	8004b5c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	2180      	movs	r1, #128	@ 0x80
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f7ff ff49 	bl	80049d8 <SPI_WaitFlagStateUntilTimeout>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d02d      	beq.n	8004ba8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b50:	f043 0220 	orr.w	r2, r3, #32
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e026      	b.n	8004baa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2200      	movs	r2, #0
 8004b64:	2101      	movs	r1, #1
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f7ff ff36 	bl	80049d8 <SPI_WaitFlagStateUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d01a      	beq.n	8004ba8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b76:	f043 0220 	orr.w	r2, r3, #32
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e013      	b.n	8004baa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f7ff ff23 	bl	80049d8 <SPI_WaitFlagStateUntilTimeout>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d007      	beq.n	8004ba8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b9c:	f043 0220 	orr.w	r2, r3, #32
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e000      	b.n	8004baa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
	...

08004bb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af02      	add	r7, sp, #8
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	2102      	movs	r1, #2
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f7ff ff04 	bl	80049d8 <SPI_WaitFlagStateUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d007      	beq.n	8004be6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bda:	f043 0220 	orr.w	r2, r3, #32
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e032      	b.n	8004c4c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004be6:	4b1b      	ldr	r3, [pc, #108]	@ (8004c54 <SPI_EndRxTxTransaction+0xa0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a1b      	ldr	r2, [pc, #108]	@ (8004c58 <SPI_EndRxTxTransaction+0xa4>)
 8004bec:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf0:	0d5b      	lsrs	r3, r3, #21
 8004bf2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004bf6:	fb02 f303 	mul.w	r3, r2, r3
 8004bfa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c04:	d112      	bne.n	8004c2c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2180      	movs	r1, #128	@ 0x80
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f7ff fee1 	bl	80049d8 <SPI_WaitFlagStateUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d016      	beq.n	8004c4a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c20:	f043 0220 	orr.w	r2, r3, #32
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e00f      	b.n	8004c4c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c42:	2b80      	cmp	r3, #128	@ 0x80
 8004c44:	d0f2      	beq.n	8004c2c <SPI_EndRxTxTransaction+0x78>
 8004c46:	e000      	b.n	8004c4a <SPI_EndRxTxTransaction+0x96>
        break;
 8004c48:	bf00      	nop
  }

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	20000004 	.word	0x20000004
 8004c58:	165e9f81 	.word	0x165e9f81

08004c5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e042      	b.n	8004cf4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d106      	bne.n	8004c88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7fc fcea 	bl	800165c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2224      	movs	r2, #36	@ 0x24
 8004c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fb79 	bl	8005398 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	691a      	ldr	r2, [r3, #16]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	695a      	ldr	r2, [r3, #20]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08a      	sub	sp, #40	@ 0x28
 8004d00:	af02      	add	r7, sp, #8
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	603b      	str	r3, [r7, #0]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b20      	cmp	r3, #32
 8004d1a:	d175      	bne.n	8004e08 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d002      	beq.n	8004d28 <HAL_UART_Transmit+0x2c>
 8004d22:	88fb      	ldrh	r3, [r7, #6]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e06e      	b.n	8004e0a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2221      	movs	r2, #33	@ 0x21
 8004d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d3a:	f7fc fd9b 	bl	8001874 <HAL_GetTick>
 8004d3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	88fa      	ldrh	r2, [r7, #6]
 8004d44:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	88fa      	ldrh	r2, [r7, #6]
 8004d4a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d54:	d108      	bne.n	8004d68 <HAL_UART_Transmit+0x6c>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d104      	bne.n	8004d68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	61bb      	str	r3, [r7, #24]
 8004d66:	e003      	b.n	8004d70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d70:	e02e      	b.n	8004dd0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	2180      	movs	r1, #128	@ 0x80
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 f98b 	bl	8005098 <UART_WaitOnFlagUntilTimeout>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e03a      	b.n	8004e0a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10b      	bne.n	8004db2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004da8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	3302      	adds	r3, #2
 8004dae:	61bb      	str	r3, [r7, #24]
 8004db0:	e007      	b.n	8004dc2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	781a      	ldrb	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1cb      	bne.n	8004d72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2200      	movs	r2, #0
 8004de2:	2140      	movs	r1, #64	@ 0x40
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 f957 	bl	8005098 <UART_WaitOnFlagUntilTimeout>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d005      	beq.n	8004dfc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2220      	movs	r2, #32
 8004df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e006      	b.n	8004e0a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004e04:	2300      	movs	r3, #0
 8004e06:	e000      	b.n	8004e0a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004e08:	2302      	movs	r3, #2
  }
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3720      	adds	r7, #32
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	60f8      	str	r0, [r7, #12]
 8004e1a:	60b9      	str	r1, [r7, #8]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b20      	cmp	r3, #32
 8004e2a:	d112      	bne.n	8004e52 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <HAL_UART_Receive_DMA+0x26>
 8004e32:	88fb      	ldrh	r3, [r7, #6]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d101      	bne.n	8004e3c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e00b      	b.n	8004e54 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004e42:	88fb      	ldrh	r3, [r7, #6]
 8004e44:	461a      	mov	r2, r3
 8004e46:	68b9      	ldr	r1, [r7, #8]
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 f97f 	bl	800514c <UART_Start_Receive_DMA>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	e000      	b.n	8004e54 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004e52:	2302      	movs	r3, #2
  }
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b09c      	sub	sp, #112	@ 0x70
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d172      	bne.n	8004f9e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004eb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004eba:	2200      	movs	r2, #0
 8004ebc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ebe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	330c      	adds	r3, #12
 8004ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004ece:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ed0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ed4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ed6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	330c      	adds	r3, #12
 8004edc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004ede:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004ee0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ee4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004eec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e5      	bne.n	8004ebe <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3314      	adds	r3, #20
 8004ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004efc:	e853 3f00 	ldrex	r3, [r3]
 8004f00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f04:	f023 0301 	bic.w	r3, r3, #1
 8004f08:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3314      	adds	r3, #20
 8004f10:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004f12:	647a      	str	r2, [r7, #68]	@ 0x44
 8004f14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f1a:	e841 2300 	strex	r3, r2, [r1]
 8004f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1e5      	bne.n	8004ef2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3314      	adds	r3, #20
 8004f2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f30:	e853 3f00 	ldrex	r3, [r3]
 8004f34:	623b      	str	r3, [r7, #32]
   return(result);
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	3314      	adds	r3, #20
 8004f44:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004f46:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f4e:	e841 2300 	strex	r3, r2, [r1]
 8004f52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1e5      	bne.n	8004f26 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d119      	bne.n	8004f9e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	330c      	adds	r3, #12
 8004f70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	e853 3f00 	ldrex	r3, [r3]
 8004f78:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f023 0310 	bic.w	r3, r3, #16
 8004f80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	330c      	adds	r3, #12
 8004f88:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f8a:	61fa      	str	r2, [r7, #28]
 8004f8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8e:	69b9      	ldr	r1, [r7, #24]
 8004f90:	69fa      	ldr	r2, [r7, #28]
 8004f92:	e841 2300 	strex	r3, r2, [r1]
 8004f96:	617b      	str	r3, [r7, #20]
   return(result);
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1e5      	bne.n	8004f6a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d106      	bne.n	8004fba <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fae:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004fb4:	f7ff ff66 	bl	8004e84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004fb8:	e002      	b.n	8004fc0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004fba:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004fbc:	f7fb fb9a 	bl	80006f4 <HAL_UART_RxCpltCallback>
}
 8004fc0:	bf00      	nop
 8004fc2:	3770      	adds	r7, #112	@ 0x70
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d108      	bne.n	8004ff6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fe8:	085b      	lsrs	r3, r3, #1
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	4619      	mov	r1, r3
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f7ff ff48 	bl	8004e84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ff4:	e002      	b.n	8004ffc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f7ff ff30 	bl	8004e5c <HAL_UART_RxHalfCpltCallback>
}
 8004ffc:	bf00      	nop
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800500c:	2300      	movs	r3, #0
 800500e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005014:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005020:	2b80      	cmp	r3, #128	@ 0x80
 8005022:	bf0c      	ite	eq
 8005024:	2301      	moveq	r3, #1
 8005026:	2300      	movne	r3, #0
 8005028:	b2db      	uxtb	r3, r3
 800502a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b21      	cmp	r3, #33	@ 0x21
 8005036:	d108      	bne.n	800504a <UART_DMAError+0x46>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d005      	beq.n	800504a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2200      	movs	r2, #0
 8005042:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005044:	68b8      	ldr	r0, [r7, #8]
 8005046:	f000 f91b 	bl	8005280 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005054:	2b40      	cmp	r3, #64	@ 0x40
 8005056:	bf0c      	ite	eq
 8005058:	2301      	moveq	r3, #1
 800505a:	2300      	movne	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b22      	cmp	r3, #34	@ 0x22
 800506a:	d108      	bne.n	800507e <UART_DMAError+0x7a>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2200      	movs	r2, #0
 8005076:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005078:	68b8      	ldr	r0, [r7, #8]
 800507a:	f000 f929 	bl	80052d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005082:	f043 0210 	orr.w	r2, r3, #16
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800508a:	68b8      	ldr	r0, [r7, #8]
 800508c:	f7ff fef0 	bl	8004e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005090:	bf00      	nop
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	603b      	str	r3, [r7, #0]
 80050a4:	4613      	mov	r3, r2
 80050a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050a8:	e03b      	b.n	8005122 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b0:	d037      	beq.n	8005122 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b2:	f7fc fbdf 	bl	8001874 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	6a3a      	ldr	r2, [r7, #32]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d302      	bcc.n	80050c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e03a      	b.n	8005142 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f003 0304 	and.w	r3, r3, #4
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d023      	beq.n	8005122 <UART_WaitOnFlagUntilTimeout+0x8a>
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b80      	cmp	r3, #128	@ 0x80
 80050de:	d020      	beq.n	8005122 <UART_WaitOnFlagUntilTimeout+0x8a>
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	2b40      	cmp	r3, #64	@ 0x40
 80050e4:	d01d      	beq.n	8005122 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0308 	and.w	r3, r3, #8
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d116      	bne.n	8005122 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80050f4:	2300      	movs	r3, #0
 80050f6:	617b      	str	r3, [r7, #20]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	617b      	str	r3, [r7, #20]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 f8e0 	bl	80052d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2208      	movs	r2, #8
 8005114:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e00f      	b.n	8005142 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	4013      	ands	r3, r2
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	429a      	cmp	r2, r3
 8005130:	bf0c      	ite	eq
 8005132:	2301      	moveq	r3, #1
 8005134:	2300      	movne	r3, #0
 8005136:	b2db      	uxtb	r3, r3
 8005138:	461a      	mov	r2, r3
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	429a      	cmp	r2, r3
 800513e:	d0b4      	beq.n	80050aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3718      	adds	r7, #24
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
	...

0800514c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b098      	sub	sp, #96	@ 0x60
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	4613      	mov	r3, r2
 8005158:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	88fa      	ldrh	r2, [r7, #6]
 8005164:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2222      	movs	r2, #34	@ 0x22
 8005170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005178:	4a3e      	ldr	r2, [pc, #248]	@ (8005274 <UART_Start_Receive_DMA+0x128>)
 800517a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005180:	4a3d      	ldr	r2, [pc, #244]	@ (8005278 <UART_Start_Receive_DMA+0x12c>)
 8005182:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005188:	4a3c      	ldr	r2, [pc, #240]	@ (800527c <UART_Start_Receive_DMA+0x130>)
 800518a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005190:	2200      	movs	r2, #0
 8005192:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005194:	f107 0308 	add.w	r3, r7, #8
 8005198:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	3304      	adds	r3, #4
 80051a4:	4619      	mov	r1, r3
 80051a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	88fb      	ldrh	r3, [r7, #6]
 80051ac:	f7fc fd52 	bl	8001c54 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80051b0:	2300      	movs	r3, #0
 80051b2:	613b      	str	r3, [r7, #16]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	613b      	str	r3, [r7, #16]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	613b      	str	r3, [r7, #16]
 80051c4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d019      	beq.n	8005202 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	330c      	adds	r3, #12
 80051d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051d8:	e853 3f00 	ldrex	r3, [r3]
 80051dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	330c      	adds	r3, #12
 80051ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051ee:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80051f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80051f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051f6:	e841 2300 	strex	r3, r2, [r1]
 80051fa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80051fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1e5      	bne.n	80051ce <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3314      	adds	r3, #20
 8005208:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800520c:	e853 3f00 	ldrex	r3, [r3]
 8005210:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005214:	f043 0301 	orr.w	r3, r3, #1
 8005218:	657b      	str	r3, [r7, #84]	@ 0x54
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	3314      	adds	r3, #20
 8005220:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005222:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005224:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005226:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005228:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800522a:	e841 2300 	strex	r3, r2, [r1]
 800522e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1e5      	bne.n	8005202 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3314      	adds	r3, #20
 800523c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	e853 3f00 	ldrex	r3, [r3]
 8005244:	617b      	str	r3, [r7, #20]
   return(result);
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800524c:	653b      	str	r3, [r7, #80]	@ 0x50
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3314      	adds	r3, #20
 8005254:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005256:	627a      	str	r2, [r7, #36]	@ 0x24
 8005258:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525a:	6a39      	ldr	r1, [r7, #32]
 800525c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800525e:	e841 2300 	strex	r3, r2, [r1]
 8005262:	61fb      	str	r3, [r7, #28]
   return(result);
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1e5      	bne.n	8005236 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3760      	adds	r7, #96	@ 0x60
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	08004e9d 	.word	0x08004e9d
 8005278:	08004fc9 	.word	0x08004fc9
 800527c:	08005005 	.word	0x08005005

08005280 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005280:	b480      	push	{r7}
 8005282:	b089      	sub	sp, #36	@ 0x24
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	330c      	adds	r3, #12
 800528e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	e853 3f00 	ldrex	r3, [r3]
 8005296:	60bb      	str	r3, [r7, #8]
   return(result);
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800529e:	61fb      	str	r3, [r7, #28]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	330c      	adds	r3, #12
 80052a6:	69fa      	ldr	r2, [r7, #28]
 80052a8:	61ba      	str	r2, [r7, #24]
 80052aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ac:	6979      	ldr	r1, [r7, #20]
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	e841 2300 	strex	r3, r2, [r1]
 80052b4:	613b      	str	r3, [r7, #16]
   return(result);
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1e5      	bne.n	8005288 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2220      	movs	r2, #32
 80052c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80052c4:	bf00      	nop
 80052c6:	3724      	adds	r7, #36	@ 0x24
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b095      	sub	sp, #84	@ 0x54
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	330c      	adds	r3, #12
 80052de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e2:	e853 3f00 	ldrex	r3, [r3]
 80052e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	330c      	adds	r3, #12
 80052f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052f8:	643a      	str	r2, [r7, #64]	@ 0x40
 80052fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005300:	e841 2300 	strex	r3, r2, [r1]
 8005304:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1e5      	bne.n	80052d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3314      	adds	r3, #20
 8005312:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	61fb      	str	r3, [r7, #28]
   return(result);
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	f023 0301 	bic.w	r3, r3, #1
 8005322:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3314      	adds	r3, #20
 800532a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800532c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800532e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005332:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800533a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e5      	bne.n	800530c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005344:	2b01      	cmp	r3, #1
 8005346:	d119      	bne.n	800537c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	330c      	adds	r3, #12
 800534e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	e853 3f00 	ldrex	r3, [r3]
 8005356:	60bb      	str	r3, [r7, #8]
   return(result);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f023 0310 	bic.w	r3, r3, #16
 800535e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	330c      	adds	r3, #12
 8005366:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005368:	61ba      	str	r2, [r7, #24]
 800536a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536c:	6979      	ldr	r1, [r7, #20]
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	e841 2300 	strex	r3, r2, [r1]
 8005374:	613b      	str	r3, [r7, #16]
   return(result);
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1e5      	bne.n	8005348 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2220      	movs	r2, #32
 8005380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800538a:	bf00      	nop
 800538c:	3754      	adds	r7, #84	@ 0x54
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
	...

08005398 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800539c:	b0c0      	sub	sp, #256	@ 0x100
 800539e:	af00      	add	r7, sp, #0
 80053a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80053b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b4:	68d9      	ldr	r1, [r3, #12]
 80053b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	ea40 0301 	orr.w	r3, r0, r1
 80053c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	431a      	orrs	r2, r3
 80053d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	431a      	orrs	r2, r3
 80053d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80053f0:	f021 010c 	bic.w	r1, r1, #12
 80053f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053fe:	430b      	orrs	r3, r1
 8005400:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800540e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005412:	6999      	ldr	r1, [r3, #24]
 8005414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	ea40 0301 	orr.w	r3, r0, r1
 800541e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	4b8f      	ldr	r3, [pc, #572]	@ (8005664 <UART_SetConfig+0x2cc>)
 8005428:	429a      	cmp	r2, r3
 800542a:	d005      	beq.n	8005438 <UART_SetConfig+0xa0>
 800542c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	4b8d      	ldr	r3, [pc, #564]	@ (8005668 <UART_SetConfig+0x2d0>)
 8005434:	429a      	cmp	r2, r3
 8005436:	d104      	bne.n	8005442 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005438:	f7fd fcf6 	bl	8002e28 <HAL_RCC_GetPCLK2Freq>
 800543c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005440:	e003      	b.n	800544a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005442:	f7fd fcdd 	bl	8002e00 <HAL_RCC_GetPCLK1Freq>
 8005446:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800544a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005454:	f040 810c 	bne.w	8005670 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005458:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800545c:	2200      	movs	r2, #0
 800545e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005462:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005466:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800546a:	4622      	mov	r2, r4
 800546c:	462b      	mov	r3, r5
 800546e:	1891      	adds	r1, r2, r2
 8005470:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005472:	415b      	adcs	r3, r3
 8005474:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005476:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800547a:	4621      	mov	r1, r4
 800547c:	eb12 0801 	adds.w	r8, r2, r1
 8005480:	4629      	mov	r1, r5
 8005482:	eb43 0901 	adc.w	r9, r3, r1
 8005486:	f04f 0200 	mov.w	r2, #0
 800548a:	f04f 0300 	mov.w	r3, #0
 800548e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005492:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005496:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800549a:	4690      	mov	r8, r2
 800549c:	4699      	mov	r9, r3
 800549e:	4623      	mov	r3, r4
 80054a0:	eb18 0303 	adds.w	r3, r8, r3
 80054a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80054a8:	462b      	mov	r3, r5
 80054aa:	eb49 0303 	adc.w	r3, r9, r3
 80054ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80054b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80054be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80054c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80054c6:	460b      	mov	r3, r1
 80054c8:	18db      	adds	r3, r3, r3
 80054ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80054cc:	4613      	mov	r3, r2
 80054ce:	eb42 0303 	adc.w	r3, r2, r3
 80054d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80054d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80054d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80054dc:	f7fa fee0 	bl	80002a0 <__aeabi_uldivmod>
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	4b61      	ldr	r3, [pc, #388]	@ (800566c <UART_SetConfig+0x2d4>)
 80054e6:	fba3 2302 	umull	r2, r3, r3, r2
 80054ea:	095b      	lsrs	r3, r3, #5
 80054ec:	011c      	lsls	r4, r3, #4
 80054ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054f2:	2200      	movs	r2, #0
 80054f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80054fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005500:	4642      	mov	r2, r8
 8005502:	464b      	mov	r3, r9
 8005504:	1891      	adds	r1, r2, r2
 8005506:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005508:	415b      	adcs	r3, r3
 800550a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800550c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005510:	4641      	mov	r1, r8
 8005512:	eb12 0a01 	adds.w	sl, r2, r1
 8005516:	4649      	mov	r1, r9
 8005518:	eb43 0b01 	adc.w	fp, r3, r1
 800551c:	f04f 0200 	mov.w	r2, #0
 8005520:	f04f 0300 	mov.w	r3, #0
 8005524:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005528:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800552c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005530:	4692      	mov	sl, r2
 8005532:	469b      	mov	fp, r3
 8005534:	4643      	mov	r3, r8
 8005536:	eb1a 0303 	adds.w	r3, sl, r3
 800553a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800553e:	464b      	mov	r3, r9
 8005540:	eb4b 0303 	adc.w	r3, fp, r3
 8005544:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005554:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005558:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800555c:	460b      	mov	r3, r1
 800555e:	18db      	adds	r3, r3, r3
 8005560:	643b      	str	r3, [r7, #64]	@ 0x40
 8005562:	4613      	mov	r3, r2
 8005564:	eb42 0303 	adc.w	r3, r2, r3
 8005568:	647b      	str	r3, [r7, #68]	@ 0x44
 800556a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800556e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005572:	f7fa fe95 	bl	80002a0 <__aeabi_uldivmod>
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	4611      	mov	r1, r2
 800557c:	4b3b      	ldr	r3, [pc, #236]	@ (800566c <UART_SetConfig+0x2d4>)
 800557e:	fba3 2301 	umull	r2, r3, r3, r1
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	2264      	movs	r2, #100	@ 0x64
 8005586:	fb02 f303 	mul.w	r3, r2, r3
 800558a:	1acb      	subs	r3, r1, r3
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005592:	4b36      	ldr	r3, [pc, #216]	@ (800566c <UART_SetConfig+0x2d4>)
 8005594:	fba3 2302 	umull	r2, r3, r3, r2
 8005598:	095b      	lsrs	r3, r3, #5
 800559a:	005b      	lsls	r3, r3, #1
 800559c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80055a0:	441c      	add	r4, r3
 80055a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055a6:	2200      	movs	r2, #0
 80055a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80055b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80055b4:	4642      	mov	r2, r8
 80055b6:	464b      	mov	r3, r9
 80055b8:	1891      	adds	r1, r2, r2
 80055ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80055bc:	415b      	adcs	r3, r3
 80055be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80055c4:	4641      	mov	r1, r8
 80055c6:	1851      	adds	r1, r2, r1
 80055c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80055ca:	4649      	mov	r1, r9
 80055cc:	414b      	adcs	r3, r1
 80055ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80055d0:	f04f 0200 	mov.w	r2, #0
 80055d4:	f04f 0300 	mov.w	r3, #0
 80055d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80055dc:	4659      	mov	r1, fp
 80055de:	00cb      	lsls	r3, r1, #3
 80055e0:	4651      	mov	r1, sl
 80055e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055e6:	4651      	mov	r1, sl
 80055e8:	00ca      	lsls	r2, r1, #3
 80055ea:	4610      	mov	r0, r2
 80055ec:	4619      	mov	r1, r3
 80055ee:	4603      	mov	r3, r0
 80055f0:	4642      	mov	r2, r8
 80055f2:	189b      	adds	r3, r3, r2
 80055f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055f8:	464b      	mov	r3, r9
 80055fa:	460a      	mov	r2, r1
 80055fc:	eb42 0303 	adc.w	r3, r2, r3
 8005600:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005610:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005614:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005618:	460b      	mov	r3, r1
 800561a:	18db      	adds	r3, r3, r3
 800561c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800561e:	4613      	mov	r3, r2
 8005620:	eb42 0303 	adc.w	r3, r2, r3
 8005624:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005626:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800562a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800562e:	f7fa fe37 	bl	80002a0 <__aeabi_uldivmod>
 8005632:	4602      	mov	r2, r0
 8005634:	460b      	mov	r3, r1
 8005636:	4b0d      	ldr	r3, [pc, #52]	@ (800566c <UART_SetConfig+0x2d4>)
 8005638:	fba3 1302 	umull	r1, r3, r3, r2
 800563c:	095b      	lsrs	r3, r3, #5
 800563e:	2164      	movs	r1, #100	@ 0x64
 8005640:	fb01 f303 	mul.w	r3, r1, r3
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	3332      	adds	r3, #50	@ 0x32
 800564a:	4a08      	ldr	r2, [pc, #32]	@ (800566c <UART_SetConfig+0x2d4>)
 800564c:	fba2 2303 	umull	r2, r3, r2, r3
 8005650:	095b      	lsrs	r3, r3, #5
 8005652:	f003 0207 	and.w	r2, r3, #7
 8005656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4422      	add	r2, r4
 800565e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005660:	e106      	b.n	8005870 <UART_SetConfig+0x4d8>
 8005662:	bf00      	nop
 8005664:	40011000 	.word	0x40011000
 8005668:	40011400 	.word	0x40011400
 800566c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005674:	2200      	movs	r2, #0
 8005676:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800567a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800567e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005682:	4642      	mov	r2, r8
 8005684:	464b      	mov	r3, r9
 8005686:	1891      	adds	r1, r2, r2
 8005688:	6239      	str	r1, [r7, #32]
 800568a:	415b      	adcs	r3, r3
 800568c:	627b      	str	r3, [r7, #36]	@ 0x24
 800568e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005692:	4641      	mov	r1, r8
 8005694:	1854      	adds	r4, r2, r1
 8005696:	4649      	mov	r1, r9
 8005698:	eb43 0501 	adc.w	r5, r3, r1
 800569c:	f04f 0200 	mov.w	r2, #0
 80056a0:	f04f 0300 	mov.w	r3, #0
 80056a4:	00eb      	lsls	r3, r5, #3
 80056a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056aa:	00e2      	lsls	r2, r4, #3
 80056ac:	4614      	mov	r4, r2
 80056ae:	461d      	mov	r5, r3
 80056b0:	4643      	mov	r3, r8
 80056b2:	18e3      	adds	r3, r4, r3
 80056b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80056b8:	464b      	mov	r3, r9
 80056ba:	eb45 0303 	adc.w	r3, r5, r3
 80056be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80056c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80056ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	f04f 0300 	mov.w	r3, #0
 80056da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80056de:	4629      	mov	r1, r5
 80056e0:	008b      	lsls	r3, r1, #2
 80056e2:	4621      	mov	r1, r4
 80056e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056e8:	4621      	mov	r1, r4
 80056ea:	008a      	lsls	r2, r1, #2
 80056ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80056f0:	f7fa fdd6 	bl	80002a0 <__aeabi_uldivmod>
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	4b60      	ldr	r3, [pc, #384]	@ (800587c <UART_SetConfig+0x4e4>)
 80056fa:	fba3 2302 	umull	r2, r3, r3, r2
 80056fe:	095b      	lsrs	r3, r3, #5
 8005700:	011c      	lsls	r4, r3, #4
 8005702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005706:	2200      	movs	r2, #0
 8005708:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800570c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005710:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005714:	4642      	mov	r2, r8
 8005716:	464b      	mov	r3, r9
 8005718:	1891      	adds	r1, r2, r2
 800571a:	61b9      	str	r1, [r7, #24]
 800571c:	415b      	adcs	r3, r3
 800571e:	61fb      	str	r3, [r7, #28]
 8005720:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005724:	4641      	mov	r1, r8
 8005726:	1851      	adds	r1, r2, r1
 8005728:	6139      	str	r1, [r7, #16]
 800572a:	4649      	mov	r1, r9
 800572c:	414b      	adcs	r3, r1
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	f04f 0300 	mov.w	r3, #0
 8005738:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800573c:	4659      	mov	r1, fp
 800573e:	00cb      	lsls	r3, r1, #3
 8005740:	4651      	mov	r1, sl
 8005742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005746:	4651      	mov	r1, sl
 8005748:	00ca      	lsls	r2, r1, #3
 800574a:	4610      	mov	r0, r2
 800574c:	4619      	mov	r1, r3
 800574e:	4603      	mov	r3, r0
 8005750:	4642      	mov	r2, r8
 8005752:	189b      	adds	r3, r3, r2
 8005754:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005758:	464b      	mov	r3, r9
 800575a:	460a      	mov	r2, r1
 800575c:	eb42 0303 	adc.w	r3, r2, r3
 8005760:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800576e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005770:	f04f 0200 	mov.w	r2, #0
 8005774:	f04f 0300 	mov.w	r3, #0
 8005778:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800577c:	4649      	mov	r1, r9
 800577e:	008b      	lsls	r3, r1, #2
 8005780:	4641      	mov	r1, r8
 8005782:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005786:	4641      	mov	r1, r8
 8005788:	008a      	lsls	r2, r1, #2
 800578a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800578e:	f7fa fd87 	bl	80002a0 <__aeabi_uldivmod>
 8005792:	4602      	mov	r2, r0
 8005794:	460b      	mov	r3, r1
 8005796:	4611      	mov	r1, r2
 8005798:	4b38      	ldr	r3, [pc, #224]	@ (800587c <UART_SetConfig+0x4e4>)
 800579a:	fba3 2301 	umull	r2, r3, r3, r1
 800579e:	095b      	lsrs	r3, r3, #5
 80057a0:	2264      	movs	r2, #100	@ 0x64
 80057a2:	fb02 f303 	mul.w	r3, r2, r3
 80057a6:	1acb      	subs	r3, r1, r3
 80057a8:	011b      	lsls	r3, r3, #4
 80057aa:	3332      	adds	r3, #50	@ 0x32
 80057ac:	4a33      	ldr	r2, [pc, #204]	@ (800587c <UART_SetConfig+0x4e4>)
 80057ae:	fba2 2303 	umull	r2, r3, r2, r3
 80057b2:	095b      	lsrs	r3, r3, #5
 80057b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057b8:	441c      	add	r4, r3
 80057ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057be:	2200      	movs	r2, #0
 80057c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80057c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80057c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80057c8:	4642      	mov	r2, r8
 80057ca:	464b      	mov	r3, r9
 80057cc:	1891      	adds	r1, r2, r2
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	415b      	adcs	r3, r3
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057d8:	4641      	mov	r1, r8
 80057da:	1851      	adds	r1, r2, r1
 80057dc:	6039      	str	r1, [r7, #0]
 80057de:	4649      	mov	r1, r9
 80057e0:	414b      	adcs	r3, r1
 80057e2:	607b      	str	r3, [r7, #4]
 80057e4:	f04f 0200 	mov.w	r2, #0
 80057e8:	f04f 0300 	mov.w	r3, #0
 80057ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057f0:	4659      	mov	r1, fp
 80057f2:	00cb      	lsls	r3, r1, #3
 80057f4:	4651      	mov	r1, sl
 80057f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057fa:	4651      	mov	r1, sl
 80057fc:	00ca      	lsls	r2, r1, #3
 80057fe:	4610      	mov	r0, r2
 8005800:	4619      	mov	r1, r3
 8005802:	4603      	mov	r3, r0
 8005804:	4642      	mov	r2, r8
 8005806:	189b      	adds	r3, r3, r2
 8005808:	66bb      	str	r3, [r7, #104]	@ 0x68
 800580a:	464b      	mov	r3, r9
 800580c:	460a      	mov	r2, r1
 800580e:	eb42 0303 	adc.w	r3, r2, r3
 8005812:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	663b      	str	r3, [r7, #96]	@ 0x60
 800581e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	f04f 0300 	mov.w	r3, #0
 8005828:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800582c:	4649      	mov	r1, r9
 800582e:	008b      	lsls	r3, r1, #2
 8005830:	4641      	mov	r1, r8
 8005832:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005836:	4641      	mov	r1, r8
 8005838:	008a      	lsls	r2, r1, #2
 800583a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800583e:	f7fa fd2f 	bl	80002a0 <__aeabi_uldivmod>
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	4b0d      	ldr	r3, [pc, #52]	@ (800587c <UART_SetConfig+0x4e4>)
 8005848:	fba3 1302 	umull	r1, r3, r3, r2
 800584c:	095b      	lsrs	r3, r3, #5
 800584e:	2164      	movs	r1, #100	@ 0x64
 8005850:	fb01 f303 	mul.w	r3, r1, r3
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	011b      	lsls	r3, r3, #4
 8005858:	3332      	adds	r3, #50	@ 0x32
 800585a:	4a08      	ldr	r2, [pc, #32]	@ (800587c <UART_SetConfig+0x4e4>)
 800585c:	fba2 2303 	umull	r2, r3, r2, r3
 8005860:	095b      	lsrs	r3, r3, #5
 8005862:	f003 020f 	and.w	r2, r3, #15
 8005866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4422      	add	r2, r4
 800586e:	609a      	str	r2, [r3, #8]
}
 8005870:	bf00      	nop
 8005872:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005876:	46bd      	mov	sp, r7
 8005878:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800587c:	51eb851f 	.word	0x51eb851f

08005880 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005880:	b084      	sub	sp, #16
 8005882:	b480      	push	{r7}
 8005884:	b085      	sub	sp, #20
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	f107 001c 	add.w	r0, r7, #28
 800588e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005892:	2300      	movs	r3, #0
 8005894:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005896:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005898:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800589a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800589c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800589e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80058a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80058a2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80058a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80058a6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80058a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80058aa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80058ba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	b004      	add	sp, #16
 80058d4:	4770      	bx	lr

080058d6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2203      	movs	r2, #3
 800591e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800592e:	b480      	push	{r7}
 8005930:	b083      	sub	sp, #12
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0303 	and.w	r3, r3, #3
}
 800593e:	4618      	mov	r0, r3
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800594a:	b480      	push	{r7}
 800594c:	b085      	sub	sp, #20
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005954:	2300      	movs	r3, #0
 8005956:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005968:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800596e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005974:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4313      	orrs	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005984:	f023 030f 	bic.w	r3, r3, #15
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	431a      	orrs	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	b2db      	uxtb	r3, r3
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	3314      	adds	r3, #20
 80059c6:	461a      	mov	r2, r3
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	4413      	add	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
}  
 80059d2:	4618      	mov	r0, r3
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80059de:	b480      	push	{r7}
 80059e0:	b085      	sub	sp, #20
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80059e8:	2300      	movs	r3, #0
 80059ea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005a04:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005a0a:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005a10:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	431a      	orrs	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0

}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b088      	sub	sp, #32
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
 8005a3e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005a44:	2310      	movs	r3, #16
 8005a46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a48:	2340      	movs	r3, #64	@ 0x40
 8005a4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a56:	f107 0308 	add.w	r3, r7, #8
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7ff ff74 	bl	800594a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a66:	2110      	movs	r1, #16
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 f9d7 	bl	8005e1c <SDMMC_GetCmdResp1>
 8005a6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a70:	69fb      	ldr	r3, [r7, #28]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3720      	adds	r7, #32
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b088      	sub	sp, #32
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005a88:	2311      	movs	r3, #17
 8005a8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a8c:	2340      	movs	r3, #64	@ 0x40
 8005a8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a90:	2300      	movs	r3, #0
 8005a92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a9a:	f107 0308 	add.w	r3, r7, #8
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7ff ff52 	bl	800594a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aaa:	2111      	movs	r1, #17
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 f9b5 	bl	8005e1c <SDMMC_GetCmdResp1>
 8005ab2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ab4:	69fb      	ldr	r3, [r7, #28]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3720      	adds	r7, #32
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b088      	sub	sp, #32
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005acc:	2312      	movs	r3, #18
 8005ace:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ad0:	2340      	movs	r3, #64	@ 0x40
 8005ad2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ad8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005adc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ade:	f107 0308 	add.w	r3, r7, #8
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7ff ff30 	bl	800594a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aee:	2112      	movs	r1, #18
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f993 	bl	8005e1c <SDMMC_GetCmdResp1>
 8005af6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005af8:	69fb      	ldr	r3, [r7, #28]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3720      	adds	r7, #32
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b088      	sub	sp, #32
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005b10:	2318      	movs	r3, #24
 8005b12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b14:	2340      	movs	r3, #64	@ 0x40
 8005b16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b22:	f107 0308 	add.w	r3, r7, #8
 8005b26:	4619      	mov	r1, r3
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f7ff ff0e 	bl	800594a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005b2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b32:	2118      	movs	r1, #24
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f971 	bl	8005e1c <SDMMC_GetCmdResp1>
 8005b3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b3c:	69fb      	ldr	r3, [r7, #28]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3720      	adds	r7, #32
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b088      	sub	sp, #32
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
 8005b4e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005b54:	2319      	movs	r3, #25
 8005b56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b58:	2340      	movs	r3, #64	@ 0x40
 8005b5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b66:	f107 0308 	add.w	r3, r7, #8
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7ff feec 	bl	800594a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b76:	2119      	movs	r1, #25
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f94f 	bl	8005e1c <SDMMC_GetCmdResp1>
 8005b7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b80:	69fb      	ldr	r3, [r7, #28]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3720      	adds	r7, #32
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
	...

08005b8c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b088      	sub	sp, #32
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005b94:	2300      	movs	r3, #0
 8005b96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005b98:	230c      	movs	r3, #12
 8005b9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b9c:	2340      	movs	r3, #64	@ 0x40
 8005b9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ba4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ba8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005baa:	f107 0308 	add.w	r3, r7, #8
 8005bae:	4619      	mov	r1, r3
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7ff feca 	bl	800594a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005bb6:	4a05      	ldr	r2, [pc, #20]	@ (8005bcc <SDMMC_CmdStopTransfer+0x40>)
 8005bb8:	210c      	movs	r1, #12
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f92e 	bl	8005e1c <SDMMC_GetCmdResp1>
 8005bc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005bc2:	69fb      	ldr	r3, [r7, #28]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3720      	adds	r7, #32
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	05f5e100 	.word	0x05f5e100

08005bd0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b08a      	sub	sp, #40	@ 0x28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005be0:	2307      	movs	r3, #7
 8005be2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005be4:	2340      	movs	r3, #64	@ 0x40
 8005be6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005be8:	2300      	movs	r3, #0
 8005bea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005bec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005bf0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005bf2:	f107 0310 	add.w	r3, r7, #16
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f7ff fea6 	bl	800594a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c02:	2107      	movs	r1, #7
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 f909 	bl	8005e1c <SDMMC_GetCmdResp1>
 8005c0a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3728      	adds	r7, #40	@ 0x28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b088      	sub	sp, #32
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005c22:	2300      	movs	r3, #0
 8005c24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005c26:	2300      	movs	r3, #0
 8005c28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c34:	f107 0308 	add.w	r3, r7, #8
 8005c38:	4619      	mov	r1, r3
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7ff fe85 	bl	800594a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fb23 	bl	800628c <SDMMC_GetCmdError>
 8005c46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c48:	69fb      	ldr	r3, [r7, #28]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3720      	adds	r7, #32
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b088      	sub	sp, #32
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005c5a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8005c5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005c60:	2308      	movs	r3, #8
 8005c62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c64:	2340      	movs	r3, #64	@ 0x40
 8005c66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c72:	f107 0308 	add.w	r3, r7, #8
 8005c76:	4619      	mov	r1, r3
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f7ff fe66 	bl	800594a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 fab6 	bl	80061f0 <SDMMC_GetCmdResp7>
 8005c84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c86:	69fb      	ldr	r3, [r7, #28]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3720      	adds	r7, #32
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b088      	sub	sp, #32
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005c9e:	2337      	movs	r3, #55	@ 0x37
 8005ca0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ca2:	2340      	movs	r3, #64	@ 0x40
 8005ca4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005caa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005cb0:	f107 0308 	add.w	r3, r7, #8
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7ff fe47 	bl	800594a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005cbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cc0:	2137      	movs	r1, #55	@ 0x37
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f8aa 	bl	8005e1c <SDMMC_GetCmdResp1>
 8005cc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cca:	69fb      	ldr	r3, [r7, #28]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3720      	adds	r7, #32
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b088      	sub	sp, #32
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ce4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ce8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005cea:	2329      	movs	r3, #41	@ 0x29
 8005cec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005cee:	2340      	movs	r3, #64	@ 0x40
 8005cf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005cf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cfa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005cfc:	f107 0308 	add.w	r3, r7, #8
 8005d00:	4619      	mov	r1, r3
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7ff fe21 	bl	800594a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f9bd 	bl	8006088 <SDMMC_GetCmdResp3>
 8005d0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d10:	69fb      	ldr	r3, [r7, #28]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3720      	adds	r7, #32
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b088      	sub	sp, #32
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005d26:	2302      	movs	r3, #2
 8005d28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005d2a:	23c0      	movs	r3, #192	@ 0xc0
 8005d2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d38:	f107 0308 	add.w	r3, r7, #8
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7ff fe03 	bl	800594a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f957 	bl	8005ff8 <SDMMC_GetCmdResp2>
 8005d4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d4c:	69fb      	ldr	r3, [r7, #28]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3720      	adds	r7, #32
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b088      	sub	sp, #32
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005d64:	2309      	movs	r3, #9
 8005d66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005d68:	23c0      	movs	r3, #192	@ 0xc0
 8005d6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d76:	f107 0308 	add.w	r3, r7, #8
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7ff fde4 	bl	800594a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f938 	bl	8005ff8 <SDMMC_GetCmdResp2>
 8005d88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d8a:	69fb      	ldr	r3, [r7, #28]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3720      	adds	r7, #32
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005da2:	2303      	movs	r3, #3
 8005da4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005da6:	2340      	movs	r3, #64	@ 0x40
 8005da8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005daa:	2300      	movs	r3, #0
 8005dac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005dae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005db2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005db4:	f107 0308 	add.w	r3, r7, #8
 8005db8:	4619      	mov	r1, r3
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7ff fdc5 	bl	800594a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	2103      	movs	r1, #3
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 f99d 	bl	8006104 <SDMMC_GetCmdResp6>
 8005dca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005dcc:	69fb      	ldr	r3, [r7, #28]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3720      	adds	r7, #32
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b088      	sub	sp, #32
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
 8005dde:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005de4:	230d      	movs	r3, #13
 8005de6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005de8:	2340      	movs	r3, #64	@ 0x40
 8005dea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005dec:	2300      	movs	r3, #0
 8005dee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005df0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005df4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005df6:	f107 0308 	add.w	r3, r7, #8
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7ff fda4 	bl	800594a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e06:	210d      	movs	r1, #13
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 f807 	bl	8005e1c <SDMMC_GetCmdResp1>
 8005e0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e10:	69fb      	ldr	r3, [r7, #28]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3720      	adds	r7, #32
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
	...

08005e1c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b088      	sub	sp, #32
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	460b      	mov	r3, r1
 8005e26:	607a      	str	r2, [r7, #4]
 8005e28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005e2a:	4b70      	ldr	r3, [pc, #448]	@ (8005fec <SDMMC_GetCmdResp1+0x1d0>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a70      	ldr	r2, [pc, #448]	@ (8005ff0 <SDMMC_GetCmdResp1+0x1d4>)
 8005e30:	fba2 2303 	umull	r2, r3, r2, r3
 8005e34:	0a5a      	lsrs	r2, r3, #9
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	fb02 f303 	mul.w	r3, r2, r3
 8005e3c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	1e5a      	subs	r2, r3, #1
 8005e42:	61fa      	str	r2, [r7, #28]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d102      	bne.n	8005e4e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005e48:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005e4c:	e0c9      	b.n	8005fe2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e52:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0ef      	beq.n	8005e3e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1ea      	bne.n	8005e3e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d004      	beq.n	8005e7e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2204      	movs	r2, #4
 8005e78:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005e7a:	2304      	movs	r3, #4
 8005e7c:	e0b1      	b.n	8005fe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d004      	beq.n	8005e94 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e0a6      	b.n	8005fe2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	22c5      	movs	r2, #197	@ 0xc5
 8005e98:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f7ff fd7f 	bl	800599e <SDIO_GetCommandResponse>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	7afb      	ldrb	r3, [r7, #11]
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d001      	beq.n	8005eae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e099      	b.n	8005fe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005eae:	2100      	movs	r1, #0
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f7ff fd81 	bl	80059b8 <SDIO_GetResponse>
 8005eb6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	4b4e      	ldr	r3, [pc, #312]	@ (8005ff4 <SDMMC_GetCmdResp1+0x1d8>)
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	e08d      	b.n	8005fe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	da02      	bge.n	8005ed2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005ecc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ed0:	e087      	b.n	8005fe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005edc:	2340      	movs	r3, #64	@ 0x40
 8005ede:	e080      	b.n	8005fe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005eea:	2380      	movs	r3, #128	@ 0x80
 8005eec:	e079      	b.n	8005fe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d002      	beq.n	8005efe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005ef8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005efc:	e071      	b.n	8005fe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005f08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f0c:	e069      	b.n	8005fe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d002      	beq.n	8005f1e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005f18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f1c:	e061      	b.n	8005fe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d002      	beq.n	8005f2e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005f28:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005f2c:	e059      	b.n	8005fe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d002      	beq.n	8005f3e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005f38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005f3c:	e051      	b.n	8005fe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d002      	beq.n	8005f4e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005f48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005f4c:	e049      	b.n	8005fe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005f58:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005f5c:	e041      	b.n	8005fe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d002      	beq.n	8005f6e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005f68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f6c:	e039      	b.n	8005fe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d002      	beq.n	8005f7e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005f78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005f7c:	e031      	b.n	8005fe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d002      	beq.n	8005f8e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005f88:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005f8c:	e029      	b.n	8005fe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d002      	beq.n	8005f9e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005f98:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005f9c:	e021      	b.n	8005fe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d002      	beq.n	8005fae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005fa8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005fac:	e019      	b.n	8005fe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d002      	beq.n	8005fbe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005fb8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005fbc:	e011      	b.n	8005fe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005fc8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005fcc:	e009      	b.n	8005fe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f003 0308 	and.w	r3, r3, #8
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005fd8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005fdc:	e001      	b.n	8005fe2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005fde:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3720      	adds	r7, #32
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	20000004 	.word	0x20000004
 8005ff0:	10624dd3 	.word	0x10624dd3
 8005ff4:	fdffe008 	.word	0xfdffe008

08005ff8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006000:	4b1f      	ldr	r3, [pc, #124]	@ (8006080 <SDMMC_GetCmdResp2+0x88>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a1f      	ldr	r2, [pc, #124]	@ (8006084 <SDMMC_GetCmdResp2+0x8c>)
 8006006:	fba2 2303 	umull	r2, r3, r2, r3
 800600a:	0a5b      	lsrs	r3, r3, #9
 800600c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006010:	fb02 f303 	mul.w	r3, r2, r3
 8006014:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	1e5a      	subs	r2, r3, #1
 800601a:	60fa      	str	r2, [r7, #12]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d102      	bne.n	8006026 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006020:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006024:	e026      	b.n	8006074 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800602a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006032:	2b00      	cmp	r3, #0
 8006034:	d0ef      	beq.n	8006016 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1ea      	bne.n	8006016 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006044:	f003 0304 	and.w	r3, r3, #4
 8006048:	2b00      	cmp	r3, #0
 800604a:	d004      	beq.n	8006056 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2204      	movs	r2, #4
 8006050:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006052:	2304      	movs	r3, #4
 8006054:	e00e      	b.n	8006074 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b00      	cmp	r3, #0
 8006060:	d004      	beq.n	800606c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006068:	2301      	movs	r3, #1
 800606a:	e003      	b.n	8006074 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	22c5      	movs	r2, #197	@ 0xc5
 8006070:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	20000004 	.word	0x20000004
 8006084:	10624dd3 	.word	0x10624dd3

08006088 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006090:	4b1a      	ldr	r3, [pc, #104]	@ (80060fc <SDMMC_GetCmdResp3+0x74>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a1a      	ldr	r2, [pc, #104]	@ (8006100 <SDMMC_GetCmdResp3+0x78>)
 8006096:	fba2 2303 	umull	r2, r3, r2, r3
 800609a:	0a5b      	lsrs	r3, r3, #9
 800609c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060a0:	fb02 f303 	mul.w	r3, r2, r3
 80060a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	1e5a      	subs	r2, r3, #1
 80060aa:	60fa      	str	r2, [r7, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d102      	bne.n	80060b6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80060b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80060b4:	e01b      	b.n	80060ee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0ef      	beq.n	80060a6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1ea      	bne.n	80060a6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060d4:	f003 0304 	and.w	r3, r3, #4
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d004      	beq.n	80060e6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2204      	movs	r2, #4
 80060e0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80060e2:	2304      	movs	r3, #4
 80060e4:	e003      	b.n	80060ee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	22c5      	movs	r2, #197	@ 0xc5
 80060ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	20000004 	.word	0x20000004
 8006100:	10624dd3 	.word	0x10624dd3

08006104 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b088      	sub	sp, #32
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	460b      	mov	r3, r1
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006112:	4b35      	ldr	r3, [pc, #212]	@ (80061e8 <SDMMC_GetCmdResp6+0xe4>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a35      	ldr	r2, [pc, #212]	@ (80061ec <SDMMC_GetCmdResp6+0xe8>)
 8006118:	fba2 2303 	umull	r2, r3, r2, r3
 800611c:	0a5b      	lsrs	r3, r3, #9
 800611e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006122:	fb02 f303 	mul.w	r3, r2, r3
 8006126:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	1e5a      	subs	r2, r3, #1
 800612c:	61fa      	str	r2, [r7, #28]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d102      	bne.n	8006138 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006132:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006136:	e052      	b.n	80061de <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800613c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006144:	2b00      	cmp	r3, #0
 8006146:	d0ef      	beq.n	8006128 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1ea      	bne.n	8006128 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006156:	f003 0304 	and.w	r3, r3, #4
 800615a:	2b00      	cmp	r3, #0
 800615c:	d004      	beq.n	8006168 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2204      	movs	r2, #4
 8006162:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006164:	2304      	movs	r3, #4
 8006166:	e03a      	b.n	80061de <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	2b00      	cmp	r3, #0
 8006172:	d004      	beq.n	800617e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2201      	movs	r2, #1
 8006178:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800617a:	2301      	movs	r3, #1
 800617c:	e02f      	b.n	80061de <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f7ff fc0d 	bl	800599e <SDIO_GetCommandResponse>
 8006184:	4603      	mov	r3, r0
 8006186:	461a      	mov	r2, r3
 8006188:	7afb      	ldrb	r3, [r7, #11]
 800618a:	4293      	cmp	r3, r2
 800618c:	d001      	beq.n	8006192 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800618e:	2301      	movs	r3, #1
 8006190:	e025      	b.n	80061de <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	22c5      	movs	r2, #197	@ 0xc5
 8006196:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006198:	2100      	movs	r1, #0
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f7ff fc0c 	bl	80059b8 <SDIO_GetResponse>
 80061a0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d106      	bne.n	80061ba <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	0c1b      	lsrs	r3, r3, #16
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80061b6:	2300      	movs	r3, #0
 80061b8:	e011      	b.n	80061de <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80061c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80061c8:	e009      	b.n	80061de <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d002      	beq.n	80061da <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80061d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80061d8:	e001      	b.n	80061de <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80061da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3720      	adds	r7, #32
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20000004 	.word	0x20000004
 80061ec:	10624dd3 	.word	0x10624dd3

080061f0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80061f8:	4b22      	ldr	r3, [pc, #136]	@ (8006284 <SDMMC_GetCmdResp7+0x94>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a22      	ldr	r2, [pc, #136]	@ (8006288 <SDMMC_GetCmdResp7+0x98>)
 80061fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006202:	0a5b      	lsrs	r3, r3, #9
 8006204:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006208:	fb02 f303 	mul.w	r3, r2, r3
 800620c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	1e5a      	subs	r2, r3, #1
 8006212:	60fa      	str	r2, [r7, #12]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d102      	bne.n	800621e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006218:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800621c:	e02c      	b.n	8006278 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006222:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800622a:	2b00      	cmp	r3, #0
 800622c:	d0ef      	beq.n	800620e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1ea      	bne.n	800620e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800623c:	f003 0304 	and.w	r3, r3, #4
 8006240:	2b00      	cmp	r3, #0
 8006242:	d004      	beq.n	800624e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2204      	movs	r2, #4
 8006248:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800624a:	2304      	movs	r3, #4
 800624c:	e014      	b.n	8006278 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	d004      	beq.n	8006264 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006260:	2301      	movs	r3, #1
 8006262:	e009      	b.n	8006278 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800626c:	2b00      	cmp	r3, #0
 800626e:	d002      	beq.n	8006276 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2240      	movs	r2, #64	@ 0x40
 8006274:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006276:	2300      	movs	r3, #0
  
}
 8006278:	4618      	mov	r0, r3
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	20000004 	.word	0x20000004
 8006288:	10624dd3 	.word	0x10624dd3

0800628c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006294:	4b11      	ldr	r3, [pc, #68]	@ (80062dc <SDMMC_GetCmdError+0x50>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a11      	ldr	r2, [pc, #68]	@ (80062e0 <SDMMC_GetCmdError+0x54>)
 800629a:	fba2 2303 	umull	r2, r3, r2, r3
 800629e:	0a5b      	lsrs	r3, r3, #9
 80062a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062a4:	fb02 f303 	mul.w	r3, r2, r3
 80062a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	1e5a      	subs	r2, r3, #1
 80062ae:	60fa      	str	r2, [r7, #12]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d102      	bne.n	80062ba <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80062b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80062b8:	e009      	b.n	80062ce <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d0f1      	beq.n	80062aa <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	22c5      	movs	r2, #197	@ 0xc5
 80062ca:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	20000004 	.word	0x20000004
 80062e0:	10624dd3 	.word	0x10624dd3

080062e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80062e8:	4904      	ldr	r1, [pc, #16]	@ (80062fc <MX_FATFS_Init+0x18>)
 80062ea:	4805      	ldr	r0, [pc, #20]	@ (8006300 <MX_FATFS_Init+0x1c>)
 80062ec:	f003 fa38 	bl	8009760 <FATFS_LinkDriver>
 80062f0:	4603      	mov	r3, r0
 80062f2:	461a      	mov	r2, r3
 80062f4:	4b03      	ldr	r3, [pc, #12]	@ (8006304 <MX_FATFS_Init+0x20>)
 80062f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80062f8:	bf00      	nop
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	200107fc 	.word	0x200107fc
 8006300:	0800a4b4 	.word	0x0800a4b4
 8006304:	200107f8 	.word	0x200107f8

08006308 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006308:	b480      	push	{r7}
 800630a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800630c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800630e:	4618      	mov	r0, r3
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800631e:	2300      	movs	r3, #0
 8006320:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006322:	f000 f888 	bl	8006436 <BSP_SD_IsDetected>
 8006326:	4603      	mov	r3, r0
 8006328:	2b01      	cmp	r3, #1
 800632a:	d001      	beq.n	8006330 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e005      	b.n	800633c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006330:	4804      	ldr	r0, [pc, #16]	@ (8006344 <BSP_SD_Init+0x2c>)
 8006332:	f7fc fd8d 	bl	8002e50 <HAL_SD_Init>
 8006336:	4603      	mov	r3, r0
 8006338:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800633a:	79fb      	ldrb	r3, [r7, #7]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	200105ac 	.word	0x200105ac

08006348 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006354:	2300      	movs	r3, #0
 8006356:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	68f9      	ldr	r1, [r7, #12]
 800635e:	4806      	ldr	r0, [pc, #24]	@ (8006378 <BSP_SD_ReadBlocks_DMA+0x30>)
 8006360:	f7fc fe26 	bl	8002fb0 <HAL_SD_ReadBlocks_DMA>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800636e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3718      	adds	r7, #24
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	200105ac 	.word	0x200105ac

0800637c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006388:	2300      	movs	r3, #0
 800638a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	68f9      	ldr	r1, [r7, #12]
 8006392:	4806      	ldr	r0, [pc, #24]	@ (80063ac <BSP_SD_WriteBlocks_DMA+0x30>)
 8006394:	f7fc feee 	bl	8003174 <HAL_SD_WriteBlocks_DMA>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80063a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3718      	adds	r7, #24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	200105ac 	.word	0x200105ac

080063b0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80063b4:	4805      	ldr	r0, [pc, #20]	@ (80063cc <BSP_SD_GetCardState+0x1c>)
 80063b6:	f7fd fb23 	bl	8003a00 <HAL_SD_GetCardState>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b04      	cmp	r3, #4
 80063be:	bf14      	ite	ne
 80063c0:	2301      	movne	r3, #1
 80063c2:	2300      	moveq	r3, #0
 80063c4:	b2db      	uxtb	r3, r3
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	200105ac 	.word	0x200105ac

080063d0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80063d8:	6879      	ldr	r1, [r7, #4]
 80063da:	4803      	ldr	r0, [pc, #12]	@ (80063e8 <BSP_SD_GetCardInfo+0x18>)
 80063dc:	f7fd fae4 	bl	80039a8 <HAL_SD_GetCardInfo>
}
 80063e0:	bf00      	nop
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	200105ac 	.word	0x200105ac

080063ec <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80063f4:	f000 f818 	bl	8006428 <BSP_SD_AbortCallback>
}
 80063f8:	bf00      	nop
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006408:	f000 f9a8 	bl	800675c <BSP_SD_WriteCpltCallback>
}
 800640c:	bf00      	nop
 800640e:	3708      	adds	r7, #8
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800641c:	f000 f9aa 	bl	8006774 <BSP_SD_ReadCpltCallback>
}
 8006420:	bf00      	nop
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006428:	b480      	push	{r7}
 800642a:	af00      	add	r7, sp, #0

}
 800642c:	bf00      	nop
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b082      	sub	sp, #8
 800643a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800643c:	2301      	movs	r3, #1
 800643e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8006440:	f000 f80c 	bl	800645c <BSP_PlatformIsDetected>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800644a:	2300      	movs	r3, #0
 800644c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800644e:	79fb      	ldrb	r3, [r7, #7]
 8006450:	b2db      	uxtb	r3, r3
}
 8006452:	4618      	mov	r0, r3
 8006454:	3708      	adds	r7, #8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
	...

0800645c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8006462:	2301      	movs	r3, #1
 8006464:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8006466:	2108      	movs	r1, #8
 8006468:	4806      	ldr	r0, [pc, #24]	@ (8006484 <BSP_PlatformIsDetected+0x28>)
 800646a:	f7fc f867 	bl	800253c <HAL_GPIO_ReadPin>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8006474:	2300      	movs	r3, #0
 8006476:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8006478:	79fb      	ldrb	r3, [r7, #7]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	40020000 	.word	0x40020000

08006488 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8006490:	f7fb f9f0 	bl	8001874 <HAL_GetTick>
 8006494:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8006496:	e006      	b.n	80064a6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006498:	f7ff ff8a 	bl	80063b0 <BSP_SD_GetCardState>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80064a2:	2300      	movs	r3, #0
 80064a4:	e009      	b.n	80064ba <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80064a6:	f7fb f9e5 	bl	8001874 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d8f0      	bhi.n	8006498 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80064b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
	...

080064c4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	4603      	mov	r3, r0
 80064cc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80064ce:	4b0b      	ldr	r3, [pc, #44]	@ (80064fc <SD_CheckStatus+0x38>)
 80064d0:	2201      	movs	r2, #1
 80064d2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80064d4:	f7ff ff6c 	bl	80063b0 <BSP_SD_GetCardState>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d107      	bne.n	80064ee <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80064de:	4b07      	ldr	r3, [pc, #28]	@ (80064fc <SD_CheckStatus+0x38>)
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	f023 0301 	bic.w	r3, r3, #1
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	4b04      	ldr	r3, [pc, #16]	@ (80064fc <SD_CheckStatus+0x38>)
 80064ec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80064ee:	4b03      	ldr	r3, [pc, #12]	@ (80064fc <SD_CheckStatus+0x38>)
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	b2db      	uxtb	r3, r3
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	2000000d 	.word	0x2000000d

08006500 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	4603      	mov	r3, r0
 8006508:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800650a:	f7ff ff05 	bl	8006318 <BSP_SD_Init>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d107      	bne.n	8006524 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8006514:	79fb      	ldrb	r3, [r7, #7]
 8006516:	4618      	mov	r0, r3
 8006518:	f7ff ffd4 	bl	80064c4 <SD_CheckStatus>
 800651c:	4603      	mov	r3, r0
 800651e:	461a      	mov	r2, r3
 8006520:	4b04      	ldr	r3, [pc, #16]	@ (8006534 <SD_initialize+0x34>)
 8006522:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006524:	4b03      	ldr	r3, [pc, #12]	@ (8006534 <SD_initialize+0x34>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	b2db      	uxtb	r3, r3
}
 800652a:	4618      	mov	r0, r3
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	2000000d 	.word	0x2000000d

08006538 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	4603      	mov	r3, r0
 8006540:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006542:	79fb      	ldrb	r3, [r7, #7]
 8006544:	4618      	mov	r0, r3
 8006546:	f7ff ffbd 	bl	80064c4 <SD_CheckStatus>
 800654a:	4603      	mov	r3, r0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3708      	adds	r7, #8
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	60b9      	str	r1, [r7, #8]
 800655c:	607a      	str	r2, [r7, #4]
 800655e:	603b      	str	r3, [r7, #0]
 8006560:	4603      	mov	r3, r0
 8006562:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006568:	f247 5030 	movw	r0, #30000	@ 0x7530
 800656c:	f7ff ff8c 	bl	8006488 <SD_CheckStatusWithTimeout>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	da01      	bge.n	800657a <SD_read+0x26>
  {
    return res;
 8006576:	7dfb      	ldrb	r3, [r7, #23]
 8006578:	e03b      	b.n	80065f2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800657a:	683a      	ldr	r2, [r7, #0]
 800657c:	6879      	ldr	r1, [r7, #4]
 800657e:	68b8      	ldr	r0, [r7, #8]
 8006580:	f7ff fee2 	bl	8006348 <BSP_SD_ReadBlocks_DMA>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d132      	bne.n	80065f0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800658a:	4b1c      	ldr	r3, [pc, #112]	@ (80065fc <SD_read+0xa8>)
 800658c:	2200      	movs	r2, #0
 800658e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8006590:	f7fb f970 	bl	8001874 <HAL_GetTick>
 8006594:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006596:	bf00      	nop
 8006598:	4b18      	ldr	r3, [pc, #96]	@ (80065fc <SD_read+0xa8>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d108      	bne.n	80065b2 <SD_read+0x5e>
 80065a0:	f7fb f968 	bl	8001874 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	f247 522f 	movw	r2, #29999	@ 0x752f
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d9f2      	bls.n	8006598 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80065b2:	4b12      	ldr	r3, [pc, #72]	@ (80065fc <SD_read+0xa8>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d102      	bne.n	80065c0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	75fb      	strb	r3, [r7, #23]
 80065be:	e017      	b.n	80065f0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80065c0:	4b0e      	ldr	r3, [pc, #56]	@ (80065fc <SD_read+0xa8>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80065c6:	f7fb f955 	bl	8001874 <HAL_GetTick>
 80065ca:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80065cc:	e007      	b.n	80065de <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80065ce:	f7ff feef 	bl	80063b0 <BSP_SD_GetCardState>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d102      	bne.n	80065de <SD_read+0x8a>
          {
            res = RES_OK;
 80065d8:	2300      	movs	r3, #0
 80065da:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80065dc:	e008      	b.n	80065f0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80065de:	f7fb f949 	bl	8001874 <HAL_GetTick>
 80065e2:	4602      	mov	r2, r0
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	f247 522f 	movw	r2, #29999	@ 0x752f
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d9ee      	bls.n	80065ce <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80065f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3718      	adds	r7, #24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	20010c68 	.word	0x20010c68

08006600 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
 8006606:	60b9      	str	r1, [r7, #8]
 8006608:	607a      	str	r2, [r7, #4]
 800660a:	603b      	str	r3, [r7, #0]
 800660c:	4603      	mov	r3, r0
 800660e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8006614:	4b24      	ldr	r3, [pc, #144]	@ (80066a8 <SD_write+0xa8>)
 8006616:	2200      	movs	r2, #0
 8006618:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800661a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800661e:	f7ff ff33 	bl	8006488 <SD_CheckStatusWithTimeout>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	da01      	bge.n	800662c <SD_write+0x2c>
  {
    return res;
 8006628:	7dfb      	ldrb	r3, [r7, #23]
 800662a:	e038      	b.n	800669e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	6879      	ldr	r1, [r7, #4]
 8006630:	68b8      	ldr	r0, [r7, #8]
 8006632:	f7ff fea3 	bl	800637c <BSP_SD_WriteBlocks_DMA>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d12f      	bne.n	800669c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800663c:	f7fb f91a 	bl	8001874 <HAL_GetTick>
 8006640:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006642:	bf00      	nop
 8006644:	4b18      	ldr	r3, [pc, #96]	@ (80066a8 <SD_write+0xa8>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d108      	bne.n	800665e <SD_write+0x5e>
 800664c:	f7fb f912 	bl	8001874 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	f247 522f 	movw	r2, #29999	@ 0x752f
 800665a:	4293      	cmp	r3, r2
 800665c:	d9f2      	bls.n	8006644 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800665e:	4b12      	ldr	r3, [pc, #72]	@ (80066a8 <SD_write+0xa8>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d102      	bne.n	800666c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	75fb      	strb	r3, [r7, #23]
 800666a:	e017      	b.n	800669c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800666c:	4b0e      	ldr	r3, [pc, #56]	@ (80066a8 <SD_write+0xa8>)
 800666e:	2200      	movs	r2, #0
 8006670:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006672:	f7fb f8ff 	bl	8001874 <HAL_GetTick>
 8006676:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006678:	e007      	b.n	800668a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800667a:	f7ff fe99 	bl	80063b0 <BSP_SD_GetCardState>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d102      	bne.n	800668a <SD_write+0x8a>
          {
            res = RES_OK;
 8006684:	2300      	movs	r3, #0
 8006686:	75fb      	strb	r3, [r7, #23]
            break;
 8006688:	e008      	b.n	800669c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800668a:	f7fb f8f3 	bl	8001874 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006698:	4293      	cmp	r3, r2
 800669a:	d9ee      	bls.n	800667a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800669c:	7dfb      	ldrb	r3, [r7, #23]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3718      	adds	r7, #24
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	20010c64 	.word	0x20010c64

080066ac <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08c      	sub	sp, #48	@ 0x30
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	4603      	mov	r3, r0
 80066b4:	603a      	str	r2, [r7, #0]
 80066b6:	71fb      	strb	r3, [r7, #7]
 80066b8:	460b      	mov	r3, r1
 80066ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80066c2:	4b25      	ldr	r3, [pc, #148]	@ (8006758 <SD_ioctl+0xac>)
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <SD_ioctl+0x28>
 80066d0:	2303      	movs	r3, #3
 80066d2:	e03c      	b.n	800674e <SD_ioctl+0xa2>

  switch (cmd)
 80066d4:	79bb      	ldrb	r3, [r7, #6]
 80066d6:	2b03      	cmp	r3, #3
 80066d8:	d834      	bhi.n	8006744 <SD_ioctl+0x98>
 80066da:	a201      	add	r2, pc, #4	@ (adr r2, 80066e0 <SD_ioctl+0x34>)
 80066dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e0:	080066f1 	.word	0x080066f1
 80066e4:	080066f9 	.word	0x080066f9
 80066e8:	08006711 	.word	0x08006711
 80066ec:	0800672b 	.word	0x0800672b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80066f0:	2300      	movs	r3, #0
 80066f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80066f6:	e028      	b.n	800674a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80066f8:	f107 030c 	add.w	r3, r7, #12
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7ff fe67 	bl	80063d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006708:	2300      	movs	r3, #0
 800670a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800670e:	e01c      	b.n	800674a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006710:	f107 030c 	add.w	r3, r7, #12
 8006714:	4618      	mov	r0, r3
 8006716:	f7ff fe5b 	bl	80063d0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800671a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671c:	b29a      	uxth	r2, r3
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006728:	e00f      	b.n	800674a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800672a:	f107 030c 	add.w	r3, r7, #12
 800672e:	4618      	mov	r0, r3
 8006730:	f7ff fe4e 	bl	80063d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006736:	0a5a      	lsrs	r2, r3, #9
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800673c:	2300      	movs	r3, #0
 800673e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006742:	e002      	b.n	800674a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006744:	2304      	movs	r3, #4
 8006746:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800674a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800674e:	4618      	mov	r0, r3
 8006750:	3730      	adds	r7, #48	@ 0x30
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	2000000d 	.word	0x2000000d

0800675c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800675c:	b480      	push	{r7}
 800675e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8006760:	4b03      	ldr	r3, [pc, #12]	@ (8006770 <BSP_SD_WriteCpltCallback+0x14>)
 8006762:	2201      	movs	r2, #1
 8006764:	601a      	str	r2, [r3, #0]
}
 8006766:	bf00      	nop
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	20010c64 	.word	0x20010c64

08006774 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006774:	b480      	push	{r7}
 8006776:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8006778:	4b03      	ldr	r3, [pc, #12]	@ (8006788 <BSP_SD_ReadCpltCallback+0x14>)
 800677a:	2201      	movs	r2, #1
 800677c:	601a      	str	r2, [r3, #0]
}
 800677e:	bf00      	nop
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr
 8006788:	20010c68 	.word	0x20010c68

0800678c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	4603      	mov	r3, r0
 8006794:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006796:	79fb      	ldrb	r3, [r7, #7]
 8006798:	4a08      	ldr	r2, [pc, #32]	@ (80067bc <disk_status+0x30>)
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	79fa      	ldrb	r2, [r7, #7]
 80067a4:	4905      	ldr	r1, [pc, #20]	@ (80067bc <disk_status+0x30>)
 80067a6:	440a      	add	r2, r1
 80067a8:	7a12      	ldrb	r2, [r2, #8]
 80067aa:	4610      	mov	r0, r2
 80067ac:	4798      	blx	r3
 80067ae:	4603      	mov	r3, r0
 80067b0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80067b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	20010e94 	.word	0x20010e94

080067c0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	4603      	mov	r3, r0
 80067c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80067ca:	2300      	movs	r3, #0
 80067cc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80067ce:	79fb      	ldrb	r3, [r7, #7]
 80067d0:	4a0e      	ldr	r2, [pc, #56]	@ (800680c <disk_initialize+0x4c>)
 80067d2:	5cd3      	ldrb	r3, [r2, r3]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d114      	bne.n	8006802 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80067d8:	79fb      	ldrb	r3, [r7, #7]
 80067da:	4a0c      	ldr	r2, [pc, #48]	@ (800680c <disk_initialize+0x4c>)
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	79fa      	ldrb	r2, [r7, #7]
 80067e6:	4909      	ldr	r1, [pc, #36]	@ (800680c <disk_initialize+0x4c>)
 80067e8:	440a      	add	r2, r1
 80067ea:	7a12      	ldrb	r2, [r2, #8]
 80067ec:	4610      	mov	r0, r2
 80067ee:	4798      	blx	r3
 80067f0:	4603      	mov	r3, r0
 80067f2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d103      	bne.n	8006802 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80067fa:	79fb      	ldrb	r3, [r7, #7]
 80067fc:	4a03      	ldr	r2, [pc, #12]	@ (800680c <disk_initialize+0x4c>)
 80067fe:	2101      	movs	r1, #1
 8006800:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8006802:	7bfb      	ldrb	r3, [r7, #15]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	20010e94 	.word	0x20010e94

08006810 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006810:	b590      	push	{r4, r7, lr}
 8006812:	b087      	sub	sp, #28
 8006814:	af00      	add	r7, sp, #0
 8006816:	60b9      	str	r1, [r7, #8]
 8006818:	607a      	str	r2, [r7, #4]
 800681a:	603b      	str	r3, [r7, #0]
 800681c:	4603      	mov	r3, r0
 800681e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006820:	7bfb      	ldrb	r3, [r7, #15]
 8006822:	4a0a      	ldr	r2, [pc, #40]	@ (800684c <disk_read+0x3c>)
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	689c      	ldr	r4, [r3, #8]
 800682c:	7bfb      	ldrb	r3, [r7, #15]
 800682e:	4a07      	ldr	r2, [pc, #28]	@ (800684c <disk_read+0x3c>)
 8006830:	4413      	add	r3, r2
 8006832:	7a18      	ldrb	r0, [r3, #8]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	68b9      	ldr	r1, [r7, #8]
 800683a:	47a0      	blx	r4
 800683c:	4603      	mov	r3, r0
 800683e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006840:	7dfb      	ldrb	r3, [r7, #23]
}
 8006842:	4618      	mov	r0, r3
 8006844:	371c      	adds	r7, #28
 8006846:	46bd      	mov	sp, r7
 8006848:	bd90      	pop	{r4, r7, pc}
 800684a:	bf00      	nop
 800684c:	20010e94 	.word	0x20010e94

08006850 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006850:	b590      	push	{r4, r7, lr}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	60b9      	str	r1, [r7, #8]
 8006858:	607a      	str	r2, [r7, #4]
 800685a:	603b      	str	r3, [r7, #0]
 800685c:	4603      	mov	r3, r0
 800685e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006860:	7bfb      	ldrb	r3, [r7, #15]
 8006862:	4a0a      	ldr	r2, [pc, #40]	@ (800688c <disk_write+0x3c>)
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	68dc      	ldr	r4, [r3, #12]
 800686c:	7bfb      	ldrb	r3, [r7, #15]
 800686e:	4a07      	ldr	r2, [pc, #28]	@ (800688c <disk_write+0x3c>)
 8006870:	4413      	add	r3, r2
 8006872:	7a18      	ldrb	r0, [r3, #8]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	68b9      	ldr	r1, [r7, #8]
 800687a:	47a0      	blx	r4
 800687c:	4603      	mov	r3, r0
 800687e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006880:	7dfb      	ldrb	r3, [r7, #23]
}
 8006882:	4618      	mov	r0, r3
 8006884:	371c      	adds	r7, #28
 8006886:	46bd      	mov	sp, r7
 8006888:	bd90      	pop	{r4, r7, pc}
 800688a:	bf00      	nop
 800688c:	20010e94 	.word	0x20010e94

08006890 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	4603      	mov	r3, r0
 8006898:	603a      	str	r2, [r7, #0]
 800689a:	71fb      	strb	r3, [r7, #7]
 800689c:	460b      	mov	r3, r1
 800689e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80068a0:	79fb      	ldrb	r3, [r7, #7]
 80068a2:	4a09      	ldr	r2, [pc, #36]	@ (80068c8 <disk_ioctl+0x38>)
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	79fa      	ldrb	r2, [r7, #7]
 80068ae:	4906      	ldr	r1, [pc, #24]	@ (80068c8 <disk_ioctl+0x38>)
 80068b0:	440a      	add	r2, r1
 80068b2:	7a10      	ldrb	r0, [r2, #8]
 80068b4:	79b9      	ldrb	r1, [r7, #6]
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	4798      	blx	r3
 80068ba:	4603      	mov	r3, r0
 80068bc:	73fb      	strb	r3, [r7, #15]
  return res;
 80068be:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	20010e94 	.word	0x20010e94

080068cc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	3301      	adds	r3, #1
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80068dc:	89fb      	ldrh	r3, [r7, #14]
 80068de:	021b      	lsls	r3, r3, #8
 80068e0:	b21a      	sxth	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	b21b      	sxth	r3, r3
 80068e8:	4313      	orrs	r3, r2
 80068ea:	b21b      	sxth	r3, r3
 80068ec:	81fb      	strh	r3, [r7, #14]
	return rv;
 80068ee:	89fb      	ldrh	r3, [r7, #14]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3714      	adds	r7, #20
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	3303      	adds	r3, #3
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	021b      	lsls	r3, r3, #8
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	3202      	adds	r2, #2
 8006914:	7812      	ldrb	r2, [r2, #0]
 8006916:	4313      	orrs	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	021b      	lsls	r3, r3, #8
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	3201      	adds	r2, #1
 8006922:	7812      	ldrb	r2, [r2, #0]
 8006924:	4313      	orrs	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	021b      	lsls	r3, r3, #8
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	7812      	ldrb	r2, [r2, #0]
 8006930:	4313      	orrs	r3, r2
 8006932:	60fb      	str	r3, [r7, #12]
	return rv;
 8006934:	68fb      	ldr	r3, [r7, #12]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr

08006942 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006942:	b480      	push	{r7}
 8006944:	b083      	sub	sp, #12
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	460b      	mov	r3, r1
 800694c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	1c5a      	adds	r2, r3, #1
 8006952:	607a      	str	r2, [r7, #4]
 8006954:	887a      	ldrh	r2, [r7, #2]
 8006956:	b2d2      	uxtb	r2, r2
 8006958:	701a      	strb	r2, [r3, #0]
 800695a:	887b      	ldrh	r3, [r7, #2]
 800695c:	0a1b      	lsrs	r3, r3, #8
 800695e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	1c5a      	adds	r2, r3, #1
 8006964:	607a      	str	r2, [r7, #4]
 8006966:	887a      	ldrh	r2, [r7, #2]
 8006968:	b2d2      	uxtb	r2, r2
 800696a:	701a      	strb	r2, [r3, #0]
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	1c5a      	adds	r2, r3, #1
 8006986:	607a      	str	r2, [r7, #4]
 8006988:	683a      	ldr	r2, [r7, #0]
 800698a:	b2d2      	uxtb	r2, r2
 800698c:	701a      	strb	r2, [r3, #0]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	0a1b      	lsrs	r3, r3, #8
 8006992:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	1c5a      	adds	r2, r3, #1
 8006998:	607a      	str	r2, [r7, #4]
 800699a:	683a      	ldr	r2, [r7, #0]
 800699c:	b2d2      	uxtb	r2, r2
 800699e:	701a      	strb	r2, [r3, #0]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	0a1b      	lsrs	r3, r3, #8
 80069a4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	1c5a      	adds	r2, r3, #1
 80069aa:	607a      	str	r2, [r7, #4]
 80069ac:	683a      	ldr	r2, [r7, #0]
 80069ae:	b2d2      	uxtb	r2, r2
 80069b0:	701a      	strb	r2, [r3, #0]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	0a1b      	lsrs	r3, r3, #8
 80069b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	1c5a      	adds	r2, r3, #1
 80069bc:	607a      	str	r2, [r7, #4]
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	b2d2      	uxtb	r2, r2
 80069c2:	701a      	strb	r2, [r3, #0]
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00d      	beq.n	8006a06 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	1c53      	adds	r3, r2, #1
 80069ee:	613b      	str	r3, [r7, #16]
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	1c59      	adds	r1, r3, #1
 80069f4:	6179      	str	r1, [r7, #20]
 80069f6:	7812      	ldrb	r2, [r2, #0]
 80069f8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	3b01      	subs	r3, #1
 80069fe:	607b      	str	r3, [r7, #4]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1f1      	bne.n	80069ea <mem_cpy+0x1a>
	}
}
 8006a06:	bf00      	nop
 8006a08:	371c      	adds	r7, #28
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006a12:	b480      	push	{r7}
 8006a14:	b087      	sub	sp, #28
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	60f8      	str	r0, [r7, #12]
 8006a1a:	60b9      	str	r1, [r7, #8]
 8006a1c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	1c5a      	adds	r2, r3, #1
 8006a26:	617a      	str	r2, [r7, #20]
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	b2d2      	uxtb	r2, r2
 8006a2c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	3b01      	subs	r3, #1
 8006a32:	607b      	str	r3, [r7, #4]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1f3      	bne.n	8006a22 <mem_set+0x10>
}
 8006a3a:	bf00      	nop
 8006a3c:	bf00      	nop
 8006a3e:	371c      	adds	r7, #28
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006a48:	b480      	push	{r7}
 8006a4a:	b089      	sub	sp, #36	@ 0x24
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	61fb      	str	r3, [r7, #28]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	1c5a      	adds	r2, r3, #1
 8006a64:	61fa      	str	r2, [r7, #28]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	4619      	mov	r1, r3
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	1c5a      	adds	r2, r3, #1
 8006a6e:	61ba      	str	r2, [r7, #24]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	1acb      	subs	r3, r1, r3
 8006a74:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	607b      	str	r3, [r7, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d002      	beq.n	8006a88 <mem_cmp+0x40>
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d0eb      	beq.n	8006a60 <mem_cmp+0x18>

	return r;
 8006a88:	697b      	ldr	r3, [r7, #20]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3724      	adds	r7, #36	@ 0x24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006a96:	b480      	push	{r7}
 8006a98:	b083      	sub	sp, #12
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006aa0:	e002      	b.n	8006aa8 <chk_chr+0x12>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	607b      	str	r3, [r7, #4]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d005      	beq.n	8006abc <chk_chr+0x26>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d1f2      	bne.n	8006aa2 <chk_chr+0xc>
	return *str;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	781b      	ldrb	r3, [r3, #0]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	60bb      	str	r3, [r7, #8]
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	e029      	b.n	8006b34 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006ae0:	4a27      	ldr	r2, [pc, #156]	@ (8006b80 <chk_lock+0xb4>)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	011b      	lsls	r3, r3, #4
 8006ae6:	4413      	add	r3, r2
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d01d      	beq.n	8006b2a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006aee:	4a24      	ldr	r2, [pc, #144]	@ (8006b80 <chk_lock+0xb4>)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	011b      	lsls	r3, r3, #4
 8006af4:	4413      	add	r3, r2
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d116      	bne.n	8006b2e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006b00:	4a1f      	ldr	r2, [pc, #124]	@ (8006b80 <chk_lock+0xb4>)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	011b      	lsls	r3, r3, #4
 8006b06:	4413      	add	r3, r2
 8006b08:	3304      	adds	r3, #4
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d10c      	bne.n	8006b2e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006b14:	4a1a      	ldr	r2, [pc, #104]	@ (8006b80 <chk_lock+0xb4>)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	011b      	lsls	r3, r3, #4
 8006b1a:	4413      	add	r3, r2
 8006b1c:	3308      	adds	r3, #8
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d102      	bne.n	8006b2e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006b28:	e007      	b.n	8006b3a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	3301      	adds	r3, #1
 8006b32:	60fb      	str	r3, [r7, #12]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d9d2      	bls.n	8006ae0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d109      	bne.n	8006b54 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d102      	bne.n	8006b4c <chk_lock+0x80>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d101      	bne.n	8006b50 <chk_lock+0x84>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	e010      	b.n	8006b72 <chk_lock+0xa6>
 8006b50:	2312      	movs	r3, #18
 8006b52:	e00e      	b.n	8006b72 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d108      	bne.n	8006b6c <chk_lock+0xa0>
 8006b5a:	4a09      	ldr	r2, [pc, #36]	@ (8006b80 <chk_lock+0xb4>)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	011b      	lsls	r3, r3, #4
 8006b60:	4413      	add	r3, r2
 8006b62:	330c      	adds	r3, #12
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b6a:	d101      	bne.n	8006b70 <chk_lock+0xa4>
 8006b6c:	2310      	movs	r3, #16
 8006b6e:	e000      	b.n	8006b72 <chk_lock+0xa6>
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	20010c74 	.word	0x20010c74

08006b84 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	607b      	str	r3, [r7, #4]
 8006b8e:	e002      	b.n	8006b96 <enq_lock+0x12>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	3301      	adds	r3, #1
 8006b94:	607b      	str	r3, [r7, #4]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d806      	bhi.n	8006baa <enq_lock+0x26>
 8006b9c:	4a09      	ldr	r2, [pc, #36]	@ (8006bc4 <enq_lock+0x40>)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	011b      	lsls	r3, r3, #4
 8006ba2:	4413      	add	r3, r2
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1f2      	bne.n	8006b90 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	bf14      	ite	ne
 8006bb0:	2301      	movne	r3, #1
 8006bb2:	2300      	moveq	r3, #0
 8006bb4:	b2db      	uxtb	r3, r3
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	20010c74 	.word	0x20010c74

08006bc8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60fb      	str	r3, [r7, #12]
 8006bd6:	e01f      	b.n	8006c18 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006bd8:	4a41      	ldr	r2, [pc, #260]	@ (8006ce0 <inc_lock+0x118>)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	011b      	lsls	r3, r3, #4
 8006bde:	4413      	add	r3, r2
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d113      	bne.n	8006c12 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006bea:	4a3d      	ldr	r2, [pc, #244]	@ (8006ce0 <inc_lock+0x118>)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	011b      	lsls	r3, r3, #4
 8006bf0:	4413      	add	r3, r2
 8006bf2:	3304      	adds	r3, #4
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d109      	bne.n	8006c12 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006bfe:	4a38      	ldr	r2, [pc, #224]	@ (8006ce0 <inc_lock+0x118>)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	4413      	add	r3, r2
 8006c06:	3308      	adds	r3, #8
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d006      	beq.n	8006c20 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	3301      	adds	r3, #1
 8006c16:	60fb      	str	r3, [r7, #12]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d9dc      	bls.n	8006bd8 <inc_lock+0x10>
 8006c1e:	e000      	b.n	8006c22 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006c20:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d132      	bne.n	8006c8e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60fb      	str	r3, [r7, #12]
 8006c2c:	e002      	b.n	8006c34 <inc_lock+0x6c>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	3301      	adds	r3, #1
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d806      	bhi.n	8006c48 <inc_lock+0x80>
 8006c3a:	4a29      	ldr	r2, [pc, #164]	@ (8006ce0 <inc_lock+0x118>)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	011b      	lsls	r3, r3, #4
 8006c40:	4413      	add	r3, r2
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1f2      	bne.n	8006c2e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d101      	bne.n	8006c52 <inc_lock+0x8a>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	e040      	b.n	8006cd4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	4922      	ldr	r1, [pc, #136]	@ (8006ce0 <inc_lock+0x118>)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	011b      	lsls	r3, r3, #4
 8006c5c:	440b      	add	r3, r1
 8006c5e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	491e      	ldr	r1, [pc, #120]	@ (8006ce0 <inc_lock+0x118>)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	011b      	lsls	r3, r3, #4
 8006c6a:	440b      	add	r3, r1
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	695a      	ldr	r2, [r3, #20]
 8006c74:	491a      	ldr	r1, [pc, #104]	@ (8006ce0 <inc_lock+0x118>)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	011b      	lsls	r3, r3, #4
 8006c7a:	440b      	add	r3, r1
 8006c7c:	3308      	adds	r3, #8
 8006c7e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006c80:	4a17      	ldr	r2, [pc, #92]	@ (8006ce0 <inc_lock+0x118>)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	011b      	lsls	r3, r3, #4
 8006c86:	4413      	add	r3, r2
 8006c88:	330c      	adds	r3, #12
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d009      	beq.n	8006ca8 <inc_lock+0xe0>
 8006c94:	4a12      	ldr	r2, [pc, #72]	@ (8006ce0 <inc_lock+0x118>)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	011b      	lsls	r3, r3, #4
 8006c9a:	4413      	add	r3, r2
 8006c9c:	330c      	adds	r3, #12
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <inc_lock+0xe0>
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	e015      	b.n	8006cd4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d108      	bne.n	8006cc0 <inc_lock+0xf8>
 8006cae:	4a0c      	ldr	r2, [pc, #48]	@ (8006ce0 <inc_lock+0x118>)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	011b      	lsls	r3, r3, #4
 8006cb4:	4413      	add	r3, r2
 8006cb6:	330c      	adds	r3, #12
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	e001      	b.n	8006cc4 <inc_lock+0xfc>
 8006cc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006cc4:	4906      	ldr	r1, [pc, #24]	@ (8006ce0 <inc_lock+0x118>)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	011b      	lsls	r3, r3, #4
 8006cca:	440b      	add	r3, r1
 8006ccc:	330c      	adds	r3, #12
 8006cce:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	3301      	adds	r3, #1
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3714      	adds	r7, #20
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr
 8006ce0:	20010c74 	.word	0x20010c74

08006ce4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	607b      	str	r3, [r7, #4]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d825      	bhi.n	8006d44 <dec_lock+0x60>
		n = Files[i].ctr;
 8006cf8:	4a17      	ldr	r2, [pc, #92]	@ (8006d58 <dec_lock+0x74>)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	011b      	lsls	r3, r3, #4
 8006cfe:	4413      	add	r3, r2
 8006d00:	330c      	adds	r3, #12
 8006d02:	881b      	ldrh	r3, [r3, #0]
 8006d04:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006d06:	89fb      	ldrh	r3, [r7, #14]
 8006d08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d0c:	d101      	bne.n	8006d12 <dec_lock+0x2e>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006d12:	89fb      	ldrh	r3, [r7, #14]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d002      	beq.n	8006d1e <dec_lock+0x3a>
 8006d18:	89fb      	ldrh	r3, [r7, #14]
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8006d58 <dec_lock+0x74>)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	011b      	lsls	r3, r3, #4
 8006d24:	4413      	add	r3, r2
 8006d26:	330c      	adds	r3, #12
 8006d28:	89fa      	ldrh	r2, [r7, #14]
 8006d2a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006d2c:	89fb      	ldrh	r3, [r7, #14]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d105      	bne.n	8006d3e <dec_lock+0x5a>
 8006d32:	4a09      	ldr	r2, [pc, #36]	@ (8006d58 <dec_lock+0x74>)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	011b      	lsls	r3, r3, #4
 8006d38:	4413      	add	r3, r2
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	737b      	strb	r3, [r7, #13]
 8006d42:	e001      	b.n	8006d48 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006d44:	2302      	movs	r3, #2
 8006d46:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006d48:	7b7b      	ldrb	r3, [r7, #13]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3714      	adds	r7, #20
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	20010c74 	.word	0x20010c74

08006d5c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006d64:	2300      	movs	r3, #0
 8006d66:	60fb      	str	r3, [r7, #12]
 8006d68:	e010      	b.n	8006d8c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006d6a:	4a0d      	ldr	r2, [pc, #52]	@ (8006da0 <clear_lock+0x44>)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	011b      	lsls	r3, r3, #4
 8006d70:	4413      	add	r3, r2
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d105      	bne.n	8006d86 <clear_lock+0x2a>
 8006d7a:	4a09      	ldr	r2, [pc, #36]	@ (8006da0 <clear_lock+0x44>)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	011b      	lsls	r3, r3, #4
 8006d80:	4413      	add	r3, r2
 8006d82:	2200      	movs	r2, #0
 8006d84:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d9eb      	bls.n	8006d6a <clear_lock+0xe>
	}
}
 8006d92:	bf00      	nop
 8006d94:	bf00      	nop
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	20010c74 	.word	0x20010c74

08006da4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	78db      	ldrb	r3, [r3, #3]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d034      	beq.n	8006e22 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dbc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	7858      	ldrb	r0, [r3, #1]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006dc8:	2301      	movs	r3, #1
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	f7ff fd40 	bl	8006850 <disk_write>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d002      	beq.n	8006ddc <sync_window+0x38>
			res = FR_DISK_ERR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	73fb      	strb	r3, [r7, #15]
 8006dda:	e022      	b.n	8006e22 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	1ad2      	subs	r2, r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d217      	bcs.n	8006e22 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	789b      	ldrb	r3, [r3, #2]
 8006df6:	613b      	str	r3, [r7, #16]
 8006df8:	e010      	b.n	8006e1c <sync_window+0x78>
					wsect += fs->fsize;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	4413      	add	r3, r2
 8006e02:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	7858      	ldrb	r0, [r3, #1]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006e0e:	2301      	movs	r3, #1
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	f7ff fd1d 	bl	8006850 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	613b      	str	r3, [r7, #16]
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d8eb      	bhi.n	8006dfa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3718      	adds	r7, #24
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d01b      	beq.n	8006e7c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f7ff ffad 	bl	8006da4 <sync_window>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006e4e:	7bfb      	ldrb	r3, [r7, #15]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d113      	bne.n	8006e7c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	7858      	ldrb	r0, [r3, #1]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006e5e:	2301      	movs	r3, #1
 8006e60:	683a      	ldr	r2, [r7, #0]
 8006e62:	f7ff fcd5 	bl	8006810 <disk_read>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d004      	beq.n	8006e76 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e70:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
	...

08006e88 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7ff ff87 	bl	8006da4 <sync_window>
 8006e96:	4603      	mov	r3, r0
 8006e98:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006e9a:	7bfb      	ldrb	r3, [r7, #15]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d158      	bne.n	8006f52 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	2b03      	cmp	r3, #3
 8006ea6:	d148      	bne.n	8006f3a <sync_fs+0xb2>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	791b      	ldrb	r3, [r3, #4]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d144      	bne.n	8006f3a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	3334      	adds	r3, #52	@ 0x34
 8006eb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006eb8:	2100      	movs	r1, #0
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7ff fda9 	bl	8006a12 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	3334      	adds	r3, #52	@ 0x34
 8006ec4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006ec8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7ff fd38 	bl	8006942 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	3334      	adds	r3, #52	@ 0x34
 8006ed6:	4921      	ldr	r1, [pc, #132]	@ (8006f5c <sync_fs+0xd4>)
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7ff fd4d 	bl	8006978 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	3334      	adds	r3, #52	@ 0x34
 8006ee2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006ee6:	491e      	ldr	r1, [pc, #120]	@ (8006f60 <sync_fs+0xd8>)
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7ff fd45 	bl	8006978 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	3334      	adds	r3, #52	@ 0x34
 8006ef2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	4619      	mov	r1, r3
 8006efc:	4610      	mov	r0, r2
 8006efe:	f7ff fd3b 	bl	8006978 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	3334      	adds	r3, #52	@ 0x34
 8006f06:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	4619      	mov	r1, r3
 8006f10:	4610      	mov	r0, r2
 8006f12:	f7ff fd31 	bl	8006978 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	1c5a      	adds	r2, r3, #1
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	7858      	ldrb	r0, [r3, #1]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f2e:	2301      	movs	r3, #1
 8006f30:	f7ff fc8e 	bl	8006850 <disk_write>
			fs->fsi_flag = 0;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	785b      	ldrb	r3, [r3, #1]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	2100      	movs	r1, #0
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7ff fca4 	bl	8006890 <disk_ioctl>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <sync_fs+0xca>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	41615252 	.word	0x41615252
 8006f60:	61417272 	.word	0x61417272

08006f64 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	3b02      	subs	r3, #2
 8006f72:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	3b02      	subs	r3, #2
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d301      	bcc.n	8006f84 <clust2sect+0x20>
 8006f80:	2300      	movs	r3, #0
 8006f82:	e008      	b.n	8006f96 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	895b      	ldrh	r3, [r3, #10]
 8006f88:	461a      	mov	r2, r3
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	fb03 f202 	mul.w	r2, r3, r2
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f94:	4413      	add	r3, r2
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b086      	sub	sp, #24
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d904      	bls.n	8006fc2 <get_fat+0x20>
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	683a      	ldr	r2, [r7, #0]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d302      	bcc.n	8006fc8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	617b      	str	r3, [r7, #20]
 8006fc6:	e08e      	b.n	80070e6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8006fcc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	2b03      	cmp	r3, #3
 8006fd4:	d061      	beq.n	800709a <get_fat+0xf8>
 8006fd6:	2b03      	cmp	r3, #3
 8006fd8:	dc7b      	bgt.n	80070d2 <get_fat+0x130>
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d002      	beq.n	8006fe4 <get_fat+0x42>
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d041      	beq.n	8007066 <get_fat+0xc4>
 8006fe2:	e076      	b.n	80070d2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	60fb      	str	r3, [r7, #12]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	085b      	lsrs	r3, r3, #1
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	4413      	add	r3, r2
 8006ff0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	0a5b      	lsrs	r3, r3, #9
 8006ffa:	4413      	add	r3, r2
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	6938      	ldr	r0, [r7, #16]
 8007000:	f7ff ff14 	bl	8006e2c <move_window>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d166      	bne.n	80070d8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	1c5a      	adds	r2, r3, #1
 800700e:	60fa      	str	r2, [r7, #12]
 8007010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	4413      	add	r3, r2
 8007018:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800701c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	0a5b      	lsrs	r3, r3, #9
 8007026:	4413      	add	r3, r2
 8007028:	4619      	mov	r1, r3
 800702a:	6938      	ldr	r0, [r7, #16]
 800702c:	f7ff fefe 	bl	8006e2c <move_window>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d152      	bne.n	80070dc <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	4413      	add	r3, r2
 8007040:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007044:	021b      	lsls	r3, r3, #8
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	4313      	orrs	r3, r2
 800704a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	2b00      	cmp	r3, #0
 8007054:	d002      	beq.n	800705c <get_fat+0xba>
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	091b      	lsrs	r3, r3, #4
 800705a:	e002      	b.n	8007062 <get_fat+0xc0>
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007062:	617b      	str	r3, [r7, #20]
			break;
 8007064:	e03f      	b.n	80070e6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	0a1b      	lsrs	r3, r3, #8
 800706e:	4413      	add	r3, r2
 8007070:	4619      	mov	r1, r3
 8007072:	6938      	ldr	r0, [r7, #16]
 8007074:	f7ff feda 	bl	8006e2c <move_window>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d130      	bne.n	80070e0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	005b      	lsls	r3, r3, #1
 8007088:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800708c:	4413      	add	r3, r2
 800708e:	4618      	mov	r0, r3
 8007090:	f7ff fc1c 	bl	80068cc <ld_word>
 8007094:	4603      	mov	r3, r0
 8007096:	617b      	str	r3, [r7, #20]
			break;
 8007098:	e025      	b.n	80070e6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	09db      	lsrs	r3, r3, #7
 80070a2:	4413      	add	r3, r2
 80070a4:	4619      	mov	r1, r3
 80070a6:	6938      	ldr	r0, [r7, #16]
 80070a8:	f7ff fec0 	bl	8006e2c <move_window>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d118      	bne.n	80070e4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80070c0:	4413      	add	r3, r2
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7ff fc1a 	bl	80068fc <ld_dword>
 80070c8:	4603      	mov	r3, r0
 80070ca:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80070ce:	617b      	str	r3, [r7, #20]
			break;
 80070d0:	e009      	b.n	80070e6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80070d2:	2301      	movs	r3, #1
 80070d4:	617b      	str	r3, [r7, #20]
 80070d6:	e006      	b.n	80070e6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80070d8:	bf00      	nop
 80070da:	e004      	b.n	80070e6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80070dc:	bf00      	nop
 80070de:	e002      	b.n	80070e6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80070e0:	bf00      	nop
 80070e2:	e000      	b.n	80070e6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80070e4:	bf00      	nop
		}
	}

	return val;
 80070e6:	697b      	ldr	r3, [r7, #20]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3718      	adds	r7, #24
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80070f0:	b590      	push	{r4, r7, lr}
 80070f2:	b089      	sub	sp, #36	@ 0x24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80070fc:	2302      	movs	r3, #2
 80070fe:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	2b01      	cmp	r3, #1
 8007104:	f240 80d9 	bls.w	80072ba <put_fat+0x1ca>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	429a      	cmp	r2, r3
 8007110:	f080 80d3 	bcs.w	80072ba <put_fat+0x1ca>
		switch (fs->fs_type) {
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	2b03      	cmp	r3, #3
 800711a:	f000 8096 	beq.w	800724a <put_fat+0x15a>
 800711e:	2b03      	cmp	r3, #3
 8007120:	f300 80cb 	bgt.w	80072ba <put_fat+0x1ca>
 8007124:	2b01      	cmp	r3, #1
 8007126:	d002      	beq.n	800712e <put_fat+0x3e>
 8007128:	2b02      	cmp	r3, #2
 800712a:	d06e      	beq.n	800720a <put_fat+0x11a>
 800712c:	e0c5      	b.n	80072ba <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	61bb      	str	r3, [r7, #24]
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	085b      	lsrs	r3, r3, #1
 8007136:	69ba      	ldr	r2, [r7, #24]
 8007138:	4413      	add	r3, r2
 800713a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	0a5b      	lsrs	r3, r3, #9
 8007144:	4413      	add	r3, r2
 8007146:	4619      	mov	r1, r3
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f7ff fe6f 	bl	8006e2c <move_window>
 800714e:	4603      	mov	r3, r0
 8007150:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007152:	7ffb      	ldrb	r3, [r7, #31]
 8007154:	2b00      	cmp	r3, #0
 8007156:	f040 80a9 	bne.w	80072ac <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	1c59      	adds	r1, r3, #1
 8007164:	61b9      	str	r1, [r7, #24]
 8007166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800716a:	4413      	add	r3, r2
 800716c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00d      	beq.n	8007194 <put_fat+0xa4>
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	b25b      	sxtb	r3, r3
 800717e:	f003 030f 	and.w	r3, r3, #15
 8007182:	b25a      	sxtb	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	b2db      	uxtb	r3, r3
 8007188:	011b      	lsls	r3, r3, #4
 800718a:	b25b      	sxtb	r3, r3
 800718c:	4313      	orrs	r3, r2
 800718e:	b25b      	sxtb	r3, r3
 8007190:	b2db      	uxtb	r3, r3
 8007192:	e001      	b.n	8007198 <put_fat+0xa8>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	b2db      	uxtb	r3, r3
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2201      	movs	r2, #1
 80071a0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	0a5b      	lsrs	r3, r3, #9
 80071aa:	4413      	add	r3, r2
 80071ac:	4619      	mov	r1, r3
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f7ff fe3c 	bl	8006e2c <move_window>
 80071b4:	4603      	mov	r3, r0
 80071b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80071b8:	7ffb      	ldrb	r3, [r7, #31]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d178      	bne.n	80072b0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ca:	4413      	add	r3, r2
 80071cc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d003      	beq.n	80071e0 <put_fat+0xf0>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	091b      	lsrs	r3, r3, #4
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	e00e      	b.n	80071fe <put_fat+0x10e>
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	b25b      	sxtb	r3, r3
 80071e6:	f023 030f 	bic.w	r3, r3, #15
 80071ea:	b25a      	sxtb	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	0a1b      	lsrs	r3, r3, #8
 80071f0:	b25b      	sxtb	r3, r3
 80071f2:	f003 030f 	and.w	r3, r3, #15
 80071f6:	b25b      	sxtb	r3, r3
 80071f8:	4313      	orrs	r3, r2
 80071fa:	b25b      	sxtb	r3, r3
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2201      	movs	r2, #1
 8007206:	70da      	strb	r2, [r3, #3]
			break;
 8007208:	e057      	b.n	80072ba <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	0a1b      	lsrs	r3, r3, #8
 8007212:	4413      	add	r3, r2
 8007214:	4619      	mov	r1, r3
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f7ff fe08 	bl	8006e2c <move_window>
 800721c:	4603      	mov	r3, r0
 800721e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007220:	7ffb      	ldrb	r3, [r7, #31]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d146      	bne.n	80072b4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	005b      	lsls	r3, r3, #1
 8007230:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007234:	4413      	add	r3, r2
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	b292      	uxth	r2, r2
 800723a:	4611      	mov	r1, r2
 800723c:	4618      	mov	r0, r3
 800723e:	f7ff fb80 	bl	8006942 <st_word>
			fs->wflag = 1;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2201      	movs	r2, #1
 8007246:	70da      	strb	r2, [r3, #3]
			break;
 8007248:	e037      	b.n	80072ba <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	09db      	lsrs	r3, r3, #7
 8007252:	4413      	add	r3, r2
 8007254:	4619      	mov	r1, r3
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f7ff fde8 	bl	8006e2c <move_window>
 800725c:	4603      	mov	r3, r0
 800725e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007260:	7ffb      	ldrb	r3, [r7, #31]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d128      	bne.n	80072b8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800727a:	4413      	add	r3, r2
 800727c:	4618      	mov	r0, r3
 800727e:	f7ff fb3d 	bl	80068fc <ld_dword>
 8007282:	4603      	mov	r3, r0
 8007284:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007288:	4323      	orrs	r3, r4
 800728a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800729a:	4413      	add	r3, r2
 800729c:	6879      	ldr	r1, [r7, #4]
 800729e:	4618      	mov	r0, r3
 80072a0:	f7ff fb6a 	bl	8006978 <st_dword>
			fs->wflag = 1;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2201      	movs	r2, #1
 80072a8:	70da      	strb	r2, [r3, #3]
			break;
 80072aa:	e006      	b.n	80072ba <put_fat+0x1ca>
			if (res != FR_OK) break;
 80072ac:	bf00      	nop
 80072ae:	e004      	b.n	80072ba <put_fat+0x1ca>
			if (res != FR_OK) break;
 80072b0:	bf00      	nop
 80072b2:	e002      	b.n	80072ba <put_fat+0x1ca>
			if (res != FR_OK) break;
 80072b4:	bf00      	nop
 80072b6:	e000      	b.n	80072ba <put_fat+0x1ca>
			if (res != FR_OK) break;
 80072b8:	bf00      	nop
		}
	}
	return res;
 80072ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3724      	adds	r7, #36	@ 0x24
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd90      	pop	{r4, r7, pc}

080072c4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b088      	sub	sp, #32
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d904      	bls.n	80072ea <remove_chain+0x26>
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d301      	bcc.n	80072ee <remove_chain+0x2a>
 80072ea:	2302      	movs	r3, #2
 80072ec:	e04b      	b.n	8007386 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00c      	beq.n	800730e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80072f4:	f04f 32ff 	mov.w	r2, #4294967295
 80072f8:	6879      	ldr	r1, [r7, #4]
 80072fa:	69b8      	ldr	r0, [r7, #24]
 80072fc:	f7ff fef8 	bl	80070f0 <put_fat>
 8007300:	4603      	mov	r3, r0
 8007302:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007304:	7ffb      	ldrb	r3, [r7, #31]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <remove_chain+0x4a>
 800730a:	7ffb      	ldrb	r3, [r7, #31]
 800730c:	e03b      	b.n	8007386 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800730e:	68b9      	ldr	r1, [r7, #8]
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f7ff fe46 	bl	8006fa2 <get_fat>
 8007316:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d031      	beq.n	8007382 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d101      	bne.n	8007328 <remove_chain+0x64>
 8007324:	2302      	movs	r3, #2
 8007326:	e02e      	b.n	8007386 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800732e:	d101      	bne.n	8007334 <remove_chain+0x70>
 8007330:	2301      	movs	r3, #1
 8007332:	e028      	b.n	8007386 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007334:	2200      	movs	r2, #0
 8007336:	68b9      	ldr	r1, [r7, #8]
 8007338:	69b8      	ldr	r0, [r7, #24]
 800733a:	f7ff fed9 	bl	80070f0 <put_fat>
 800733e:	4603      	mov	r3, r0
 8007340:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007342:	7ffb      	ldrb	r3, [r7, #31]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <remove_chain+0x88>
 8007348:	7ffb      	ldrb	r3, [r7, #31]
 800734a:	e01c      	b.n	8007386 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	695a      	ldr	r2, [r3, #20]
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	3b02      	subs	r3, #2
 8007356:	429a      	cmp	r2, r3
 8007358:	d20b      	bcs.n	8007372 <remove_chain+0xae>
			fs->free_clst++;
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	1c5a      	adds	r2, r3, #1
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	791b      	ldrb	r3, [r3, #4]
 8007368:	f043 0301 	orr.w	r3, r3, #1
 800736c:	b2da      	uxtb	r2, r3
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	429a      	cmp	r2, r3
 800737e:	d3c6      	bcc.n	800730e <remove_chain+0x4a>
 8007380:	e000      	b.n	8007384 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007382:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3720      	adds	r7, #32
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b088      	sub	sp, #32
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
 8007396:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10d      	bne.n	80073c0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d004      	beq.n	80073ba <create_chain+0x2c>
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	69ba      	ldr	r2, [r7, #24]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d31b      	bcc.n	80073f2 <create_chain+0x64>
 80073ba:	2301      	movs	r3, #1
 80073bc:	61bb      	str	r3, [r7, #24]
 80073be:	e018      	b.n	80073f2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80073c0:	6839      	ldr	r1, [r7, #0]
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f7ff fded 	bl	8006fa2 <get_fat>
 80073c8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d801      	bhi.n	80073d4 <create_chain+0x46>
 80073d0:	2301      	movs	r3, #1
 80073d2:	e070      	b.n	80074b6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073da:	d101      	bne.n	80073e0 <create_chain+0x52>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	e06a      	b.n	80074b6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d201      	bcs.n	80073ee <create_chain+0x60>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	e063      	b.n	80074b6 <create_chain+0x128>
		scl = clst;
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	3301      	adds	r3, #1
 80073fa:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	69fa      	ldr	r2, [r7, #28]
 8007402:	429a      	cmp	r2, r3
 8007404:	d307      	bcc.n	8007416 <create_chain+0x88>
				ncl = 2;
 8007406:	2302      	movs	r3, #2
 8007408:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800740a:	69fa      	ldr	r2, [r7, #28]
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	429a      	cmp	r2, r3
 8007410:	d901      	bls.n	8007416 <create_chain+0x88>
 8007412:	2300      	movs	r3, #0
 8007414:	e04f      	b.n	80074b6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007416:	69f9      	ldr	r1, [r7, #28]
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f7ff fdc2 	bl	8006fa2 <get_fat>
 800741e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00e      	beq.n	8007444 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d003      	beq.n	8007434 <create_chain+0xa6>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007432:	d101      	bne.n	8007438 <create_chain+0xaa>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	e03e      	b.n	80074b6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007438:	69fa      	ldr	r2, [r7, #28]
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	429a      	cmp	r2, r3
 800743e:	d1da      	bne.n	80073f6 <create_chain+0x68>
 8007440:	2300      	movs	r3, #0
 8007442:	e038      	b.n	80074b6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007444:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007446:	f04f 32ff 	mov.w	r2, #4294967295
 800744a:	69f9      	ldr	r1, [r7, #28]
 800744c:	6938      	ldr	r0, [r7, #16]
 800744e:	f7ff fe4f 	bl	80070f0 <put_fat>
 8007452:	4603      	mov	r3, r0
 8007454:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007456:	7dfb      	ldrb	r3, [r7, #23]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d109      	bne.n	8007470 <create_chain+0xe2>
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d006      	beq.n	8007470 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007462:	69fa      	ldr	r2, [r7, #28]
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	6938      	ldr	r0, [r7, #16]
 8007468:	f7ff fe42 	bl	80070f0 <put_fat>
 800746c:	4603      	mov	r3, r0
 800746e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007470:	7dfb      	ldrb	r3, [r7, #23]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d116      	bne.n	80074a4 <create_chain+0x116>
		fs->last_clst = ncl;
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	69fa      	ldr	r2, [r7, #28]
 800747a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	695a      	ldr	r2, [r3, #20]
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	3b02      	subs	r3, #2
 8007486:	429a      	cmp	r2, r3
 8007488:	d804      	bhi.n	8007494 <create_chain+0x106>
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	1e5a      	subs	r2, r3, #1
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	791b      	ldrb	r3, [r3, #4]
 8007498:	f043 0301 	orr.w	r3, r3, #1
 800749c:	b2da      	uxtb	r2, r3
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	711a      	strb	r2, [r3, #4]
 80074a2:	e007      	b.n	80074b4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80074a4:	7dfb      	ldrb	r3, [r7, #23]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d102      	bne.n	80074b0 <create_chain+0x122>
 80074aa:	f04f 33ff 	mov.w	r3, #4294967295
 80074ae:	e000      	b.n	80074b2 <create_chain+0x124>
 80074b0:	2301      	movs	r3, #1
 80074b2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80074b4:	69fb      	ldr	r3, [r7, #28]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3720      	adds	r7, #32
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80074be:	b480      	push	{r7}
 80074c0:	b087      	sub	sp, #28
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d2:	3304      	adds	r3, #4
 80074d4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	0a5b      	lsrs	r3, r3, #9
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	8952      	ldrh	r2, [r2, #10]
 80074de:	fbb3 f3f2 	udiv	r3, r3, r2
 80074e2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	1d1a      	adds	r2, r3, #4
 80074e8:	613a      	str	r2, [r7, #16]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <clmt_clust+0x3a>
 80074f4:	2300      	movs	r3, #0
 80074f6:	e010      	b.n	800751a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d307      	bcc.n	8007510 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	617b      	str	r3, [r7, #20]
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	3304      	adds	r3, #4
 800750c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800750e:	e7e9      	b.n	80074e4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007510:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	4413      	add	r3, r2
}
 800751a:	4618      	mov	r0, r3
 800751c:	371c      	adds	r7, #28
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr

08007526 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b086      	sub	sp, #24
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
 800752e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800753c:	d204      	bcs.n	8007548 <dir_sdi+0x22>
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	f003 031f 	and.w	r3, r3, #31
 8007544:	2b00      	cmp	r3, #0
 8007546:	d001      	beq.n	800754c <dir_sdi+0x26>
		return FR_INT_ERR;
 8007548:	2302      	movs	r3, #2
 800754a:	e063      	b.n	8007614 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d106      	bne.n	800756c <dir_sdi+0x46>
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	2b02      	cmp	r3, #2
 8007564:	d902      	bls.n	800756c <dir_sdi+0x46>
		clst = fs->dirbase;
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800756a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10c      	bne.n	800758c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	095b      	lsrs	r3, r3, #5
 8007576:	693a      	ldr	r2, [r7, #16]
 8007578:	8912      	ldrh	r2, [r2, #8]
 800757a:	4293      	cmp	r3, r2
 800757c:	d301      	bcc.n	8007582 <dir_sdi+0x5c>
 800757e:	2302      	movs	r3, #2
 8007580:	e048      	b.n	8007614 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	61da      	str	r2, [r3, #28]
 800758a:	e029      	b.n	80075e0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	895b      	ldrh	r3, [r3, #10]
 8007590:	025b      	lsls	r3, r3, #9
 8007592:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007594:	e019      	b.n	80075ca <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6979      	ldr	r1, [r7, #20]
 800759a:	4618      	mov	r0, r3
 800759c:	f7ff fd01 	bl	8006fa2 <get_fat>
 80075a0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a8:	d101      	bne.n	80075ae <dir_sdi+0x88>
 80075aa:	2301      	movs	r3, #1
 80075ac:	e032      	b.n	8007614 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d904      	bls.n	80075be <dir_sdi+0x98>
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d301      	bcc.n	80075c2 <dir_sdi+0x9c>
 80075be:	2302      	movs	r3, #2
 80075c0:	e028      	b.n	8007614 <dir_sdi+0xee>
			ofs -= csz;
 80075c2:	683a      	ldr	r2, [r7, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80075ca:	683a      	ldr	r2, [r7, #0]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d2e1      	bcs.n	8007596 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80075d2:	6979      	ldr	r1, [r7, #20]
 80075d4:	6938      	ldr	r0, [r7, #16]
 80075d6:	f7ff fcc5 	bl	8006f64 <clust2sect>
 80075da:	4602      	mov	r2, r0
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <dir_sdi+0xcc>
 80075ee:	2302      	movs	r3, #2
 80075f0:	e010      	b.n	8007614 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	69da      	ldr	r2, [r3, #28]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	0a5b      	lsrs	r3, r3, #9
 80075fa:	441a      	add	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800760c:	441a      	add	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3718      	adds	r7, #24
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	695b      	ldr	r3, [r3, #20]
 8007630:	3320      	adds	r3, #32
 8007632:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	69db      	ldr	r3, [r3, #28]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <dir_next+0x28>
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007642:	d301      	bcc.n	8007648 <dir_next+0x2c>
 8007644:	2304      	movs	r3, #4
 8007646:	e0aa      	b.n	800779e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800764e:	2b00      	cmp	r3, #0
 8007650:	f040 8098 	bne.w	8007784 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	69db      	ldr	r3, [r3, #28]
 8007658:	1c5a      	adds	r2, r3, #1
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10b      	bne.n	800767e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	095b      	lsrs	r3, r3, #5
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	8912      	ldrh	r2, [r2, #8]
 800766e:	4293      	cmp	r3, r2
 8007670:	f0c0 8088 	bcc.w	8007784 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	61da      	str	r2, [r3, #28]
 800767a:	2304      	movs	r3, #4
 800767c:	e08f      	b.n	800779e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	0a5b      	lsrs	r3, r3, #9
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	8952      	ldrh	r2, [r2, #10]
 8007686:	3a01      	subs	r2, #1
 8007688:	4013      	ands	r3, r2
 800768a:	2b00      	cmp	r3, #0
 800768c:	d17a      	bne.n	8007784 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	4619      	mov	r1, r3
 8007696:	4610      	mov	r0, r2
 8007698:	f7ff fc83 	bl	8006fa2 <get_fat>
 800769c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d801      	bhi.n	80076a8 <dir_next+0x8c>
 80076a4:	2302      	movs	r3, #2
 80076a6:	e07a      	b.n	800779e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ae:	d101      	bne.n	80076b4 <dir_next+0x98>
 80076b0:	2301      	movs	r3, #1
 80076b2:	e074      	b.n	800779e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d358      	bcc.n	8007770 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d104      	bne.n	80076ce <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	61da      	str	r2, [r3, #28]
 80076ca:	2304      	movs	r3, #4
 80076cc:	e067      	b.n	800779e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	4619      	mov	r1, r3
 80076d6:	4610      	mov	r0, r2
 80076d8:	f7ff fe59 	bl	800738e <create_chain>
 80076dc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d101      	bne.n	80076e8 <dir_next+0xcc>
 80076e4:	2307      	movs	r3, #7
 80076e6:	e05a      	b.n	800779e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d101      	bne.n	80076f2 <dir_next+0xd6>
 80076ee:	2302      	movs	r3, #2
 80076f0:	e055      	b.n	800779e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f8:	d101      	bne.n	80076fe <dir_next+0xe2>
 80076fa:	2301      	movs	r3, #1
 80076fc:	e04f      	b.n	800779e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f7ff fb50 	bl	8006da4 <sync_window>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <dir_next+0xf2>
 800770a:	2301      	movs	r3, #1
 800770c:	e047      	b.n	800779e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	3334      	adds	r3, #52	@ 0x34
 8007712:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007716:	2100      	movs	r1, #0
 8007718:	4618      	mov	r0, r3
 800771a:	f7ff f97a 	bl	8006a12 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800771e:	2300      	movs	r3, #0
 8007720:	613b      	str	r3, [r7, #16]
 8007722:	6979      	ldr	r1, [r7, #20]
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f7ff fc1d 	bl	8006f64 <clust2sect>
 800772a:	4602      	mov	r2, r0
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007730:	e012      	b.n	8007758 <dir_next+0x13c>
						fs->wflag = 1;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2201      	movs	r2, #1
 8007736:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f7ff fb33 	bl	8006da4 <sync_window>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <dir_next+0x12c>
 8007744:	2301      	movs	r3, #1
 8007746:	e02a      	b.n	800779e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	3301      	adds	r3, #1
 800774c:	613b      	str	r3, [r7, #16]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	631a      	str	r2, [r3, #48]	@ 0x30
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	895b      	ldrh	r3, [r3, #10]
 800775c:	461a      	mov	r2, r3
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	4293      	cmp	r3, r2
 8007762:	d3e6      	bcc.n	8007732 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	1ad2      	subs	r2, r2, r3
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007776:	6979      	ldr	r1, [r7, #20]
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f7ff fbf3 	bl	8006f64 <clust2sect>
 800777e:	4602      	mov	r2, r0
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007796:	441a      	add	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3718      	adds	r7, #24
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b086      	sub	sp, #24
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80077b6:	2100      	movs	r1, #0
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7ff feb4 	bl	8007526 <dir_sdi>
 80077be:	4603      	mov	r3, r0
 80077c0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80077c2:	7dfb      	ldrb	r3, [r7, #23]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d12b      	bne.n	8007820 <dir_alloc+0x7a>
		n = 0;
 80077c8:	2300      	movs	r3, #0
 80077ca:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	69db      	ldr	r3, [r3, #28]
 80077d0:	4619      	mov	r1, r3
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f7ff fb2a 	bl	8006e2c <move_window>
 80077d8:	4603      	mov	r3, r0
 80077da:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80077dc:	7dfb      	ldrb	r3, [r7, #23]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d11d      	bne.n	800781e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	2be5      	cmp	r3, #229	@ 0xe5
 80077ea:	d004      	beq.n	80077f6 <dir_alloc+0x50>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a1b      	ldr	r3, [r3, #32]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d107      	bne.n	8007806 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	3301      	adds	r3, #1
 80077fa:	613b      	str	r3, [r7, #16]
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	429a      	cmp	r2, r3
 8007802:	d102      	bne.n	800780a <dir_alloc+0x64>
 8007804:	e00c      	b.n	8007820 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007806:	2300      	movs	r3, #0
 8007808:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800780a:	2101      	movs	r1, #1
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f7ff ff05 	bl	800761c <dir_next>
 8007812:	4603      	mov	r3, r0
 8007814:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007816:	7dfb      	ldrb	r3, [r7, #23]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d0d7      	beq.n	80077cc <dir_alloc+0x26>
 800781c:	e000      	b.n	8007820 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800781e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007820:	7dfb      	ldrb	r3, [r7, #23]
 8007822:	2b04      	cmp	r3, #4
 8007824:	d101      	bne.n	800782a <dir_alloc+0x84>
 8007826:	2307      	movs	r3, #7
 8007828:	75fb      	strb	r3, [r7, #23]
	return res;
 800782a:	7dfb      	ldrb	r3, [r7, #23]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3718      	adds	r7, #24
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	331a      	adds	r3, #26
 8007842:	4618      	mov	r0, r3
 8007844:	f7ff f842 	bl	80068cc <ld_word>
 8007848:	4603      	mov	r3, r0
 800784a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	2b03      	cmp	r3, #3
 8007852:	d109      	bne.n	8007868 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	3314      	adds	r3, #20
 8007858:	4618      	mov	r0, r3
 800785a:	f7ff f837 	bl	80068cc <ld_word>
 800785e:	4603      	mov	r3, r0
 8007860:	041b      	lsls	r3, r3, #16
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	4313      	orrs	r3, r2
 8007866:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007868:	68fb      	ldr	r3, [r7, #12]
}
 800786a:	4618      	mov	r0, r3
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b084      	sub	sp, #16
 8007876:	af00      	add	r7, sp, #0
 8007878:	60f8      	str	r0, [r7, #12]
 800787a:	60b9      	str	r1, [r7, #8]
 800787c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	331a      	adds	r3, #26
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	b292      	uxth	r2, r2
 8007886:	4611      	mov	r1, r2
 8007888:	4618      	mov	r0, r3
 800788a:	f7ff f85a 	bl	8006942 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	2b03      	cmp	r3, #3
 8007894:	d109      	bne.n	80078aa <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	f103 0214 	add.w	r2, r3, #20
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	0c1b      	lsrs	r3, r3, #16
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	4619      	mov	r1, r3
 80078a4:	4610      	mov	r0, r2
 80078a6:	f7ff f84c 	bl	8006942 <st_word>
	}
}
 80078aa:	bf00      	nop
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
	...

080078b4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80078b4:	b590      	push	{r4, r7, lr}
 80078b6:	b087      	sub	sp, #28
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	331a      	adds	r3, #26
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7ff f802 	bl	80068cc <ld_word>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d001      	beq.n	80078d2 <cmp_lfn+0x1e>
 80078ce:	2300      	movs	r3, #0
 80078d0:	e059      	b.n	8007986 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078da:	1e5a      	subs	r2, r3, #1
 80078dc:	4613      	mov	r3, r2
 80078de:	005b      	lsls	r3, r3, #1
 80078e0:	4413      	add	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4413      	add	r3, r2
 80078e6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80078e8:	2301      	movs	r3, #1
 80078ea:	81fb      	strh	r3, [r7, #14]
 80078ec:	2300      	movs	r3, #0
 80078ee:	613b      	str	r3, [r7, #16]
 80078f0:	e033      	b.n	800795a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80078f2:	4a27      	ldr	r2, [pc, #156]	@ (8007990 <cmp_lfn+0xdc>)
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	4413      	add	r3, r2
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	461a      	mov	r2, r3
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	4413      	add	r3, r2
 8007900:	4618      	mov	r0, r3
 8007902:	f7fe ffe3 	bl	80068cc <ld_word>
 8007906:	4603      	mov	r3, r0
 8007908:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800790a:	89fb      	ldrh	r3, [r7, #14]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d01a      	beq.n	8007946 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	2bfe      	cmp	r3, #254	@ 0xfe
 8007914:	d812      	bhi.n	800793c <cmp_lfn+0x88>
 8007916:	89bb      	ldrh	r3, [r7, #12]
 8007918:	4618      	mov	r0, r3
 800791a:	f001 ff6d 	bl	80097f8 <ff_wtoupper>
 800791e:	4603      	mov	r3, r0
 8007920:	461c      	mov	r4, r3
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	1c5a      	adds	r2, r3, #1
 8007926:	617a      	str	r2, [r7, #20]
 8007928:	005b      	lsls	r3, r3, #1
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	4413      	add	r3, r2
 800792e:	881b      	ldrh	r3, [r3, #0]
 8007930:	4618      	mov	r0, r3
 8007932:	f001 ff61 	bl	80097f8 <ff_wtoupper>
 8007936:	4603      	mov	r3, r0
 8007938:	429c      	cmp	r4, r3
 800793a:	d001      	beq.n	8007940 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800793c:	2300      	movs	r3, #0
 800793e:	e022      	b.n	8007986 <cmp_lfn+0xd2>
			}
			wc = uc;
 8007940:	89bb      	ldrh	r3, [r7, #12]
 8007942:	81fb      	strh	r3, [r7, #14]
 8007944:	e006      	b.n	8007954 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007946:	89bb      	ldrh	r3, [r7, #12]
 8007948:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800794c:	4293      	cmp	r3, r2
 800794e:	d001      	beq.n	8007954 <cmp_lfn+0xa0>
 8007950:	2300      	movs	r3, #0
 8007952:	e018      	b.n	8007986 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	3301      	adds	r3, #1
 8007958:	613b      	str	r3, [r7, #16]
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	2b0c      	cmp	r3, #12
 800795e:	d9c8      	bls.n	80078f2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00b      	beq.n	8007984 <cmp_lfn+0xd0>
 800796c:	89fb      	ldrh	r3, [r7, #14]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d008      	beq.n	8007984 <cmp_lfn+0xd0>
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	005b      	lsls	r3, r3, #1
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	4413      	add	r3, r2
 800797a:	881b      	ldrh	r3, [r3, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d001      	beq.n	8007984 <cmp_lfn+0xd0>
 8007980:	2300      	movs	r3, #0
 8007982:	e000      	b.n	8007986 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007984:	2301      	movs	r3, #1
}
 8007986:	4618      	mov	r0, r3
 8007988:	371c      	adds	r7, #28
 800798a:	46bd      	mov	sp, r7
 800798c:	bd90      	pop	{r4, r7, pc}
 800798e:	bf00      	nop
 8007990:	0800a548 	.word	0x0800a548

08007994 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	331a      	adds	r3, #26
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fe ff92 	bl	80068cc <ld_word>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d001      	beq.n	80079b2 <pick_lfn+0x1e>
 80079ae:	2300      	movs	r3, #0
 80079b0:	e04d      	b.n	8007a4e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079ba:	1e5a      	subs	r2, r3, #1
 80079bc:	4613      	mov	r3, r2
 80079be:	005b      	lsls	r3, r3, #1
 80079c0:	4413      	add	r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	4413      	add	r3, r2
 80079c6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80079c8:	2301      	movs	r3, #1
 80079ca:	81fb      	strh	r3, [r7, #14]
 80079cc:	2300      	movs	r3, #0
 80079ce:	613b      	str	r3, [r7, #16]
 80079d0:	e028      	b.n	8007a24 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80079d2:	4a21      	ldr	r2, [pc, #132]	@ (8007a58 <pick_lfn+0xc4>)
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	4413      	add	r3, r2
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	461a      	mov	r2, r3
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	4413      	add	r3, r2
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fe ff73 	bl	80068cc <ld_word>
 80079e6:	4603      	mov	r3, r0
 80079e8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80079ea:	89fb      	ldrh	r3, [r7, #14]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00f      	beq.n	8007a10 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	2bfe      	cmp	r3, #254	@ 0xfe
 80079f4:	d901      	bls.n	80079fa <pick_lfn+0x66>
 80079f6:	2300      	movs	r3, #0
 80079f8:	e029      	b.n	8007a4e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80079fa:	89bb      	ldrh	r3, [r7, #12]
 80079fc:	81fb      	strh	r3, [r7, #14]
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	1c5a      	adds	r2, r3, #1
 8007a02:	617a      	str	r2, [r7, #20]
 8007a04:	005b      	lsls	r3, r3, #1
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	4413      	add	r3, r2
 8007a0a:	89fa      	ldrh	r2, [r7, #14]
 8007a0c:	801a      	strh	r2, [r3, #0]
 8007a0e:	e006      	b.n	8007a1e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007a10:	89bb      	ldrh	r3, [r7, #12]
 8007a12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d001      	beq.n	8007a1e <pick_lfn+0x8a>
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	e017      	b.n	8007a4e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	3301      	adds	r3, #1
 8007a22:	613b      	str	r3, [r7, #16]
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	2b0c      	cmp	r3, #12
 8007a28:	d9d3      	bls.n	80079d2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00a      	beq.n	8007a4c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	2bfe      	cmp	r3, #254	@ 0xfe
 8007a3a:	d901      	bls.n	8007a40 <pick_lfn+0xac>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	e006      	b.n	8007a4e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	005b      	lsls	r3, r3, #1
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	4413      	add	r3, r2
 8007a48:	2200      	movs	r2, #0
 8007a4a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8007a4c:	2301      	movs	r3, #1
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3718      	adds	r7, #24
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	0800a548 	.word	0x0800a548

08007a5c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b088      	sub	sp, #32
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	4611      	mov	r1, r2
 8007a68:	461a      	mov	r2, r3
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	71fb      	strb	r3, [r7, #7]
 8007a6e:	4613      	mov	r3, r2
 8007a70:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	330d      	adds	r3, #13
 8007a76:	79ba      	ldrb	r2, [r7, #6]
 8007a78:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	330b      	adds	r3, #11
 8007a7e:	220f      	movs	r2, #15
 8007a80:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	330c      	adds	r3, #12
 8007a86:	2200      	movs	r2, #0
 8007a88:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	331a      	adds	r3, #26
 8007a8e:	2100      	movs	r1, #0
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7fe ff56 	bl	8006942 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007a96:	79fb      	ldrb	r3, [r7, #7]
 8007a98:	1e5a      	subs	r2, r3, #1
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	005b      	lsls	r3, r3, #1
 8007a9e:	4413      	add	r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4413      	add	r3, r2
 8007aa4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	82fb      	strh	r3, [r7, #22]
 8007aaa:	2300      	movs	r3, #0
 8007aac:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007aae:	8afb      	ldrh	r3, [r7, #22]
 8007ab0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d007      	beq.n	8007ac8 <put_lfn+0x6c>
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	1c5a      	adds	r2, r3, #1
 8007abc:	61fa      	str	r2, [r7, #28]
 8007abe:	005b      	lsls	r3, r3, #1
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	881b      	ldrh	r3, [r3, #0]
 8007ac6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007ac8:	4a17      	ldr	r2, [pc, #92]	@ (8007b28 <put_lfn+0xcc>)
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	4413      	add	r3, r2
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	8afa      	ldrh	r2, [r7, #22]
 8007ad8:	4611      	mov	r1, r2
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fe ff31 	bl	8006942 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007ae0:	8afb      	ldrh	r3, [r7, #22]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d102      	bne.n	8007aec <put_lfn+0x90>
 8007ae6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007aea:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	3301      	adds	r3, #1
 8007af0:	61bb      	str	r3, [r7, #24]
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	2b0c      	cmp	r3, #12
 8007af6:	d9da      	bls.n	8007aae <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007af8:	8afb      	ldrh	r3, [r7, #22]
 8007afa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d006      	beq.n	8007b10 <put_lfn+0xb4>
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	005b      	lsls	r3, r3, #1
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	4413      	add	r3, r2
 8007b0a:	881b      	ldrh	r3, [r3, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d103      	bne.n	8007b18 <put_lfn+0xbc>
 8007b10:	79fb      	ldrb	r3, [r7, #7]
 8007b12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b16:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	79fa      	ldrb	r2, [r7, #7]
 8007b1c:	701a      	strb	r2, [r3, #0]
}
 8007b1e:	bf00      	nop
 8007b20:	3720      	adds	r7, #32
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	0800a548 	.word	0x0800a548

08007b2c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b08c      	sub	sp, #48	@ 0x30
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
 8007b38:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007b3a:	220b      	movs	r2, #11
 8007b3c:	68b9      	ldr	r1, [r7, #8]
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f7fe ff46 	bl	80069d0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	2b05      	cmp	r3, #5
 8007b48:	d92b      	bls.n	8007ba2 <gen_numname+0x76>
		sr = seq;
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007b4e:	e022      	b.n	8007b96 <gen_numname+0x6a>
			wc = *lfn++;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	1c9a      	adds	r2, r3, #2
 8007b54:	607a      	str	r2, [r7, #4]
 8007b56:	881b      	ldrh	r3, [r3, #0]
 8007b58:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b5e:	e017      	b.n	8007b90 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	005a      	lsls	r2, r3, #1
 8007b64:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007b66:	f003 0301 	and.w	r3, r3, #1
 8007b6a:	4413      	add	r3, r2
 8007b6c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007b6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007b70:	085b      	lsrs	r3, r3, #1
 8007b72:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d005      	beq.n	8007b8a <gen_numname+0x5e>
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8007b84:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8007b88:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b92:	2b0f      	cmp	r3, #15
 8007b94:	d9e4      	bls.n	8007b60 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	881b      	ldrh	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1d8      	bne.n	8007b50 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007ba2:	2307      	movs	r3, #7
 8007ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	f003 030f 	and.w	r3, r3, #15
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	3330      	adds	r3, #48	@ 0x30
 8007bb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8007bb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007bba:	2b39      	cmp	r3, #57	@ 0x39
 8007bbc:	d904      	bls.n	8007bc8 <gen_numname+0x9c>
 8007bbe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007bc2:	3307      	adds	r3, #7
 8007bc4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8007bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bca:	1e5a      	subs	r2, r3, #1
 8007bcc:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007bce:	3330      	adds	r3, #48	@ 0x30
 8007bd0:	443b      	add	r3, r7
 8007bd2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8007bd6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	091b      	lsrs	r3, r3, #4
 8007bde:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1df      	bne.n	8007ba6 <gen_numname+0x7a>
	ns[i] = '~';
 8007be6:	f107 0214 	add.w	r2, r7, #20
 8007bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bec:	4413      	add	r3, r2
 8007bee:	227e      	movs	r2, #126	@ 0x7e
 8007bf0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bf6:	e002      	b.n	8007bfe <gen_numname+0xd2>
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d205      	bcs.n	8007c12 <gen_numname+0xe6>
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0a:	4413      	add	r3, r2
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	2b20      	cmp	r3, #32
 8007c10:	d1f2      	bne.n	8007bf8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c14:	2b07      	cmp	r3, #7
 8007c16:	d807      	bhi.n	8007c28 <gen_numname+0xfc>
 8007c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c1a:	1c5a      	adds	r2, r3, #1
 8007c1c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007c1e:	3330      	adds	r3, #48	@ 0x30
 8007c20:	443b      	add	r3, r7
 8007c22:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007c26:	e000      	b.n	8007c2a <gen_numname+0xfe>
 8007c28:	2120      	movs	r1, #32
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2c:	1c5a      	adds	r2, r3, #1
 8007c2e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	4413      	add	r3, r2
 8007c34:	460a      	mov	r2, r1
 8007c36:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3a:	2b07      	cmp	r3, #7
 8007c3c:	d9e9      	bls.n	8007c12 <gen_numname+0xe6>
}
 8007c3e:	bf00      	nop
 8007c40:	bf00      	nop
 8007c42:	3730      	adds	r7, #48	@ 0x30
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007c50:	2300      	movs	r3, #0
 8007c52:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007c54:	230b      	movs	r3, #11
 8007c56:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007c58:	7bfb      	ldrb	r3, [r7, #15]
 8007c5a:	b2da      	uxtb	r2, r3
 8007c5c:	0852      	lsrs	r2, r2, #1
 8007c5e:	01db      	lsls	r3, r3, #7
 8007c60:	4313      	orrs	r3, r2
 8007c62:	b2da      	uxtb	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	1c59      	adds	r1, r3, #1
 8007c68:	6079      	str	r1, [r7, #4]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	3b01      	subs	r3, #1
 8007c74:	60bb      	str	r3, [r7, #8]
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1ed      	bne.n	8007c58 <sum_sfn+0x10>
	return sum;
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3714      	adds	r7, #20
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b086      	sub	sp, #24
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
 8007c92:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8007c94:	2304      	movs	r3, #4
 8007c96:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8007c9e:	23ff      	movs	r3, #255	@ 0xff
 8007ca0:	757b      	strb	r3, [r7, #21]
 8007ca2:	23ff      	movs	r3, #255	@ 0xff
 8007ca4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8007ca6:	e081      	b.n	8007dac <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	69db      	ldr	r3, [r3, #28]
 8007cac:	4619      	mov	r1, r3
 8007cae:	6938      	ldr	r0, [r7, #16]
 8007cb0:	f7ff f8bc 	bl	8006e2c <move_window>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007cb8:	7dfb      	ldrb	r3, [r7, #23]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d17c      	bne.n	8007db8 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8007cc6:	7dbb      	ldrb	r3, [r7, #22]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d102      	bne.n	8007cd2 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8007ccc:	2304      	movs	r3, #4
 8007cce:	75fb      	strb	r3, [r7, #23]
 8007cd0:	e077      	b.n	8007dc2 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	330b      	adds	r3, #11
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cde:	73fb      	strb	r3, [r7, #15]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	7bfa      	ldrb	r2, [r7, #15]
 8007ce4:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8007ce6:	7dbb      	ldrb	r3, [r7, #22]
 8007ce8:	2be5      	cmp	r3, #229	@ 0xe5
 8007cea:	d00e      	beq.n	8007d0a <dir_read+0x80>
 8007cec:	7dbb      	ldrb	r3, [r7, #22]
 8007cee:	2b2e      	cmp	r3, #46	@ 0x2e
 8007cf0:	d00b      	beq.n	8007d0a <dir_read+0x80>
 8007cf2:	7bfb      	ldrb	r3, [r7, #15]
 8007cf4:	f023 0320 	bic.w	r3, r3, #32
 8007cf8:	2b08      	cmp	r3, #8
 8007cfa:	bf0c      	ite	eq
 8007cfc:	2301      	moveq	r3, #1
 8007cfe:	2300      	movne	r3, #0
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	461a      	mov	r2, r3
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d002      	beq.n	8007d10 <dir_read+0x86>
				ord = 0xFF;
 8007d0a:	23ff      	movs	r3, #255	@ 0xff
 8007d0c:	757b      	strb	r3, [r7, #21]
 8007d0e:	e044      	b.n	8007d9a <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8007d10:	7bfb      	ldrb	r3, [r7, #15]
 8007d12:	2b0f      	cmp	r3, #15
 8007d14:	d12f      	bne.n	8007d76 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8007d16:	7dbb      	ldrb	r3, [r7, #22]
 8007d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00d      	beq.n	8007d3c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a1b      	ldr	r3, [r3, #32]
 8007d24:	7b5b      	ldrb	r3, [r3, #13]
 8007d26:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8007d28:	7dbb      	ldrb	r3, [r7, #22]
 8007d2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d2e:	75bb      	strb	r3, [r7, #22]
 8007d30:	7dbb      	ldrb	r3, [r7, #22]
 8007d32:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	695a      	ldr	r2, [r3, #20]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007d3c:	7dba      	ldrb	r2, [r7, #22]
 8007d3e:	7d7b      	ldrb	r3, [r7, #21]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d115      	bne.n	8007d70 <dir_read+0xe6>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6a1b      	ldr	r3, [r3, #32]
 8007d48:	330d      	adds	r3, #13
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	7d3a      	ldrb	r2, [r7, #20]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d10e      	bne.n	8007d70 <dir_read+0xe6>
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	68da      	ldr	r2, [r3, #12]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a1b      	ldr	r3, [r3, #32]
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	f7ff fe19 	bl	8007994 <pick_lfn>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d003      	beq.n	8007d70 <dir_read+0xe6>
 8007d68:	7d7b      	ldrb	r3, [r7, #21]
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	e000      	b.n	8007d72 <dir_read+0xe8>
 8007d70:	23ff      	movs	r3, #255	@ 0xff
 8007d72:	757b      	strb	r3, [r7, #21]
 8007d74:	e011      	b.n	8007d9a <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8007d76:	7d7b      	ldrb	r3, [r7, #21]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d109      	bne.n	8007d90 <dir_read+0x106>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a1b      	ldr	r3, [r3, #32]
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7ff ff61 	bl	8007c48 <sum_sfn>
 8007d86:	4603      	mov	r3, r0
 8007d88:	461a      	mov	r2, r3
 8007d8a:	7d3b      	ldrb	r3, [r7, #20]
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d015      	beq.n	8007dbc <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f04f 32ff 	mov.w	r2, #4294967295
 8007d96:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 8007d98:	e010      	b.n	8007dbc <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f7ff fc3d 	bl	800761c <dir_next>
 8007da2:	4603      	mov	r3, r0
 8007da4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007da6:	7dfb      	ldrb	r3, [r7, #23]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d109      	bne.n	8007dc0 <dir_read+0x136>
	while (dp->sect) {
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	69db      	ldr	r3, [r3, #28]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f47f af79 	bne.w	8007ca8 <dir_read+0x1e>
 8007db6:	e004      	b.n	8007dc2 <dir_read+0x138>
		if (res != FR_OK) break;
 8007db8:	bf00      	nop
 8007dba:	e002      	b.n	8007dc2 <dir_read+0x138>
					break;
 8007dbc:	bf00      	nop
 8007dbe:	e000      	b.n	8007dc2 <dir_read+0x138>
		if (res != FR_OK) break;
 8007dc0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8007dc2:	7dfb      	ldrb	r3, [r7, #23]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d002      	beq.n	8007dce <dir_read+0x144>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	61da      	str	r2, [r3, #28]
	return res;
 8007dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3718      	adds	r7, #24
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b086      	sub	sp, #24
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007de6:	2100      	movs	r1, #0
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7ff fb9c 	bl	8007526 <dir_sdi>
 8007dee:	4603      	mov	r3, r0
 8007df0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007df2:	7dfb      	ldrb	r3, [r7, #23]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d001      	beq.n	8007dfc <dir_find+0x24>
 8007df8:	7dfb      	ldrb	r3, [r7, #23]
 8007dfa:	e0a9      	b.n	8007f50 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007dfc:	23ff      	movs	r3, #255	@ 0xff
 8007dfe:	753b      	strb	r3, [r7, #20]
 8007e00:	7d3b      	ldrb	r3, [r7, #20]
 8007e02:	757b      	strb	r3, [r7, #21]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f04f 32ff 	mov.w	r2, #4294967295
 8007e0a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	69db      	ldr	r3, [r3, #28]
 8007e10:	4619      	mov	r1, r3
 8007e12:	6938      	ldr	r0, [r7, #16]
 8007e14:	f7ff f80a 	bl	8006e2c <move_window>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007e1c:	7dfb      	ldrb	r3, [r7, #23]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f040 8090 	bne.w	8007f44 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a1b      	ldr	r3, [r3, #32]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007e2c:	7dbb      	ldrb	r3, [r7, #22]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d102      	bne.n	8007e38 <dir_find+0x60>
 8007e32:	2304      	movs	r3, #4
 8007e34:	75fb      	strb	r3, [r7, #23]
 8007e36:	e08a      	b.n	8007f4e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a1b      	ldr	r3, [r3, #32]
 8007e3c:	330b      	adds	r3, #11
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e44:	73fb      	strb	r3, [r7, #15]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	7bfa      	ldrb	r2, [r7, #15]
 8007e4a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007e4c:	7dbb      	ldrb	r3, [r7, #22]
 8007e4e:	2be5      	cmp	r3, #229	@ 0xe5
 8007e50:	d007      	beq.n	8007e62 <dir_find+0x8a>
 8007e52:	7bfb      	ldrb	r3, [r7, #15]
 8007e54:	f003 0308 	and.w	r3, r3, #8
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d009      	beq.n	8007e70 <dir_find+0x98>
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
 8007e5e:	2b0f      	cmp	r3, #15
 8007e60:	d006      	beq.n	8007e70 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007e62:	23ff      	movs	r3, #255	@ 0xff
 8007e64:	757b      	strb	r3, [r7, #21]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f04f 32ff 	mov.w	r2, #4294967295
 8007e6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007e6e:	e05e      	b.n	8007f2e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
 8007e72:	2b0f      	cmp	r3, #15
 8007e74:	d136      	bne.n	8007ee4 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d154      	bne.n	8007f2e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007e84:	7dbb      	ldrb	r3, [r7, #22]
 8007e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00d      	beq.n	8007eaa <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	7b5b      	ldrb	r3, [r3, #13]
 8007e94:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007e96:	7dbb      	ldrb	r3, [r7, #22]
 8007e98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e9c:	75bb      	strb	r3, [r7, #22]
 8007e9e:	7dbb      	ldrb	r3, [r7, #22]
 8007ea0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	695a      	ldr	r2, [r3, #20]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007eaa:	7dba      	ldrb	r2, [r7, #22]
 8007eac:	7d7b      	ldrb	r3, [r7, #21]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d115      	bne.n	8007ede <dir_find+0x106>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	330d      	adds	r3, #13
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	7d3a      	ldrb	r2, [r7, #20]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d10e      	bne.n	8007ede <dir_find+0x106>
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	68da      	ldr	r2, [r3, #12]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a1b      	ldr	r3, [r3, #32]
 8007ec8:	4619      	mov	r1, r3
 8007eca:	4610      	mov	r0, r2
 8007ecc:	f7ff fcf2 	bl	80078b4 <cmp_lfn>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d003      	beq.n	8007ede <dir_find+0x106>
 8007ed6:	7d7b      	ldrb	r3, [r7, #21]
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	e000      	b.n	8007ee0 <dir_find+0x108>
 8007ede:	23ff      	movs	r3, #255	@ 0xff
 8007ee0:	757b      	strb	r3, [r7, #21]
 8007ee2:	e024      	b.n	8007f2e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007ee4:	7d7b      	ldrb	r3, [r7, #21]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d109      	bne.n	8007efe <dir_find+0x126>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7ff feaa 	bl	8007c48 <sum_sfn>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	7d3b      	ldrb	r3, [r7, #20]
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d024      	beq.n	8007f48 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007f04:	f003 0301 	and.w	r3, r3, #1
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10a      	bne.n	8007f22 <dir_find+0x14a>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6a18      	ldr	r0, [r3, #32]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	3324      	adds	r3, #36	@ 0x24
 8007f14:	220b      	movs	r2, #11
 8007f16:	4619      	mov	r1, r3
 8007f18:	f7fe fd96 	bl	8006a48 <mem_cmp>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d014      	beq.n	8007f4c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007f22:	23ff      	movs	r3, #255	@ 0xff
 8007f24:	757b      	strb	r3, [r7, #21]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f04f 32ff 	mov.w	r2, #4294967295
 8007f2c:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007f2e:	2100      	movs	r1, #0
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f7ff fb73 	bl	800761c <dir_next>
 8007f36:	4603      	mov	r3, r0
 8007f38:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007f3a:	7dfb      	ldrb	r3, [r7, #23]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f43f af65 	beq.w	8007e0c <dir_find+0x34>
 8007f42:	e004      	b.n	8007f4e <dir_find+0x176>
		if (res != FR_OK) break;
 8007f44:	bf00      	nop
 8007f46:	e002      	b.n	8007f4e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007f48:	bf00      	nop
 8007f4a:	e000      	b.n	8007f4e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007f4c:	bf00      	nop

	return res;
 8007f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3718      	adds	r7, #24
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b08c      	sub	sp, #48	@ 0x30
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007f6c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d001      	beq.n	8007f78 <dir_register+0x20>
 8007f74:	2306      	movs	r3, #6
 8007f76:	e0e0      	b.n	800813a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007f78:	2300      	movs	r3, #0
 8007f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f7c:	e002      	b.n	8007f84 <dir_register+0x2c>
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f80:	3301      	adds	r3, #1
 8007f82:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	68da      	ldr	r2, [r3, #12]
 8007f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8a:	005b      	lsls	r3, r3, #1
 8007f8c:	4413      	add	r3, r2
 8007f8e:	881b      	ldrh	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1f4      	bne.n	8007f7e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8007f9a:	f107 030c 	add.w	r3, r7, #12
 8007f9e:	220c      	movs	r2, #12
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7fe fd15 	bl	80069d0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007fa6:	7dfb      	ldrb	r3, [r7, #23]
 8007fa8:	f003 0301 	and.w	r3, r3, #1
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d032      	beq.n	8008016 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2240      	movs	r2, #64	@ 0x40
 8007fb4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8007fb8:	2301      	movs	r3, #1
 8007fba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007fbc:	e016      	b.n	8007fec <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	68da      	ldr	r2, [r3, #12]
 8007fc8:	f107 010c 	add.w	r1, r7, #12
 8007fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fce:	f7ff fdad 	bl	8007b2c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f7ff ff00 	bl	8007dd8 <dir_find>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8007fde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d106      	bne.n	8007ff4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe8:	3301      	adds	r3, #1
 8007fea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fee:	2b63      	cmp	r3, #99	@ 0x63
 8007ff0:	d9e5      	bls.n	8007fbe <dir_register+0x66>
 8007ff2:	e000      	b.n	8007ff6 <dir_register+0x9e>
			if (res != FR_OK) break;
 8007ff4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff8:	2b64      	cmp	r3, #100	@ 0x64
 8007ffa:	d101      	bne.n	8008000 <dir_register+0xa8>
 8007ffc:	2307      	movs	r3, #7
 8007ffe:	e09c      	b.n	800813a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008000:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008004:	2b04      	cmp	r3, #4
 8008006:	d002      	beq.n	800800e <dir_register+0xb6>
 8008008:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800800c:	e095      	b.n	800813a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800800e:	7dfa      	ldrb	r2, [r7, #23]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008016:	7dfb      	ldrb	r3, [r7, #23]
 8008018:	f003 0302 	and.w	r3, r3, #2
 800801c:	2b00      	cmp	r3, #0
 800801e:	d007      	beq.n	8008030 <dir_register+0xd8>
 8008020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008022:	330c      	adds	r3, #12
 8008024:	4a47      	ldr	r2, [pc, #284]	@ (8008144 <dir_register+0x1ec>)
 8008026:	fba2 2303 	umull	r2, r3, r2, r3
 800802a:	089b      	lsrs	r3, r3, #2
 800802c:	3301      	adds	r3, #1
 800802e:	e000      	b.n	8008032 <dir_register+0xda>
 8008030:	2301      	movs	r3, #1
 8008032:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008034:	6a39      	ldr	r1, [r7, #32]
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7ff fbb5 	bl	80077a6 <dir_alloc>
 800803c:	4603      	mov	r3, r0
 800803e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008042:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008046:	2b00      	cmp	r3, #0
 8008048:	d148      	bne.n	80080dc <dir_register+0x184>
 800804a:	6a3b      	ldr	r3, [r7, #32]
 800804c:	3b01      	subs	r3, #1
 800804e:	623b      	str	r3, [r7, #32]
 8008050:	6a3b      	ldr	r3, [r7, #32]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d042      	beq.n	80080dc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	695a      	ldr	r2, [r3, #20]
 800805a:	6a3b      	ldr	r3, [r7, #32]
 800805c:	015b      	lsls	r3, r3, #5
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	4619      	mov	r1, r3
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7ff fa5f 	bl	8007526 <dir_sdi>
 8008068:	4603      	mov	r3, r0
 800806a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800806e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008072:	2b00      	cmp	r3, #0
 8008074:	d132      	bne.n	80080dc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	3324      	adds	r3, #36	@ 0x24
 800807a:	4618      	mov	r0, r3
 800807c:	f7ff fde4 	bl	8007c48 <sum_sfn>
 8008080:	4603      	mov	r3, r0
 8008082:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	69db      	ldr	r3, [r3, #28]
 8008088:	4619      	mov	r1, r3
 800808a:	69f8      	ldr	r0, [r7, #28]
 800808c:	f7fe fece 	bl	8006e2c <move_window>
 8008090:	4603      	mov	r3, r0
 8008092:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8008096:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800809a:	2b00      	cmp	r3, #0
 800809c:	d11d      	bne.n	80080da <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	68d8      	ldr	r0, [r3, #12]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a19      	ldr	r1, [r3, #32]
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	b2da      	uxtb	r2, r3
 80080aa:	7efb      	ldrb	r3, [r7, #27]
 80080ac:	f7ff fcd6 	bl	8007a5c <put_lfn>
				fs->wflag = 1;
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	2201      	movs	r2, #1
 80080b4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80080b6:	2100      	movs	r1, #0
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f7ff faaf 	bl	800761c <dir_next>
 80080be:	4603      	mov	r3, r0
 80080c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80080c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d107      	bne.n	80080dc <dir_register+0x184>
 80080cc:	6a3b      	ldr	r3, [r7, #32]
 80080ce:	3b01      	subs	r3, #1
 80080d0:	623b      	str	r3, [r7, #32]
 80080d2:	6a3b      	ldr	r3, [r7, #32]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1d5      	bne.n	8008084 <dir_register+0x12c>
 80080d8:	e000      	b.n	80080dc <dir_register+0x184>
				if (res != FR_OK) break;
 80080da:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80080dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d128      	bne.n	8008136 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	69db      	ldr	r3, [r3, #28]
 80080e8:	4619      	mov	r1, r3
 80080ea:	69f8      	ldr	r0, [r7, #28]
 80080ec:	f7fe fe9e 	bl	8006e2c <move_window>
 80080f0:	4603      	mov	r3, r0
 80080f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80080f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d11b      	bne.n	8008136 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a1b      	ldr	r3, [r3, #32]
 8008102:	2220      	movs	r2, #32
 8008104:	2100      	movs	r1, #0
 8008106:	4618      	mov	r0, r3
 8008108:	f7fe fc83 	bl	8006a12 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a18      	ldr	r0, [r3, #32]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	3324      	adds	r3, #36	@ 0x24
 8008114:	220b      	movs	r2, #11
 8008116:	4619      	mov	r1, r3
 8008118:	f7fe fc5a 	bl	80069d0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a1b      	ldr	r3, [r3, #32]
 8008126:	330c      	adds	r3, #12
 8008128:	f002 0218 	and.w	r2, r2, #24
 800812c:	b2d2      	uxtb	r2, r2
 800812e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	2201      	movs	r2, #1
 8008134:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008136:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800813a:	4618      	mov	r0, r3
 800813c:	3730      	adds	r7, #48	@ 0x30
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	4ec4ec4f 	.word	0x4ec4ec4f

08008148 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b088      	sub	sp, #32
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	2200      	movs	r2, #0
 800815c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	69db      	ldr	r3, [r3, #28]
 8008162:	2b00      	cmp	r3, #0
 8008164:	f000 80ca 	beq.w	80082fc <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800816c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008170:	d032      	beq.n	80081d8 <get_fileinfo+0x90>
			i = j = 0;
 8008172:	2300      	movs	r3, #0
 8008174:	61bb      	str	r3, [r7, #24]
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800817a:	e01b      	b.n	80081b4 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800817c:	89fb      	ldrh	r3, [r7, #14]
 800817e:	2100      	movs	r1, #0
 8008180:	4618      	mov	r0, r3
 8008182:	f001 fafd 	bl	8009780 <ff_convert>
 8008186:	4603      	mov	r3, r0
 8008188:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800818a:	89fb      	ldrh	r3, [r7, #14]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d102      	bne.n	8008196 <get_fileinfo+0x4e>
 8008190:	2300      	movs	r3, #0
 8008192:	61fb      	str	r3, [r7, #28]
 8008194:	e01a      	b.n	80081cc <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	2bfe      	cmp	r3, #254	@ 0xfe
 800819a:	d902      	bls.n	80081a2 <get_fileinfo+0x5a>
 800819c:	2300      	movs	r3, #0
 800819e:	61fb      	str	r3, [r7, #28]
 80081a0:	e014      	b.n	80081cc <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	1c5a      	adds	r2, r3, #1
 80081a6:	61fa      	str	r2, [r7, #28]
 80081a8:	89fa      	ldrh	r2, [r7, #14]
 80081aa:	b2d1      	uxtb	r1, r2
 80081ac:	683a      	ldr	r2, [r7, #0]
 80081ae:	4413      	add	r3, r2
 80081b0:	460a      	mov	r2, r1
 80081b2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	68da      	ldr	r2, [r3, #12]
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	1c59      	adds	r1, r3, #1
 80081bc:	61b9      	str	r1, [r7, #24]
 80081be:	005b      	lsls	r3, r3, #1
 80081c0:	4413      	add	r3, r2
 80081c2:	881b      	ldrh	r3, [r3, #0]
 80081c4:	81fb      	strh	r3, [r7, #14]
 80081c6:	89fb      	ldrh	r3, [r7, #14]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1d7      	bne.n	800817c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 80081cc:	683a      	ldr	r2, [r7, #0]
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	4413      	add	r3, r2
 80081d2:	3316      	adds	r3, #22
 80081d4:	2200      	movs	r2, #0
 80081d6:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 80081d8:	2300      	movs	r3, #0
 80081da:	61bb      	str	r3, [r7, #24]
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80081e0:	683a      	ldr	r2, [r7, #0]
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	4413      	add	r3, r2
 80081e6:	3316      	adds	r3, #22
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 80081ec:	e04d      	b.n	800828a <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a1a      	ldr	r2, [r3, #32]
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	1c59      	adds	r1, r3, #1
 80081f6:	61f9      	str	r1, [r7, #28]
 80081f8:	4413      	add	r3, r2
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80081fe:	7dfb      	ldrb	r3, [r7, #23]
 8008200:	2b20      	cmp	r3, #32
 8008202:	d041      	beq.n	8008288 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8008204:	7dfb      	ldrb	r3, [r7, #23]
 8008206:	2b05      	cmp	r3, #5
 8008208:	d101      	bne.n	800820e <get_fileinfo+0xc6>
 800820a:	23e5      	movs	r3, #229	@ 0xe5
 800820c:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	2b09      	cmp	r3, #9
 8008212:	d10f      	bne.n	8008234 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 8008214:	89bb      	ldrh	r3, [r7, #12]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d105      	bne.n	8008226 <get_fileinfo+0xde>
 800821a:	683a      	ldr	r2, [r7, #0]
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	4413      	add	r3, r2
 8008220:	3316      	adds	r3, #22
 8008222:	222e      	movs	r2, #46	@ 0x2e
 8008224:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	1c5a      	adds	r2, r3, #1
 800822a:	61ba      	str	r2, [r7, #24]
 800822c:	683a      	ldr	r2, [r7, #0]
 800822e:	4413      	add	r3, r2
 8008230:	222e      	movs	r2, #46	@ 0x2e
 8008232:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8008234:	683a      	ldr	r2, [r7, #0]
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	4413      	add	r3, r2
 800823a:	3309      	adds	r3, #9
 800823c:	7dfa      	ldrb	r2, [r7, #23]
 800823e:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8008240:	89bb      	ldrh	r3, [r7, #12]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d11c      	bne.n	8008280 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8008246:	7dfb      	ldrb	r3, [r7, #23]
 8008248:	2b40      	cmp	r3, #64	@ 0x40
 800824a:	d913      	bls.n	8008274 <get_fileinfo+0x12c>
 800824c:	7dfb      	ldrb	r3, [r7, #23]
 800824e:	2b5a      	cmp	r3, #90	@ 0x5a
 8008250:	d810      	bhi.n	8008274 <get_fileinfo+0x12c>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	330c      	adds	r3, #12
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	461a      	mov	r2, r3
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	2b08      	cmp	r3, #8
 8008260:	d901      	bls.n	8008266 <get_fileinfo+0x11e>
 8008262:	2310      	movs	r3, #16
 8008264:	e000      	b.n	8008268 <get_fileinfo+0x120>
 8008266:	2308      	movs	r3, #8
 8008268:	4013      	ands	r3, r2
 800826a:	2b00      	cmp	r3, #0
 800826c:	d002      	beq.n	8008274 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 800826e:	7dfb      	ldrb	r3, [r7, #23]
 8008270:	3320      	adds	r3, #32
 8008272:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	4413      	add	r3, r2
 800827a:	3316      	adds	r3, #22
 800827c:	7dfa      	ldrb	r2, [r7, #23]
 800827e:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	3301      	adds	r3, #1
 8008284:	61bb      	str	r3, [r7, #24]
 8008286:	e000      	b.n	800828a <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 8008288:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	2b0a      	cmp	r3, #10
 800828e:	d9ae      	bls.n	80081ee <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8008290:	89bb      	ldrh	r3, [r7, #12]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d10d      	bne.n	80082b2 <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 8008296:	683a      	ldr	r2, [r7, #0]
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	4413      	add	r3, r2
 800829c:	3316      	adds	r3, #22
 800829e:	2200      	movs	r2, #0
 80082a0:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	330c      	adds	r3, #12
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <get_fileinfo+0x16a>
 80082ae:	2300      	movs	r3, #0
 80082b0:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80082b2:	683a      	ldr	r2, [r7, #0]
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	4413      	add	r3, r2
 80082b8:	3309      	adds	r3, #9
 80082ba:	2200      	movs	r2, #0
 80082bc:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a1b      	ldr	r3, [r3, #32]
 80082c2:	7ada      	ldrb	r2, [r3, #11]
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a1b      	ldr	r3, [r3, #32]
 80082cc:	331c      	adds	r3, #28
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7fe fb14 	bl	80068fc <ld_dword>
 80082d4:	4602      	mov	r2, r0
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a1b      	ldr	r3, [r3, #32]
 80082de:	3316      	adds	r3, #22
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7fe fb0b 	bl	80068fc <ld_dword>
 80082e6:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	80da      	strh	r2, [r3, #6]
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	0c1b      	lsrs	r3, r3, #16
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	809a      	strh	r2, [r3, #4]
 80082fa:	e000      	b.n	80082fe <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80082fc:	bf00      	nop
}
 80082fe:	3720      	adds	r7, #32
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b08a      	sub	sp, #40	@ 0x28
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	613b      	str	r3, [r7, #16]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	60fb      	str	r3, [r7, #12]
 800831c:	2300      	movs	r3, #0
 800831e:	617b      	str	r3, [r7, #20]
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	1c5a      	adds	r2, r3, #1
 8008328:	61ba      	str	r2, [r7, #24]
 800832a:	693a      	ldr	r2, [r7, #16]
 800832c:	4413      	add	r3, r2
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008332:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008334:	2b1f      	cmp	r3, #31
 8008336:	d940      	bls.n	80083ba <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008338:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800833a:	2b2f      	cmp	r3, #47	@ 0x2f
 800833c:	d006      	beq.n	800834c <create_name+0x48>
 800833e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008340:	2b5c      	cmp	r3, #92	@ 0x5c
 8008342:	d110      	bne.n	8008366 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008344:	e002      	b.n	800834c <create_name+0x48>
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	3301      	adds	r3, #1
 800834a:	61bb      	str	r3, [r7, #24]
 800834c:	693a      	ldr	r2, [r7, #16]
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	4413      	add	r3, r2
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	2b2f      	cmp	r3, #47	@ 0x2f
 8008356:	d0f6      	beq.n	8008346 <create_name+0x42>
 8008358:	693a      	ldr	r2, [r7, #16]
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	4413      	add	r3, r2
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	2b5c      	cmp	r3, #92	@ 0x5c
 8008362:	d0f0      	beq.n	8008346 <create_name+0x42>
			break;
 8008364:	e02a      	b.n	80083bc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	2bfe      	cmp	r3, #254	@ 0xfe
 800836a:	d901      	bls.n	8008370 <create_name+0x6c>
 800836c:	2306      	movs	r3, #6
 800836e:	e17d      	b.n	800866c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008370:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008372:	b2db      	uxtb	r3, r3
 8008374:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008376:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008378:	2101      	movs	r1, #1
 800837a:	4618      	mov	r0, r3
 800837c:	f001 fa00 	bl	8009780 <ff_convert>
 8008380:	4603      	mov	r3, r0
 8008382:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008384:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008386:	2b00      	cmp	r3, #0
 8008388:	d101      	bne.n	800838e <create_name+0x8a>
 800838a:	2306      	movs	r3, #6
 800838c:	e16e      	b.n	800866c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800838e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008390:	2b7f      	cmp	r3, #127	@ 0x7f
 8008392:	d809      	bhi.n	80083a8 <create_name+0xa4>
 8008394:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008396:	4619      	mov	r1, r3
 8008398:	488d      	ldr	r0, [pc, #564]	@ (80085d0 <create_name+0x2cc>)
 800839a:	f7fe fb7c 	bl	8006a96 <chk_chr>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d001      	beq.n	80083a8 <create_name+0xa4>
 80083a4:	2306      	movs	r3, #6
 80083a6:	e161      	b.n	800866c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	1c5a      	adds	r2, r3, #1
 80083ac:	617a      	str	r2, [r7, #20]
 80083ae:	005b      	lsls	r3, r3, #1
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	4413      	add	r3, r2
 80083b4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80083b6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80083b8:	e7b4      	b.n	8008324 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80083ba:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80083bc:	693a      	ldr	r2, [r7, #16]
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	441a      	add	r2, r3
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80083c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80083c8:	2b1f      	cmp	r3, #31
 80083ca:	d801      	bhi.n	80083d0 <create_name+0xcc>
 80083cc:	2304      	movs	r3, #4
 80083ce:	e000      	b.n	80083d2 <create_name+0xce>
 80083d0:	2300      	movs	r3, #0
 80083d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80083d6:	e011      	b.n	80083fc <create_name+0xf8>
		w = lfn[di - 1];
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80083de:	3b01      	subs	r3, #1
 80083e0:	005b      	lsls	r3, r3, #1
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	4413      	add	r3, r2
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80083ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80083ec:	2b20      	cmp	r3, #32
 80083ee:	d002      	beq.n	80083f6 <create_name+0xf2>
 80083f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80083f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80083f4:	d106      	bne.n	8008404 <create_name+0x100>
		di--;
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	3b01      	subs	r3, #1
 80083fa:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1ea      	bne.n	80083d8 <create_name+0xd4>
 8008402:	e000      	b.n	8008406 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008404:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	005b      	lsls	r3, r3, #1
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	4413      	add	r3, r2
 800840e:	2200      	movs	r2, #0
 8008410:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d101      	bne.n	800841c <create_name+0x118>
 8008418:	2306      	movs	r3, #6
 800841a:	e127      	b.n	800866c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	3324      	adds	r3, #36	@ 0x24
 8008420:	220b      	movs	r2, #11
 8008422:	2120      	movs	r1, #32
 8008424:	4618      	mov	r0, r3
 8008426:	f7fe faf4 	bl	8006a12 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800842a:	2300      	movs	r3, #0
 800842c:	61bb      	str	r3, [r7, #24]
 800842e:	e002      	b.n	8008436 <create_name+0x132>
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	3301      	adds	r3, #1
 8008434:	61bb      	str	r3, [r7, #24]
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	005b      	lsls	r3, r3, #1
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	4413      	add	r3, r2
 800843e:	881b      	ldrh	r3, [r3, #0]
 8008440:	2b20      	cmp	r3, #32
 8008442:	d0f5      	beq.n	8008430 <create_name+0x12c>
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	005b      	lsls	r3, r3, #1
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	4413      	add	r3, r2
 800844c:	881b      	ldrh	r3, [r3, #0]
 800844e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008450:	d0ee      	beq.n	8008430 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d009      	beq.n	800846c <create_name+0x168>
 8008458:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800845c:	f043 0303 	orr.w	r3, r3, #3
 8008460:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008464:	e002      	b.n	800846c <create_name+0x168>
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	3b01      	subs	r3, #1
 800846a:	617b      	str	r3, [r7, #20]
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d009      	beq.n	8008486 <create_name+0x182>
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008478:	3b01      	subs	r3, #1
 800847a:	005b      	lsls	r3, r3, #1
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	4413      	add	r3, r2
 8008480:	881b      	ldrh	r3, [r3, #0]
 8008482:	2b2e      	cmp	r3, #46	@ 0x2e
 8008484:	d1ef      	bne.n	8008466 <create_name+0x162>

	i = b = 0; ni = 8;
 8008486:	2300      	movs	r3, #0
 8008488:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800848c:	2300      	movs	r3, #0
 800848e:	623b      	str	r3, [r7, #32]
 8008490:	2308      	movs	r3, #8
 8008492:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	1c5a      	adds	r2, r3, #1
 8008498:	61ba      	str	r2, [r7, #24]
 800849a:	005b      	lsls	r3, r3, #1
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	4413      	add	r3, r2
 80084a0:	881b      	ldrh	r3, [r3, #0]
 80084a2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80084a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f000 8090 	beq.w	80085cc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80084ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80084ae:	2b20      	cmp	r3, #32
 80084b0:	d006      	beq.n	80084c0 <create_name+0x1bc>
 80084b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80084b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80084b6:	d10a      	bne.n	80084ce <create_name+0x1ca>
 80084b8:	69ba      	ldr	r2, [r7, #24]
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d006      	beq.n	80084ce <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80084c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084c4:	f043 0303 	orr.w	r3, r3, #3
 80084c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80084cc:	e07d      	b.n	80085ca <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80084ce:	6a3a      	ldr	r2, [r7, #32]
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d203      	bcs.n	80084de <create_name+0x1da>
 80084d6:	69ba      	ldr	r2, [r7, #24]
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d123      	bne.n	8008526 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	2b0b      	cmp	r3, #11
 80084e2:	d106      	bne.n	80084f2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80084e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084e8:	f043 0303 	orr.w	r3, r3, #3
 80084ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80084f0:	e075      	b.n	80085de <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80084f2:	69ba      	ldr	r2, [r7, #24]
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d005      	beq.n	8008506 <create_name+0x202>
 80084fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084fe:	f043 0303 	orr.w	r3, r3, #3
 8008502:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8008506:	69ba      	ldr	r2, [r7, #24]
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	429a      	cmp	r2, r3
 800850c:	d866      	bhi.n	80085dc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	61bb      	str	r3, [r7, #24]
 8008512:	2308      	movs	r3, #8
 8008514:	623b      	str	r3, [r7, #32]
 8008516:	230b      	movs	r3, #11
 8008518:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800851a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008524:	e051      	b.n	80085ca <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008526:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008528:	2b7f      	cmp	r3, #127	@ 0x7f
 800852a:	d914      	bls.n	8008556 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800852c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800852e:	2100      	movs	r1, #0
 8008530:	4618      	mov	r0, r3
 8008532:	f001 f925 	bl	8009780 <ff_convert>
 8008536:	4603      	mov	r3, r0
 8008538:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800853a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800853c:	2b00      	cmp	r3, #0
 800853e:	d004      	beq.n	800854a <create_name+0x246>
 8008540:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008542:	3b80      	subs	r3, #128	@ 0x80
 8008544:	4a23      	ldr	r2, [pc, #140]	@ (80085d4 <create_name+0x2d0>)
 8008546:	5cd3      	ldrb	r3, [r2, r3]
 8008548:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800854a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800854e:	f043 0302 	orr.w	r3, r3, #2
 8008552:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008556:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008558:	2b00      	cmp	r3, #0
 800855a:	d007      	beq.n	800856c <create_name+0x268>
 800855c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800855e:	4619      	mov	r1, r3
 8008560:	481d      	ldr	r0, [pc, #116]	@ (80085d8 <create_name+0x2d4>)
 8008562:	f7fe fa98 	bl	8006a96 <chk_chr>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d008      	beq.n	800857e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800856c:	235f      	movs	r3, #95	@ 0x5f
 800856e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008570:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008574:	f043 0303 	orr.w	r3, r3, #3
 8008578:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800857c:	e01b      	b.n	80085b6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800857e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008580:	2b40      	cmp	r3, #64	@ 0x40
 8008582:	d909      	bls.n	8008598 <create_name+0x294>
 8008584:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008586:	2b5a      	cmp	r3, #90	@ 0x5a
 8008588:	d806      	bhi.n	8008598 <create_name+0x294>
					b |= 2;
 800858a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800858e:	f043 0302 	orr.w	r3, r3, #2
 8008592:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008596:	e00e      	b.n	80085b6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008598:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800859a:	2b60      	cmp	r3, #96	@ 0x60
 800859c:	d90b      	bls.n	80085b6 <create_name+0x2b2>
 800859e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085a0:	2b7a      	cmp	r3, #122	@ 0x7a
 80085a2:	d808      	bhi.n	80085b6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80085a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80085a8:	f043 0301 	orr.w	r3, r3, #1
 80085ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80085b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085b2:	3b20      	subs	r3, #32
 80085b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80085b6:	6a3b      	ldr	r3, [r7, #32]
 80085b8:	1c5a      	adds	r2, r3, #1
 80085ba:	623a      	str	r2, [r7, #32]
 80085bc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80085be:	b2d1      	uxtb	r1, r2
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	4413      	add	r3, r2
 80085c4:	460a      	mov	r2, r1
 80085c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80085ca:	e763      	b.n	8008494 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80085cc:	bf00      	nop
 80085ce:	e006      	b.n	80085de <create_name+0x2da>
 80085d0:	0800a44c 	.word	0x0800a44c
 80085d4:	0800a4c8 	.word	0x0800a4c8
 80085d8:	0800a458 	.word	0x0800a458
			if (si > di) break;			/* No extension */
 80085dc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80085e4:	2be5      	cmp	r3, #229	@ 0xe5
 80085e6:	d103      	bne.n	80085f0 <create_name+0x2ec>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2205      	movs	r2, #5
 80085ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	2b08      	cmp	r3, #8
 80085f4:	d104      	bne.n	8008600 <create_name+0x2fc>
 80085f6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008600:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008604:	f003 030c 	and.w	r3, r3, #12
 8008608:	2b0c      	cmp	r3, #12
 800860a:	d005      	beq.n	8008618 <create_name+0x314>
 800860c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008610:	f003 0303 	and.w	r3, r3, #3
 8008614:	2b03      	cmp	r3, #3
 8008616:	d105      	bne.n	8008624 <create_name+0x320>
 8008618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800861c:	f043 0302 	orr.w	r3, r3, #2
 8008620:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008624:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008628:	f003 0302 	and.w	r3, r3, #2
 800862c:	2b00      	cmp	r3, #0
 800862e:	d117      	bne.n	8008660 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008630:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008634:	f003 0303 	and.w	r3, r3, #3
 8008638:	2b01      	cmp	r3, #1
 800863a:	d105      	bne.n	8008648 <create_name+0x344>
 800863c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008640:	f043 0310 	orr.w	r3, r3, #16
 8008644:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008648:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800864c:	f003 030c 	and.w	r3, r3, #12
 8008650:	2b04      	cmp	r3, #4
 8008652:	d105      	bne.n	8008660 <create_name+0x35c>
 8008654:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008658:	f043 0308 	orr.w	r3, r3, #8
 800865c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008666:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800866a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800866c:	4618      	mov	r0, r3
 800866e:	3728      	adds	r7, #40	@ 0x28
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008688:	e002      	b.n	8008690 <follow_path+0x1c>
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	3301      	adds	r3, #1
 800868e:	603b      	str	r3, [r7, #0]
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	2b2f      	cmp	r3, #47	@ 0x2f
 8008696:	d0f8      	beq.n	800868a <follow_path+0x16>
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	2b5c      	cmp	r3, #92	@ 0x5c
 800869e:	d0f4      	beq.n	800868a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	2200      	movs	r2, #0
 80086a4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	2b1f      	cmp	r3, #31
 80086ac:	d80a      	bhi.n	80086c4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2280      	movs	r2, #128	@ 0x80
 80086b2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80086b6:	2100      	movs	r1, #0
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f7fe ff34 	bl	8007526 <dir_sdi>
 80086be:	4603      	mov	r3, r0
 80086c0:	75fb      	strb	r3, [r7, #23]
 80086c2:	e043      	b.n	800874c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80086c4:	463b      	mov	r3, r7
 80086c6:	4619      	mov	r1, r3
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7ff fe1b 	bl	8008304 <create_name>
 80086ce:	4603      	mov	r3, r0
 80086d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80086d2:	7dfb      	ldrb	r3, [r7, #23]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d134      	bne.n	8008742 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f7ff fb7d 	bl	8007dd8 <dir_find>
 80086de:	4603      	mov	r3, r0
 80086e0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80086e8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80086ea:	7dfb      	ldrb	r3, [r7, #23]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00a      	beq.n	8008706 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80086f0:	7dfb      	ldrb	r3, [r7, #23]
 80086f2:	2b04      	cmp	r3, #4
 80086f4:	d127      	bne.n	8008746 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80086f6:	7afb      	ldrb	r3, [r7, #11]
 80086f8:	f003 0304 	and.w	r3, r3, #4
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d122      	bne.n	8008746 <follow_path+0xd2>
 8008700:	2305      	movs	r3, #5
 8008702:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008704:	e01f      	b.n	8008746 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008706:	7afb      	ldrb	r3, [r7, #11]
 8008708:	f003 0304 	and.w	r3, r3, #4
 800870c:	2b00      	cmp	r3, #0
 800870e:	d11c      	bne.n	800874a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	799b      	ldrb	r3, [r3, #6]
 8008714:	f003 0310 	and.w	r3, r3, #16
 8008718:	2b00      	cmp	r3, #0
 800871a:	d102      	bne.n	8008722 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800871c:	2305      	movs	r3, #5
 800871e:	75fb      	strb	r3, [r7, #23]
 8008720:	e014      	b.n	800874c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	695b      	ldr	r3, [r3, #20]
 800872c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008730:	4413      	add	r3, r2
 8008732:	4619      	mov	r1, r3
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	f7ff f87d 	bl	8007834 <ld_clust>
 800873a:	4602      	mov	r2, r0
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008740:	e7c0      	b.n	80086c4 <follow_path+0x50>
			if (res != FR_OK) break;
 8008742:	bf00      	nop
 8008744:	e002      	b.n	800874c <follow_path+0xd8>
				break;
 8008746:	bf00      	nop
 8008748:	e000      	b.n	800874c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800874a:	bf00      	nop
			}
		}
	}

	return res;
 800874c:	7dfb      	ldrb	r3, [r7, #23]
}
 800874e:	4618      	mov	r0, r3
 8008750:	3718      	adds	r7, #24
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008756:	b480      	push	{r7}
 8008758:	b087      	sub	sp, #28
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800875e:	f04f 33ff 	mov.w	r3, #4294967295
 8008762:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d031      	beq.n	80087d0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	617b      	str	r3, [r7, #20]
 8008772:	e002      	b.n	800877a <get_ldnumber+0x24>
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	3301      	adds	r3, #1
 8008778:	617b      	str	r3, [r7, #20]
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	2b1f      	cmp	r3, #31
 8008780:	d903      	bls.n	800878a <get_ldnumber+0x34>
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	2b3a      	cmp	r3, #58	@ 0x3a
 8008788:	d1f4      	bne.n	8008774 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	2b3a      	cmp	r3, #58	@ 0x3a
 8008790:	d11c      	bne.n	80087cc <get_ldnumber+0x76>
			tp = *path;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	1c5a      	adds	r2, r3, #1
 800879c:	60fa      	str	r2, [r7, #12]
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	3b30      	subs	r3, #48	@ 0x30
 80087a2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	2b09      	cmp	r3, #9
 80087a8:	d80e      	bhi.n	80087c8 <get_ldnumber+0x72>
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d10a      	bne.n	80087c8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d107      	bne.n	80087c8 <get_ldnumber+0x72>
					vol = (int)i;
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	3301      	adds	r3, #1
 80087c0:	617b      	str	r3, [r7, #20]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	697a      	ldr	r2, [r7, #20]
 80087c6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	e002      	b.n	80087d2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80087cc:	2300      	movs	r3, #0
 80087ce:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80087d0:	693b      	ldr	r3, [r7, #16]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	371c      	adds	r7, #28
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
	...

080087e0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	70da      	strb	r2, [r3, #3]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f04f 32ff 	mov.w	r2, #4294967295
 80087f6:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80087f8:	6839      	ldr	r1, [r7, #0]
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7fe fb16 	bl	8006e2c <move_window>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d001      	beq.n	800880a <check_fs+0x2a>
 8008806:	2304      	movs	r3, #4
 8008808:	e038      	b.n	800887c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	3334      	adds	r3, #52	@ 0x34
 800880e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008812:	4618      	mov	r0, r3
 8008814:	f7fe f85a 	bl	80068cc <ld_word>
 8008818:	4603      	mov	r3, r0
 800881a:	461a      	mov	r2, r3
 800881c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008820:	429a      	cmp	r2, r3
 8008822:	d001      	beq.n	8008828 <check_fs+0x48>
 8008824:	2303      	movs	r3, #3
 8008826:	e029      	b.n	800887c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800882e:	2be9      	cmp	r3, #233	@ 0xe9
 8008830:	d009      	beq.n	8008846 <check_fs+0x66>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008838:	2beb      	cmp	r3, #235	@ 0xeb
 800883a:	d11e      	bne.n	800887a <check_fs+0x9a>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008842:	2b90      	cmp	r3, #144	@ 0x90
 8008844:	d119      	bne.n	800887a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	3334      	adds	r3, #52	@ 0x34
 800884a:	3336      	adds	r3, #54	@ 0x36
 800884c:	4618      	mov	r0, r3
 800884e:	f7fe f855 	bl	80068fc <ld_dword>
 8008852:	4603      	mov	r3, r0
 8008854:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008858:	4a0a      	ldr	r2, [pc, #40]	@ (8008884 <check_fs+0xa4>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d101      	bne.n	8008862 <check_fs+0x82>
 800885e:	2300      	movs	r3, #0
 8008860:	e00c      	b.n	800887c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	3334      	adds	r3, #52	@ 0x34
 8008866:	3352      	adds	r3, #82	@ 0x52
 8008868:	4618      	mov	r0, r3
 800886a:	f7fe f847 	bl	80068fc <ld_dword>
 800886e:	4603      	mov	r3, r0
 8008870:	4a05      	ldr	r2, [pc, #20]	@ (8008888 <check_fs+0xa8>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d101      	bne.n	800887a <check_fs+0x9a>
 8008876:	2300      	movs	r3, #0
 8008878:	e000      	b.n	800887c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800887a:	2302      	movs	r3, #2
}
 800887c:	4618      	mov	r0, r3
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	00544146 	.word	0x00544146
 8008888:	33544146 	.word	0x33544146

0800888c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b096      	sub	sp, #88	@ 0x58
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	4613      	mov	r3, r2
 8008898:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	2200      	movs	r2, #0
 800889e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f7ff ff58 	bl	8008756 <get_ldnumber>
 80088a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80088a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	da01      	bge.n	80088b2 <find_volume+0x26>
 80088ae:	230b      	movs	r3, #11
 80088b0:	e230      	b.n	8008d14 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80088b2:	4aa1      	ldr	r2, [pc, #644]	@ (8008b38 <find_volume+0x2ac>)
 80088b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088ba:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80088bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d101      	bne.n	80088c6 <find_volume+0x3a>
 80088c2:	230c      	movs	r3, #12
 80088c4:	e226      	b.n	8008d14 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80088ca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80088cc:	79fb      	ldrb	r3, [r7, #7]
 80088ce:	f023 0301 	bic.w	r3, r3, #1
 80088d2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80088d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d01a      	beq.n	8008912 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80088dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088de:	785b      	ldrb	r3, [r3, #1]
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7fd ff53 	bl	800678c <disk_status>
 80088e6:	4603      	mov	r3, r0
 80088e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80088ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80088f0:	f003 0301 	and.w	r3, r3, #1
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10c      	bne.n	8008912 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80088f8:	79fb      	ldrb	r3, [r7, #7]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d007      	beq.n	800890e <find_volume+0x82>
 80088fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008902:	f003 0304 	and.w	r3, r3, #4
 8008906:	2b00      	cmp	r3, #0
 8008908:	d001      	beq.n	800890e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800890a:	230a      	movs	r3, #10
 800890c:	e202      	b.n	8008d14 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800890e:	2300      	movs	r3, #0
 8008910:	e200      	b.n	8008d14 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008914:	2200      	movs	r2, #0
 8008916:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800891a:	b2da      	uxtb	r2, r3
 800891c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800891e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008922:	785b      	ldrb	r3, [r3, #1]
 8008924:	4618      	mov	r0, r3
 8008926:	f7fd ff4b 	bl	80067c0 <disk_initialize>
 800892a:	4603      	mov	r3, r0
 800892c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008930:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008934:	f003 0301 	and.w	r3, r3, #1
 8008938:	2b00      	cmp	r3, #0
 800893a:	d001      	beq.n	8008940 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800893c:	2303      	movs	r3, #3
 800893e:	e1e9      	b.n	8008d14 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008940:	79fb      	ldrb	r3, [r7, #7]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d007      	beq.n	8008956 <find_volume+0xca>
 8008946:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800894a:	f003 0304 	and.w	r3, r3, #4
 800894e:	2b00      	cmp	r3, #0
 8008950:	d001      	beq.n	8008956 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008952:	230a      	movs	r3, #10
 8008954:	e1de      	b.n	8008d14 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008956:	2300      	movs	r3, #0
 8008958:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800895a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800895c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800895e:	f7ff ff3f 	bl	80087e0 <check_fs>
 8008962:	4603      	mov	r3, r0
 8008964:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008968:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800896c:	2b02      	cmp	r3, #2
 800896e:	d149      	bne.n	8008a04 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008970:	2300      	movs	r3, #0
 8008972:	643b      	str	r3, [r7, #64]	@ 0x40
 8008974:	e01e      	b.n	80089b4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008978:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800897c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800897e:	011b      	lsls	r3, r3, #4
 8008980:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008984:	4413      	add	r3, r2
 8008986:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898a:	3304      	adds	r3, #4
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d006      	beq.n	80089a0 <find_volume+0x114>
 8008992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008994:	3308      	adds	r3, #8
 8008996:	4618      	mov	r0, r3
 8008998:	f7fd ffb0 	bl	80068fc <ld_dword>
 800899c:	4602      	mov	r2, r0
 800899e:	e000      	b.n	80089a2 <find_volume+0x116>
 80089a0:	2200      	movs	r2, #0
 80089a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	3358      	adds	r3, #88	@ 0x58
 80089a8:	443b      	add	r3, r7
 80089aa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80089ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089b0:	3301      	adds	r3, #1
 80089b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80089b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089b6:	2b03      	cmp	r3, #3
 80089b8:	d9dd      	bls.n	8008976 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80089ba:	2300      	movs	r3, #0
 80089bc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80089be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d002      	beq.n	80089ca <find_volume+0x13e>
 80089c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089c6:	3b01      	subs	r3, #1
 80089c8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80089ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	3358      	adds	r3, #88	@ 0x58
 80089d0:	443b      	add	r3, r7
 80089d2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80089d6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80089d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d005      	beq.n	80089ea <find_volume+0x15e>
 80089de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80089e0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80089e2:	f7ff fefd 	bl	80087e0 <check_fs>
 80089e6:	4603      	mov	r3, r0
 80089e8:	e000      	b.n	80089ec <find_volume+0x160>
 80089ea:	2303      	movs	r3, #3
 80089ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80089f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d905      	bls.n	8008a04 <find_volume+0x178>
 80089f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089fa:	3301      	adds	r3, #1
 80089fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80089fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a00:	2b03      	cmp	r3, #3
 8008a02:	d9e2      	bls.n	80089ca <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008a04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008a08:	2b04      	cmp	r3, #4
 8008a0a:	d101      	bne.n	8008a10 <find_volume+0x184>
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e181      	b.n	8008d14 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008a10:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d901      	bls.n	8008a1c <find_volume+0x190>
 8008a18:	230d      	movs	r3, #13
 8008a1a:	e17b      	b.n	8008d14 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1e:	3334      	adds	r3, #52	@ 0x34
 8008a20:	330b      	adds	r3, #11
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fd ff52 	bl	80068cc <ld_word>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a2e:	d001      	beq.n	8008a34 <find_volume+0x1a8>
 8008a30:	230d      	movs	r3, #13
 8008a32:	e16f      	b.n	8008d14 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a36:	3334      	adds	r3, #52	@ 0x34
 8008a38:	3316      	adds	r3, #22
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7fd ff46 	bl	80068cc <ld_word>
 8008a40:	4603      	mov	r3, r0
 8008a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008a44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d106      	bne.n	8008a58 <find_volume+0x1cc>
 8008a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a4c:	3334      	adds	r3, #52	@ 0x34
 8008a4e:	3324      	adds	r3, #36	@ 0x24
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7fd ff53 	bl	80068fc <ld_dword>
 8008a56:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008a5c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a60:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a66:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a6a:	789b      	ldrb	r3, [r3, #2]
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d005      	beq.n	8008a7c <find_volume+0x1f0>
 8008a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a72:	789b      	ldrb	r3, [r3, #2]
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	d001      	beq.n	8008a7c <find_volume+0x1f0>
 8008a78:	230d      	movs	r3, #13
 8008a7a:	e14b      	b.n	8008d14 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a7e:	789b      	ldrb	r3, [r3, #2]
 8008a80:	461a      	mov	r2, r3
 8008a82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a84:	fb02 f303 	mul.w	r3, r2, r3
 8008a88:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a90:	461a      	mov	r2, r3
 8008a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a94:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a98:	895b      	ldrh	r3, [r3, #10]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d008      	beq.n	8008ab0 <find_volume+0x224>
 8008a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa0:	895b      	ldrh	r3, [r3, #10]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa6:	895b      	ldrh	r3, [r3, #10]
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	4013      	ands	r3, r2
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <find_volume+0x228>
 8008ab0:	230d      	movs	r3, #13
 8008ab2:	e12f      	b.n	8008d14 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab6:	3334      	adds	r3, #52	@ 0x34
 8008ab8:	3311      	adds	r3, #17
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7fd ff06 	bl	80068cc <ld_word>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aca:	891b      	ldrh	r3, [r3, #8]
 8008acc:	f003 030f 	and.w	r3, r3, #15
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d001      	beq.n	8008ada <find_volume+0x24e>
 8008ad6:	230d      	movs	r3, #13
 8008ad8:	e11c      	b.n	8008d14 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008adc:	3334      	adds	r3, #52	@ 0x34
 8008ade:	3313      	adds	r3, #19
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7fd fef3 	bl	80068cc <ld_word>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008aea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d106      	bne.n	8008afe <find_volume+0x272>
 8008af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af2:	3334      	adds	r3, #52	@ 0x34
 8008af4:	3320      	adds	r3, #32
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7fd ff00 	bl	80068fc <ld_dword>
 8008afc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b00:	3334      	adds	r3, #52	@ 0x34
 8008b02:	330e      	adds	r3, #14
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7fd fee1 	bl	80068cc <ld_word>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008b0e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d101      	bne.n	8008b18 <find_volume+0x28c>
 8008b14:	230d      	movs	r3, #13
 8008b16:	e0fd      	b.n	8008d14 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008b18:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008b1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b1c:	4413      	add	r3, r2
 8008b1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b20:	8912      	ldrh	r2, [r2, #8]
 8008b22:	0912      	lsrs	r2, r2, #4
 8008b24:	b292      	uxth	r2, r2
 8008b26:	4413      	add	r3, r2
 8008b28:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008b2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d204      	bcs.n	8008b3c <find_volume+0x2b0>
 8008b32:	230d      	movs	r3, #13
 8008b34:	e0ee      	b.n	8008d14 <find_volume+0x488>
 8008b36:	bf00      	nop
 8008b38:	20010c6c 	.word	0x20010c6c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008b3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b44:	8952      	ldrh	r2, [r2, #10]
 8008b46:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b4a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d101      	bne.n	8008b56 <find_volume+0x2ca>
 8008b52:	230d      	movs	r3, #13
 8008b54:	e0de      	b.n	8008d14 <find_volume+0x488>
		fmt = FS_FAT32;
 8008b56:	2303      	movs	r3, #3
 8008b58:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b5e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d802      	bhi.n	8008b6c <find_volume+0x2e0>
 8008b66:	2302      	movs	r3, #2
 8008b68:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d802      	bhi.n	8008b7c <find_volume+0x2f0>
 8008b76:	2301      	movs	r3, #1
 8008b78:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7e:	1c9a      	adds	r2, r3, #2
 8008b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b82:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b86:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008b88:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008b8a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008b8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b8e:	441a      	add	r2, r3
 8008b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b92:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008b94:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b98:	441a      	add	r2, r3
 8008b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b9c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8008b9e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008ba2:	2b03      	cmp	r3, #3
 8008ba4:	d11e      	bne.n	8008be4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba8:	3334      	adds	r3, #52	@ 0x34
 8008baa:	332a      	adds	r3, #42	@ 0x2a
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7fd fe8d 	bl	80068cc <ld_word>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d001      	beq.n	8008bbc <find_volume+0x330>
 8008bb8:	230d      	movs	r3, #13
 8008bba:	e0ab      	b.n	8008d14 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bbe:	891b      	ldrh	r3, [r3, #8]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d001      	beq.n	8008bc8 <find_volume+0x33c>
 8008bc4:	230d      	movs	r3, #13
 8008bc6:	e0a5      	b.n	8008d14 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bca:	3334      	adds	r3, #52	@ 0x34
 8008bcc:	332c      	adds	r3, #44	@ 0x2c
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7fd fe94 	bl	80068fc <ld_dword>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd8:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008be2:	e01f      	b.n	8008c24 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be6:	891b      	ldrh	r3, [r3, #8]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d101      	bne.n	8008bf0 <find_volume+0x364>
 8008bec:	230d      	movs	r3, #13
 8008bee:	e091      	b.n	8008d14 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008bf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bf6:	441a      	add	r2, r3
 8008bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bfa:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008bfc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d103      	bne.n	8008c0c <find_volume+0x380>
 8008c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	005b      	lsls	r3, r3, #1
 8008c0a:	e00a      	b.n	8008c22 <find_volume+0x396>
 8008c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c0e:	699a      	ldr	r2, [r3, #24]
 8008c10:	4613      	mov	r3, r2
 8008c12:	005b      	lsls	r3, r3, #1
 8008c14:	4413      	add	r3, r2
 8008c16:	085a      	lsrs	r2, r3, #1
 8008c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	f003 0301 	and.w	r3, r3, #1
 8008c20:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008c22:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c26:	69da      	ldr	r2, [r3, #28]
 8008c28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c2a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8008c2e:	0a5b      	lsrs	r3, r3, #9
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d201      	bcs.n	8008c38 <find_volume+0x3ac>
 8008c34:	230d      	movs	r3, #13
 8008c36:	e06d      	b.n	8008d14 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c3e:	615a      	str	r2, [r3, #20]
 8008c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c42:	695a      	ldr	r2, [r3, #20]
 8008c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c46:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c4a:	2280      	movs	r2, #128	@ 0x80
 8008c4c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008c4e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008c52:	2b03      	cmp	r3, #3
 8008c54:	d149      	bne.n	8008cea <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c58:	3334      	adds	r3, #52	@ 0x34
 8008c5a:	3330      	adds	r3, #48	@ 0x30
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7fd fe35 	bl	80068cc <ld_word>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d140      	bne.n	8008cea <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008c68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008c70:	f7fe f8dc 	bl	8006e2c <move_window>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d137      	bne.n	8008cea <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c82:	3334      	adds	r3, #52	@ 0x34
 8008c84:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7fd fe1f 	bl	80068cc <ld_word>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	461a      	mov	r2, r3
 8008c92:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d127      	bne.n	8008cea <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9c:	3334      	adds	r3, #52	@ 0x34
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fd fe2c 	bl	80068fc <ld_dword>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8008d1c <find_volume+0x490>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d11e      	bne.n	8008cea <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cae:	3334      	adds	r3, #52	@ 0x34
 8008cb0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7fd fe21 	bl	80068fc <ld_dword>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	4a18      	ldr	r2, [pc, #96]	@ (8008d20 <find_volume+0x494>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d113      	bne.n	8008cea <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc4:	3334      	adds	r3, #52	@ 0x34
 8008cc6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7fd fe16 	bl	80068fc <ld_dword>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd8:	3334      	adds	r3, #52	@ 0x34
 8008cda:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7fd fe0c 	bl	80068fc <ld_dword>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cec:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008cf0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8008d24 <find_volume+0x498>)
 8008cf4:	881b      	ldrh	r3, [r3, #0]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	b29a      	uxth	r2, r3
 8008cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8008d24 <find_volume+0x498>)
 8008cfc:	801a      	strh	r2, [r3, #0]
 8008cfe:	4b09      	ldr	r3, [pc, #36]	@ (8008d24 <find_volume+0x498>)
 8008d00:	881a      	ldrh	r2, [r3, #0]
 8008d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d04:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d08:	4a07      	ldr	r2, [pc, #28]	@ (8008d28 <find_volume+0x49c>)
 8008d0a:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008d0c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008d0e:	f7fe f825 	bl	8006d5c <clear_lock>
#endif
	return FR_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3758      	adds	r7, #88	@ 0x58
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	41615252 	.word	0x41615252
 8008d20:	61417272 	.word	0x61417272
 8008d24:	20010c70 	.word	0x20010c70
 8008d28:	20010c94 	.word	0x20010c94

08008d2c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008d36:	2309      	movs	r3, #9
 8008d38:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d01c      	beq.n	8008d7a <validate+0x4e>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d018      	beq.n	8008d7a <validate+0x4e>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d013      	beq.n	8008d7a <validate+0x4e>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	889a      	ldrh	r2, [r3, #4]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	88db      	ldrh	r3, [r3, #6]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d10c      	bne.n	8008d7a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	785b      	ldrb	r3, [r3, #1]
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7fd fd10 	bl	800678c <disk_status>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d101      	bne.n	8008d7a <validate+0x4e>
			res = FR_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d102      	bne.n	8008d86 <validate+0x5a>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	e000      	b.n	8008d88 <validate+0x5c>
 8008d86:	2300      	movs	r3, #0
 8008d88:	683a      	ldr	r2, [r7, #0]
 8008d8a:	6013      	str	r3, [r2, #0]
	return res;
 8008d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
	...

08008d98 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b088      	sub	sp, #32
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	4613      	mov	r3, r2
 8008da4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008daa:	f107 0310 	add.w	r3, r7, #16
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7ff fcd1 	bl	8008756 <get_ldnumber>
 8008db4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	da01      	bge.n	8008dc0 <f_mount+0x28>
 8008dbc:	230b      	movs	r3, #11
 8008dbe:	e02b      	b.n	8008e18 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008dc0:	4a17      	ldr	r2, [pc, #92]	@ (8008e20 <f_mount+0x88>)
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dc8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d005      	beq.n	8008ddc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008dd0:	69b8      	ldr	r0, [r7, #24]
 8008dd2:	f7fd ffc3 	bl	8006d5c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d002      	beq.n	8008de8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2200      	movs	r2, #0
 8008de6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	490d      	ldr	r1, [pc, #52]	@ (8008e20 <f_mount+0x88>)
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d002      	beq.n	8008dfe <f_mount+0x66>
 8008df8:	79fb      	ldrb	r3, [r7, #7]
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d001      	beq.n	8008e02 <f_mount+0x6a>
 8008dfe:	2300      	movs	r3, #0
 8008e00:	e00a      	b.n	8008e18 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008e02:	f107 010c 	add.w	r1, r7, #12
 8008e06:	f107 0308 	add.w	r3, r7, #8
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7ff fd3d 	bl	800888c <find_volume>
 8008e12:	4603      	mov	r3, r0
 8008e14:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3720      	adds	r7, #32
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	20010c6c 	.word	0x20010c6c

08008e24 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b09a      	sub	sp, #104	@ 0x68
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d101      	bne.n	8008e3c <f_open+0x18>
 8008e38:	2309      	movs	r3, #9
 8008e3a:	e1a9      	b.n	8009190 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008e3c:	79fb      	ldrb	r3, [r7, #7]
 8008e3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e42:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008e44:	79fa      	ldrb	r2, [r7, #7]
 8008e46:	f107 0114 	add.w	r1, r7, #20
 8008e4a:	f107 0308 	add.w	r3, r7, #8
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7ff fd1c 	bl	800888c <find_volume>
 8008e54:	4603      	mov	r3, r0
 8008e56:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8008e5a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	f040 818d 	bne.w	800917e <f_open+0x35a>
		dj.obj.fs = fs;
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	f107 0318 	add.w	r3, r7, #24
 8008e6e:	4611      	mov	r1, r2
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7ff fbff 	bl	8008674 <follow_path>
 8008e76:	4603      	mov	r3, r0
 8008e78:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008e7c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d118      	bne.n	8008eb6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008e84:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008e88:	b25b      	sxtb	r3, r3
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	da03      	bge.n	8008e96 <f_open+0x72>
				res = FR_INVALID_NAME;
 8008e8e:	2306      	movs	r3, #6
 8008e90:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008e94:	e00f      	b.n	8008eb6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008e96:	79fb      	ldrb	r3, [r7, #7]
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	bf8c      	ite	hi
 8008e9c:	2301      	movhi	r3, #1
 8008e9e:	2300      	movls	r3, #0
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	f107 0318 	add.w	r3, r7, #24
 8008ea8:	4611      	mov	r1, r2
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7fd fe0e 	bl	8006acc <chk_lock>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008eb6:	79fb      	ldrb	r3, [r7, #7]
 8008eb8:	f003 031c 	and.w	r3, r3, #28
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d07f      	beq.n	8008fc0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8008ec0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d017      	beq.n	8008ef8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008ec8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008ecc:	2b04      	cmp	r3, #4
 8008ece:	d10e      	bne.n	8008eee <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008ed0:	f7fd fe58 	bl	8006b84 <enq_lock>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d006      	beq.n	8008ee8 <f_open+0xc4>
 8008eda:	f107 0318 	add.w	r3, r7, #24
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7ff f83a 	bl	8007f58 <dir_register>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	e000      	b.n	8008eea <f_open+0xc6>
 8008ee8:	2312      	movs	r3, #18
 8008eea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008eee:	79fb      	ldrb	r3, [r7, #7]
 8008ef0:	f043 0308 	orr.w	r3, r3, #8
 8008ef4:	71fb      	strb	r3, [r7, #7]
 8008ef6:	e010      	b.n	8008f1a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008ef8:	7fbb      	ldrb	r3, [r7, #30]
 8008efa:	f003 0311 	and.w	r3, r3, #17
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d003      	beq.n	8008f0a <f_open+0xe6>
					res = FR_DENIED;
 8008f02:	2307      	movs	r3, #7
 8008f04:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008f08:	e007      	b.n	8008f1a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008f0a:	79fb      	ldrb	r3, [r7, #7]
 8008f0c:	f003 0304 	and.w	r3, r3, #4
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d002      	beq.n	8008f1a <f_open+0xf6>
 8008f14:	2308      	movs	r3, #8
 8008f16:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008f1a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d168      	bne.n	8008ff4 <f_open+0x1d0>
 8008f22:	79fb      	ldrb	r3, [r7, #7]
 8008f24:	f003 0308 	and.w	r3, r3, #8
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d063      	beq.n	8008ff4 <f_open+0x1d0>
				dw = GET_FATTIME();
 8008f2c:	f7fd f9ec 	bl	8006308 <get_fattime>
 8008f30:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f34:	330e      	adds	r3, #14
 8008f36:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7fd fd1d 	bl	8006978 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f40:	3316      	adds	r3, #22
 8008f42:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7fd fd17 	bl	8006978 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f4c:	330b      	adds	r3, #11
 8008f4e:	2220      	movs	r2, #32
 8008f50:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008f56:	4611      	mov	r1, r2
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7fe fc6b 	bl	8007834 <ld_clust>
 8008f5e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008f64:	2200      	movs	r2, #0
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7fe fc83 	bl	8007872 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f6e:	331c      	adds	r3, #28
 8008f70:	2100      	movs	r1, #0
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7fd fd00 	bl	8006978 <st_dword>
					fs->wflag = 1;
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008f7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d037      	beq.n	8008ff4 <f_open+0x1d0>
						dw = fs->winsect;
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f88:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8008f8a:	f107 0318 	add.w	r3, r7, #24
 8008f8e:	2200      	movs	r2, #0
 8008f90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fe f996 	bl	80072c4 <remove_chain>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8008f9e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d126      	bne.n	8008ff4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fd ff3e 	bl	8006e2c <move_window>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008fba:	3a01      	subs	r2, #1
 8008fbc:	611a      	str	r2, [r3, #16]
 8008fbe:	e019      	b.n	8008ff4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008fc0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d115      	bne.n	8008ff4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008fc8:	7fbb      	ldrb	r3, [r7, #30]
 8008fca:	f003 0310 	and.w	r3, r3, #16
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d003      	beq.n	8008fda <f_open+0x1b6>
					res = FR_NO_FILE;
 8008fd2:	2304      	movs	r3, #4
 8008fd4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008fd8:	e00c      	b.n	8008ff4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008fda:	79fb      	ldrb	r3, [r7, #7]
 8008fdc:	f003 0302 	and.w	r3, r3, #2
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d007      	beq.n	8008ff4 <f_open+0x1d0>
 8008fe4:	7fbb      	ldrb	r3, [r7, #30]
 8008fe6:	f003 0301 	and.w	r3, r3, #1
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d002      	beq.n	8008ff4 <f_open+0x1d0>
						res = FR_DENIED;
 8008fee:	2307      	movs	r3, #7
 8008ff0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008ff4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d126      	bne.n	800904a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008ffc:	79fb      	ldrb	r3, [r7, #7]
 8008ffe:	f003 0308 	and.w	r3, r3, #8
 8009002:	2b00      	cmp	r3, #0
 8009004:	d003      	beq.n	800900e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8009006:	79fb      	ldrb	r3, [r7, #7]
 8009008:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800900c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8009016:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800901c:	79fb      	ldrb	r3, [r7, #7]
 800901e:	2b01      	cmp	r3, #1
 8009020:	bf8c      	ite	hi
 8009022:	2301      	movhi	r3, #1
 8009024:	2300      	movls	r3, #0
 8009026:	b2db      	uxtb	r3, r3
 8009028:	461a      	mov	r2, r3
 800902a:	f107 0318 	add.w	r3, r7, #24
 800902e:	4611      	mov	r1, r2
 8009030:	4618      	mov	r0, r3
 8009032:	f7fd fdc9 	bl	8006bc8 <inc_lock>
 8009036:	4602      	mov	r2, r0
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d102      	bne.n	800904a <f_open+0x226>
 8009044:	2302      	movs	r3, #2
 8009046:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800904a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800904e:	2b00      	cmp	r3, #0
 8009050:	f040 8095 	bne.w	800917e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009058:	4611      	mov	r1, r2
 800905a:	4618      	mov	r0, r3
 800905c:	f7fe fbea 	bl	8007834 <ld_clust>
 8009060:	4602      	mov	r2, r0
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009068:	331c      	adds	r3, #28
 800906a:	4618      	mov	r0, r3
 800906c:	f7fd fc46 	bl	80068fc <ld_dword>
 8009070:	4602      	mov	r2, r0
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800907c:	697a      	ldr	r2, [r7, #20]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	88da      	ldrh	r2, [r3, #6]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	79fa      	ldrb	r2, [r7, #7]
 800908e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2200      	movs	r2, #0
 8009094:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2200      	movs	r2, #0
 800909a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2200      	movs	r2, #0
 80090a0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	3330      	adds	r3, #48	@ 0x30
 80090a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80090aa:	2100      	movs	r1, #0
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7fd fcb0 	bl	8006a12 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80090b2:	79fb      	ldrb	r3, [r7, #7]
 80090b4:	f003 0320 	and.w	r3, r3, #32
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d060      	beq.n	800917e <f_open+0x35a>
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d05c      	beq.n	800917e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	68da      	ldr	r2, [r3, #12]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	895b      	ldrh	r3, [r3, #10]
 80090d0:	025b      	lsls	r3, r3, #9
 80090d2:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80090e0:	e016      	b.n	8009110 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fd ff5b 	bl	8006fa2 <get_fat>
 80090ec:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80090ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d802      	bhi.n	80090fa <f_open+0x2d6>
 80090f4:	2302      	movs	r3, #2
 80090f6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80090fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80090fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009100:	d102      	bne.n	8009108 <f_open+0x2e4>
 8009102:	2301      	movs	r3, #1
 8009104:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009108:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800910a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009110:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009114:	2b00      	cmp	r3, #0
 8009116:	d103      	bne.n	8009120 <f_open+0x2fc>
 8009118:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800911a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800911c:	429a      	cmp	r2, r3
 800911e:	d8e0      	bhi.n	80090e2 <f_open+0x2be>
				}
				fp->clust = clst;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009124:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009126:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800912a:	2b00      	cmp	r3, #0
 800912c:	d127      	bne.n	800917e <f_open+0x35a>
 800912e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009134:	2b00      	cmp	r3, #0
 8009136:	d022      	beq.n	800917e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800913c:	4618      	mov	r0, r3
 800913e:	f7fd ff11 	bl	8006f64 <clust2sect>
 8009142:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8009144:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009146:	2b00      	cmp	r3, #0
 8009148:	d103      	bne.n	8009152 <f_open+0x32e>
						res = FR_INT_ERR;
 800914a:	2302      	movs	r3, #2
 800914c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009150:	e015      	b.n	800917e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009152:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009154:	0a5a      	lsrs	r2, r3, #9
 8009156:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009158:	441a      	add	r2, r3
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	7858      	ldrb	r0, [r3, #1]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6a1a      	ldr	r2, [r3, #32]
 800916c:	2301      	movs	r3, #1
 800916e:	f7fd fb4f 	bl	8006810 <disk_read>
 8009172:	4603      	mov	r3, r0
 8009174:	2b00      	cmp	r3, #0
 8009176:	d002      	beq.n	800917e <f_open+0x35a>
 8009178:	2301      	movs	r3, #1
 800917a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800917e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009182:	2b00      	cmp	r3, #0
 8009184:	d002      	beq.n	800918c <f_open+0x368>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2200      	movs	r2, #0
 800918a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800918c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8009190:	4618      	mov	r0, r3
 8009192:	3768      	adds	r7, #104	@ 0x68
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b08e      	sub	sp, #56	@ 0x38
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]
 80091a4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	2200      	movs	r2, #0
 80091ae:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f107 0214 	add.w	r2, r7, #20
 80091b6:	4611      	mov	r1, r2
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7ff fdb7 	bl	8008d2c <validate>
 80091be:	4603      	mov	r3, r0
 80091c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80091c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d107      	bne.n	80091dc <f_read+0x44>
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	7d5b      	ldrb	r3, [r3, #21]
 80091d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80091d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d002      	beq.n	80091e2 <f_read+0x4a>
 80091dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80091e0:	e115      	b.n	800940e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	7d1b      	ldrb	r3, [r3, #20]
 80091e6:	f003 0301 	and.w	r3, r3, #1
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d101      	bne.n	80091f2 <f_read+0x5a>
 80091ee:	2307      	movs	r3, #7
 80091f0:	e10d      	b.n	800940e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	68da      	ldr	r2, [r3, #12]
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	699b      	ldr	r3, [r3, #24]
 80091fa:	1ad3      	subs	r3, r2, r3
 80091fc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	6a3b      	ldr	r3, [r7, #32]
 8009202:	429a      	cmp	r2, r3
 8009204:	f240 80fe 	bls.w	8009404 <f_read+0x26c>
 8009208:	6a3b      	ldr	r3, [r7, #32]
 800920a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800920c:	e0fa      	b.n	8009404 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	699b      	ldr	r3, [r3, #24]
 8009212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009216:	2b00      	cmp	r3, #0
 8009218:	f040 80c6 	bne.w	80093a8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	699b      	ldr	r3, [r3, #24]
 8009220:	0a5b      	lsrs	r3, r3, #9
 8009222:	697a      	ldr	r2, [r7, #20]
 8009224:	8952      	ldrh	r2, [r2, #10]
 8009226:	3a01      	subs	r2, #1
 8009228:	4013      	ands	r3, r2
 800922a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d12f      	bne.n	8009292 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	699b      	ldr	r3, [r3, #24]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d103      	bne.n	8009242 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009240:	e013      	b.n	800926a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009246:	2b00      	cmp	r3, #0
 8009248:	d007      	beq.n	800925a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	699b      	ldr	r3, [r3, #24]
 800924e:	4619      	mov	r1, r3
 8009250:	68f8      	ldr	r0, [r7, #12]
 8009252:	f7fe f934 	bl	80074be <clmt_clust>
 8009256:	6338      	str	r0, [r7, #48]	@ 0x30
 8009258:	e007      	b.n	800926a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	69db      	ldr	r3, [r3, #28]
 8009260:	4619      	mov	r1, r3
 8009262:	4610      	mov	r0, r2
 8009264:	f7fd fe9d 	bl	8006fa2 <get_fat>
 8009268:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800926a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800926c:	2b01      	cmp	r3, #1
 800926e:	d804      	bhi.n	800927a <f_read+0xe2>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2202      	movs	r2, #2
 8009274:	755a      	strb	r2, [r3, #21]
 8009276:	2302      	movs	r3, #2
 8009278:	e0c9      	b.n	800940e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800927a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800927c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009280:	d104      	bne.n	800928c <f_read+0xf4>
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2201      	movs	r2, #1
 8009286:	755a      	strb	r2, [r3, #21]
 8009288:	2301      	movs	r3, #1
 800928a:	e0c0      	b.n	800940e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009290:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009292:	697a      	ldr	r2, [r7, #20]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	69db      	ldr	r3, [r3, #28]
 8009298:	4619      	mov	r1, r3
 800929a:	4610      	mov	r0, r2
 800929c:	f7fd fe62 	bl	8006f64 <clust2sect>
 80092a0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d104      	bne.n	80092b2 <f_read+0x11a>
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2202      	movs	r2, #2
 80092ac:	755a      	strb	r2, [r3, #21]
 80092ae:	2302      	movs	r3, #2
 80092b0:	e0ad      	b.n	800940e <f_read+0x276>
			sect += csect;
 80092b2:	69ba      	ldr	r2, [r7, #24]
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	4413      	add	r3, r2
 80092b8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	0a5b      	lsrs	r3, r3, #9
 80092be:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80092c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d039      	beq.n	800933a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80092c6:	69fa      	ldr	r2, [r7, #28]
 80092c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ca:	4413      	add	r3, r2
 80092cc:	697a      	ldr	r2, [r7, #20]
 80092ce:	8952      	ldrh	r2, [r2, #10]
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d905      	bls.n	80092e0 <f_read+0x148>
					cc = fs->csize - csect;
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	895b      	ldrh	r3, [r3, #10]
 80092d8:	461a      	mov	r2, r3
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	1ad3      	subs	r3, r2, r3
 80092de:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	7858      	ldrb	r0, [r3, #1]
 80092e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e6:	69ba      	ldr	r2, [r7, #24]
 80092e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80092ea:	f7fd fa91 	bl	8006810 <disk_read>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d004      	beq.n	80092fe <f_read+0x166>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2201      	movs	r2, #1
 80092f8:	755a      	strb	r2, [r3, #21]
 80092fa:	2301      	movs	r3, #1
 80092fc:	e087      	b.n	800940e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	7d1b      	ldrb	r3, [r3, #20]
 8009302:	b25b      	sxtb	r3, r3
 8009304:	2b00      	cmp	r3, #0
 8009306:	da14      	bge.n	8009332 <f_read+0x19a>
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6a1a      	ldr	r2, [r3, #32]
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009312:	429a      	cmp	r2, r3
 8009314:	d90d      	bls.n	8009332 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6a1a      	ldr	r2, [r3, #32]
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	025b      	lsls	r3, r3, #9
 8009320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009322:	18d0      	adds	r0, r2, r3
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	3330      	adds	r3, #48	@ 0x30
 8009328:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800932c:	4619      	mov	r1, r3
 800932e:	f7fd fb4f 	bl	80069d0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009334:	025b      	lsls	r3, r3, #9
 8009336:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8009338:	e050      	b.n	80093dc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	6a1b      	ldr	r3, [r3, #32]
 800933e:	69ba      	ldr	r2, [r7, #24]
 8009340:	429a      	cmp	r2, r3
 8009342:	d02e      	beq.n	80093a2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	7d1b      	ldrb	r3, [r3, #20]
 8009348:	b25b      	sxtb	r3, r3
 800934a:	2b00      	cmp	r3, #0
 800934c:	da18      	bge.n	8009380 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	7858      	ldrb	r0, [r3, #1]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6a1a      	ldr	r2, [r3, #32]
 800935c:	2301      	movs	r3, #1
 800935e:	f7fd fa77 	bl	8006850 <disk_write>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d004      	beq.n	8009372 <f_read+0x1da>
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2201      	movs	r2, #1
 800936c:	755a      	strb	r2, [r3, #21]
 800936e:	2301      	movs	r3, #1
 8009370:	e04d      	b.n	800940e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	7d1b      	ldrb	r3, [r3, #20]
 8009376:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800937a:	b2da      	uxtb	r2, r3
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	7858      	ldrb	r0, [r3, #1]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800938a:	2301      	movs	r3, #1
 800938c:	69ba      	ldr	r2, [r7, #24]
 800938e:	f7fd fa3f 	bl	8006810 <disk_read>
 8009392:	4603      	mov	r3, r0
 8009394:	2b00      	cmp	r3, #0
 8009396:	d004      	beq.n	80093a2 <f_read+0x20a>
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2201      	movs	r2, #1
 800939c:	755a      	strb	r2, [r3, #21]
 800939e:	2301      	movs	r3, #1
 80093a0:	e035      	b.n	800940e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	69ba      	ldr	r2, [r7, #24]
 80093a6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	699b      	ldr	r3, [r3, #24]
 80093ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093b0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80093b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80093b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d901      	bls.n	80093c2 <f_read+0x22a>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093d0:	4413      	add	r3, r2
 80093d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093d4:	4619      	mov	r1, r3
 80093d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80093d8:	f7fd fafa 	bl	80069d0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80093dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e0:	4413      	add	r3, r2
 80093e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	699a      	ldr	r2, [r3, #24]
 80093e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ea:	441a      	add	r2, r3
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	619a      	str	r2, [r3, #24]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f6:	441a      	add	r2, r3
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	601a      	str	r2, [r3, #0]
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009400:	1ad3      	subs	r3, r2, r3
 8009402:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2b00      	cmp	r3, #0
 8009408:	f47f af01 	bne.w	800920e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	3738      	adds	r7, #56	@ 0x38
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b086      	sub	sp, #24
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f107 0208 	add.w	r2, r7, #8
 8009424:	4611      	mov	r1, r2
 8009426:	4618      	mov	r0, r3
 8009428:	f7ff fc80 	bl	8008d2c <validate>
 800942c:	4603      	mov	r3, r0
 800942e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009430:	7dfb      	ldrb	r3, [r7, #23]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d168      	bne.n	8009508 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	7d1b      	ldrb	r3, [r3, #20]
 800943a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800943e:	2b00      	cmp	r3, #0
 8009440:	d062      	beq.n	8009508 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	7d1b      	ldrb	r3, [r3, #20]
 8009446:	b25b      	sxtb	r3, r3
 8009448:	2b00      	cmp	r3, #0
 800944a:	da15      	bge.n	8009478 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	7858      	ldrb	r0, [r3, #1]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a1a      	ldr	r2, [r3, #32]
 800945a:	2301      	movs	r3, #1
 800945c:	f7fd f9f8 	bl	8006850 <disk_write>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d001      	beq.n	800946a <f_sync+0x54>
 8009466:	2301      	movs	r3, #1
 8009468:	e04f      	b.n	800950a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	7d1b      	ldrb	r3, [r3, #20]
 800946e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009472:	b2da      	uxtb	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009478:	f7fc ff46 	bl	8006308 <get_fattime>
 800947c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009484:	4619      	mov	r1, r3
 8009486:	4610      	mov	r0, r2
 8009488:	f7fd fcd0 	bl	8006e2c <move_window>
 800948c:	4603      	mov	r3, r0
 800948e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009490:	7dfb      	ldrb	r3, [r7, #23]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d138      	bne.n	8009508 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800949a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	330b      	adds	r3, #11
 80094a0:	781a      	ldrb	r2, [r3, #0]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	330b      	adds	r3, #11
 80094a6:	f042 0220 	orr.w	r2, r2, #32
 80094aa:	b2d2      	uxtb	r2, r2
 80094ac:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6818      	ldr	r0, [r3, #0]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	461a      	mov	r2, r3
 80094b8:	68f9      	ldr	r1, [r7, #12]
 80094ba:	f7fe f9da 	bl	8007872 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f103 021c 	add.w	r2, r3, #28
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	4619      	mov	r1, r3
 80094ca:	4610      	mov	r0, r2
 80094cc:	f7fd fa54 	bl	8006978 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	3316      	adds	r3, #22
 80094d4:	6939      	ldr	r1, [r7, #16]
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7fd fa4e 	bl	8006978 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	3312      	adds	r3, #18
 80094e0:	2100      	movs	r1, #0
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7fd fa2d 	bl	8006942 <st_word>
					fs->wflag = 1;
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	2201      	movs	r2, #1
 80094ec:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7fd fcc9 	bl	8006e88 <sync_fs>
 80094f6:	4603      	mov	r3, r0
 80094f8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	7d1b      	ldrb	r3, [r3, #20]
 80094fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009502:	b2da      	uxtb	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009508:	7dfb      	ldrb	r3, [r7, #23]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3718      	adds	r7, #24
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b084      	sub	sp, #16
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f7ff ff7b 	bl	8009416 <f_sync>
 8009520:	4603      	mov	r3, r0
 8009522:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009524:	7bfb      	ldrb	r3, [r7, #15]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d118      	bne.n	800955c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f107 0208 	add.w	r2, r7, #8
 8009530:	4611      	mov	r1, r2
 8009532:	4618      	mov	r0, r3
 8009534:	f7ff fbfa 	bl	8008d2c <validate>
 8009538:	4603      	mov	r3, r0
 800953a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800953c:	7bfb      	ldrb	r3, [r7, #15]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d10c      	bne.n	800955c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	4618      	mov	r0, r3
 8009548:	f7fd fbcc 	bl	8006ce4 <dec_lock>
 800954c:	4603      	mov	r3, r0
 800954e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009550:	7bfb      	ldrb	r3, [r7, #15]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d102      	bne.n	800955c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800955c:	7bfb      	ldrb	r3, [r7, #15]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b086      	sub	sp, #24
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
 800956e:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d101      	bne.n	800957a <f_opendir+0x14>
 8009576:	2309      	movs	r3, #9
 8009578:	e064      	b.n	8009644 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800957e:	f107 010c 	add.w	r1, r7, #12
 8009582:	463b      	mov	r3, r7
 8009584:	2200      	movs	r2, #0
 8009586:	4618      	mov	r0, r3
 8009588:	f7ff f980 	bl	800888c <find_volume>
 800958c:	4603      	mov	r3, r0
 800958e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009590:	7dfb      	ldrb	r3, [r7, #23]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d14f      	bne.n	8009636 <f_opendir+0xd0>
		obj->fs = fs;
 8009596:	68fa      	ldr	r2, [r7, #12]
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	4619      	mov	r1, r3
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f7ff f867 	bl	8008674 <follow_path>
 80095a6:	4603      	mov	r3, r0
 80095a8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80095aa:	7dfb      	ldrb	r3, [r7, #23]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d13d      	bne.n	800962c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80095b6:	b25b      	sxtb	r3, r3
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	db12      	blt.n	80095e2 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	799b      	ldrb	r3, [r3, #6]
 80095c0:	f003 0310 	and.w	r3, r3, #16
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d00a      	beq.n	80095de <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6a1b      	ldr	r3, [r3, #32]
 80095ce:	4619      	mov	r1, r3
 80095d0:	4610      	mov	r0, r2
 80095d2:	f7fe f92f 	bl	8007834 <ld_clust>
 80095d6:	4602      	mov	r2, r0
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	609a      	str	r2, [r3, #8]
 80095dc:	e001      	b.n	80095e2 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80095de:	2305      	movs	r3, #5
 80095e0:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80095e2:	7dfb      	ldrb	r3, [r7, #23]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d121      	bne.n	800962c <f_opendir+0xc6>
				obj->id = fs->id;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	88da      	ldrh	r2, [r3, #6]
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80095f0:	2100      	movs	r1, #0
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f7fd ff97 	bl	8007526 <dir_sdi>
 80095f8:	4603      	mov	r3, r0
 80095fa:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80095fc:	7dfb      	ldrb	r3, [r7, #23]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d114      	bne.n	800962c <f_opendir+0xc6>
					if (obj->sclust) {
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d00d      	beq.n	8009626 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800960a:	2100      	movs	r1, #0
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f7fd fadb 	bl	8006bc8 <inc_lock>
 8009612:	4602      	mov	r2, r0
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	691b      	ldr	r3, [r3, #16]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d105      	bne.n	800962c <f_opendir+0xc6>
 8009620:	2312      	movs	r3, #18
 8009622:	75fb      	strb	r3, [r7, #23]
 8009624:	e002      	b.n	800962c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	2200      	movs	r2, #0
 800962a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800962c:	7dfb      	ldrb	r3, [r7, #23]
 800962e:	2b04      	cmp	r3, #4
 8009630:	d101      	bne.n	8009636 <f_opendir+0xd0>
 8009632:	2305      	movs	r3, #5
 8009634:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8009636:	7dfb      	ldrb	r3, [r7, #23]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d002      	beq.n	8009642 <f_opendir+0xdc>
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	2200      	movs	r2, #0
 8009640:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009642:	7dfb      	ldrb	r3, [r7, #23]
}
 8009644:	4618      	mov	r0, r3
 8009646:	3718      	adds	r7, #24
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f107 0208 	add.w	r2, r7, #8
 800965c:	4611      	mov	r1, r2
 800965e:	4618      	mov	r0, r3
 8009660:	f7ff fb64 	bl	8008d2c <validate>
 8009664:	4603      	mov	r3, r0
 8009666:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009668:	7bfb      	ldrb	r3, [r7, #15]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d126      	bne.n	80096bc <f_readdir+0x70>
		if (!fno) {
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d106      	bne.n	8009682 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8009674:	2100      	movs	r1, #0
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f7fd ff55 	bl	8007526 <dir_sdi>
 800967c:	4603      	mov	r3, r0
 800967e:	73fb      	strb	r3, [r7, #15]
 8009680:	e01c      	b.n	80096bc <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8009682:	2100      	movs	r1, #0
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f7fe fb00 	bl	8007c8a <dir_read>
 800968a:	4603      	mov	r3, r0
 800968c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800968e:	7bfb      	ldrb	r3, [r7, #15]
 8009690:	2b04      	cmp	r3, #4
 8009692:	d101      	bne.n	8009698 <f_readdir+0x4c>
 8009694:	2300      	movs	r3, #0
 8009696:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8009698:	7bfb      	ldrb	r3, [r7, #15]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d10e      	bne.n	80096bc <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800969e:	6839      	ldr	r1, [r7, #0]
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f7fe fd51 	bl	8008148 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80096a6:	2100      	movs	r1, #0
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f7fd ffb7 	bl	800761c <dir_next>
 80096ae:	4603      	mov	r3, r0
 80096b0:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80096b2:	7bfb      	ldrb	r3, [r7, #15]
 80096b4:	2b04      	cmp	r3, #4
 80096b6:	d101      	bne.n	80096bc <f_readdir+0x70>
 80096b8:	2300      	movs	r3, #0
 80096ba:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80096bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
	...

080096c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b087      	sub	sp, #28
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	4613      	mov	r3, r2
 80096d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80096d6:	2301      	movs	r3, #1
 80096d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80096da:	2300      	movs	r3, #0
 80096dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80096de:	4b1f      	ldr	r3, [pc, #124]	@ (800975c <FATFS_LinkDriverEx+0x94>)
 80096e0:	7a5b      	ldrb	r3, [r3, #9]
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d131      	bne.n	800974c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80096e8:	4b1c      	ldr	r3, [pc, #112]	@ (800975c <FATFS_LinkDriverEx+0x94>)
 80096ea:	7a5b      	ldrb	r3, [r3, #9]
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	461a      	mov	r2, r3
 80096f0:	4b1a      	ldr	r3, [pc, #104]	@ (800975c <FATFS_LinkDriverEx+0x94>)
 80096f2:	2100      	movs	r1, #0
 80096f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80096f6:	4b19      	ldr	r3, [pc, #100]	@ (800975c <FATFS_LinkDriverEx+0x94>)
 80096f8:	7a5b      	ldrb	r3, [r3, #9]
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	4a17      	ldr	r2, [pc, #92]	@ (800975c <FATFS_LinkDriverEx+0x94>)
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	4413      	add	r3, r2
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009706:	4b15      	ldr	r3, [pc, #84]	@ (800975c <FATFS_LinkDriverEx+0x94>)
 8009708:	7a5b      	ldrb	r3, [r3, #9]
 800970a:	b2db      	uxtb	r3, r3
 800970c:	461a      	mov	r2, r3
 800970e:	4b13      	ldr	r3, [pc, #76]	@ (800975c <FATFS_LinkDriverEx+0x94>)
 8009710:	4413      	add	r3, r2
 8009712:	79fa      	ldrb	r2, [r7, #7]
 8009714:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009716:	4b11      	ldr	r3, [pc, #68]	@ (800975c <FATFS_LinkDriverEx+0x94>)
 8009718:	7a5b      	ldrb	r3, [r3, #9]
 800971a:	b2db      	uxtb	r3, r3
 800971c:	1c5a      	adds	r2, r3, #1
 800971e:	b2d1      	uxtb	r1, r2
 8009720:	4a0e      	ldr	r2, [pc, #56]	@ (800975c <FATFS_LinkDriverEx+0x94>)
 8009722:	7251      	strb	r1, [r2, #9]
 8009724:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009726:	7dbb      	ldrb	r3, [r7, #22]
 8009728:	3330      	adds	r3, #48	@ 0x30
 800972a:	b2da      	uxtb	r2, r3
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	3301      	adds	r3, #1
 8009734:	223a      	movs	r2, #58	@ 0x3a
 8009736:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	3302      	adds	r3, #2
 800973c:	222f      	movs	r2, #47	@ 0x2f
 800973e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	3303      	adds	r3, #3
 8009744:	2200      	movs	r2, #0
 8009746:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009748:	2300      	movs	r3, #0
 800974a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800974c:	7dfb      	ldrb	r3, [r7, #23]
}
 800974e:	4618      	mov	r0, r3
 8009750:	371c      	adds	r7, #28
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	20010e94 	.word	0x20010e94

08009760 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800976a:	2200      	movs	r2, #0
 800976c:	6839      	ldr	r1, [r7, #0]
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7ff ffaa 	bl	80096c8 <FATFS_LinkDriverEx>
 8009774:	4603      	mov	r3, r0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
	...

08009780 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	4603      	mov	r3, r0
 8009788:	6039      	str	r1, [r7, #0]
 800978a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800978c:	88fb      	ldrh	r3, [r7, #6]
 800978e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009790:	d802      	bhi.n	8009798 <ff_convert+0x18>
		c = chr;
 8009792:	88fb      	ldrh	r3, [r7, #6]
 8009794:	81fb      	strh	r3, [r7, #14]
 8009796:	e025      	b.n	80097e4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00b      	beq.n	80097b6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800979e:	88fb      	ldrh	r3, [r7, #6]
 80097a0:	2bff      	cmp	r3, #255	@ 0xff
 80097a2:	d805      	bhi.n	80097b0 <ff_convert+0x30>
 80097a4:	88fb      	ldrh	r3, [r7, #6]
 80097a6:	3b80      	subs	r3, #128	@ 0x80
 80097a8:	4a12      	ldr	r2, [pc, #72]	@ (80097f4 <ff_convert+0x74>)
 80097aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097ae:	e000      	b.n	80097b2 <ff_convert+0x32>
 80097b0:	2300      	movs	r3, #0
 80097b2:	81fb      	strh	r3, [r7, #14]
 80097b4:	e016      	b.n	80097e4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80097b6:	2300      	movs	r3, #0
 80097b8:	81fb      	strh	r3, [r7, #14]
 80097ba:	e009      	b.n	80097d0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80097bc:	89fb      	ldrh	r3, [r7, #14]
 80097be:	4a0d      	ldr	r2, [pc, #52]	@ (80097f4 <ff_convert+0x74>)
 80097c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097c4:	88fa      	ldrh	r2, [r7, #6]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d006      	beq.n	80097d8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80097ca:	89fb      	ldrh	r3, [r7, #14]
 80097cc:	3301      	adds	r3, #1
 80097ce:	81fb      	strh	r3, [r7, #14]
 80097d0:	89fb      	ldrh	r3, [r7, #14]
 80097d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80097d4:	d9f2      	bls.n	80097bc <ff_convert+0x3c>
 80097d6:	e000      	b.n	80097da <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80097d8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80097da:	89fb      	ldrh	r3, [r7, #14]
 80097dc:	3380      	adds	r3, #128	@ 0x80
 80097de:	b29b      	uxth	r3, r3
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80097e4:	89fb      	ldrh	r3, [r7, #14]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3714      	adds	r7, #20
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	0800a558 	.word	0x0800a558

080097f8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b087      	sub	sp, #28
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	4603      	mov	r3, r0
 8009800:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009802:	88fb      	ldrh	r3, [r7, #6]
 8009804:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009808:	d201      	bcs.n	800980e <ff_wtoupper+0x16>
 800980a:	4b3e      	ldr	r3, [pc, #248]	@ (8009904 <ff_wtoupper+0x10c>)
 800980c:	e000      	b.n	8009810 <ff_wtoupper+0x18>
 800980e:	4b3e      	ldr	r3, [pc, #248]	@ (8009908 <ff_wtoupper+0x110>)
 8009810:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	1c9a      	adds	r2, r3, #2
 8009816:	617a      	str	r2, [r7, #20]
 8009818:	881b      	ldrh	r3, [r3, #0]
 800981a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800981c:	8a7b      	ldrh	r3, [r7, #18]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d068      	beq.n	80098f4 <ff_wtoupper+0xfc>
 8009822:	88fa      	ldrh	r2, [r7, #6]
 8009824:	8a7b      	ldrh	r3, [r7, #18]
 8009826:	429a      	cmp	r2, r3
 8009828:	d364      	bcc.n	80098f4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	1c9a      	adds	r2, r3, #2
 800982e:	617a      	str	r2, [r7, #20]
 8009830:	881b      	ldrh	r3, [r3, #0]
 8009832:	823b      	strh	r3, [r7, #16]
 8009834:	8a3b      	ldrh	r3, [r7, #16]
 8009836:	0a1b      	lsrs	r3, r3, #8
 8009838:	81fb      	strh	r3, [r7, #14]
 800983a:	8a3b      	ldrh	r3, [r7, #16]
 800983c:	b2db      	uxtb	r3, r3
 800983e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009840:	88fa      	ldrh	r2, [r7, #6]
 8009842:	8a79      	ldrh	r1, [r7, #18]
 8009844:	8a3b      	ldrh	r3, [r7, #16]
 8009846:	440b      	add	r3, r1
 8009848:	429a      	cmp	r2, r3
 800984a:	da49      	bge.n	80098e0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800984c:	89fb      	ldrh	r3, [r7, #14]
 800984e:	2b08      	cmp	r3, #8
 8009850:	d84f      	bhi.n	80098f2 <ff_wtoupper+0xfa>
 8009852:	a201      	add	r2, pc, #4	@ (adr r2, 8009858 <ff_wtoupper+0x60>)
 8009854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009858:	0800987d 	.word	0x0800987d
 800985c:	0800988f 	.word	0x0800988f
 8009860:	080098a5 	.word	0x080098a5
 8009864:	080098ad 	.word	0x080098ad
 8009868:	080098b5 	.word	0x080098b5
 800986c:	080098bd 	.word	0x080098bd
 8009870:	080098c5 	.word	0x080098c5
 8009874:	080098cd 	.word	0x080098cd
 8009878:	080098d5 	.word	0x080098d5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800987c:	88fa      	ldrh	r2, [r7, #6]
 800987e:	8a7b      	ldrh	r3, [r7, #18]
 8009880:	1ad3      	subs	r3, r2, r3
 8009882:	005b      	lsls	r3, r3, #1
 8009884:	697a      	ldr	r2, [r7, #20]
 8009886:	4413      	add	r3, r2
 8009888:	881b      	ldrh	r3, [r3, #0]
 800988a:	80fb      	strh	r3, [r7, #6]
 800988c:	e027      	b.n	80098de <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800988e:	88fa      	ldrh	r2, [r7, #6]
 8009890:	8a7b      	ldrh	r3, [r7, #18]
 8009892:	1ad3      	subs	r3, r2, r3
 8009894:	b29b      	uxth	r3, r3
 8009896:	f003 0301 	and.w	r3, r3, #1
 800989a:	b29b      	uxth	r3, r3
 800989c:	88fa      	ldrh	r2, [r7, #6]
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	80fb      	strh	r3, [r7, #6]
 80098a2:	e01c      	b.n	80098de <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80098a4:	88fb      	ldrh	r3, [r7, #6]
 80098a6:	3b10      	subs	r3, #16
 80098a8:	80fb      	strh	r3, [r7, #6]
 80098aa:	e018      	b.n	80098de <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80098ac:	88fb      	ldrh	r3, [r7, #6]
 80098ae:	3b20      	subs	r3, #32
 80098b0:	80fb      	strh	r3, [r7, #6]
 80098b2:	e014      	b.n	80098de <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80098b4:	88fb      	ldrh	r3, [r7, #6]
 80098b6:	3b30      	subs	r3, #48	@ 0x30
 80098b8:	80fb      	strh	r3, [r7, #6]
 80098ba:	e010      	b.n	80098de <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80098bc:	88fb      	ldrh	r3, [r7, #6]
 80098be:	3b1a      	subs	r3, #26
 80098c0:	80fb      	strh	r3, [r7, #6]
 80098c2:	e00c      	b.n	80098de <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80098c4:	88fb      	ldrh	r3, [r7, #6]
 80098c6:	3308      	adds	r3, #8
 80098c8:	80fb      	strh	r3, [r7, #6]
 80098ca:	e008      	b.n	80098de <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80098cc:	88fb      	ldrh	r3, [r7, #6]
 80098ce:	3b50      	subs	r3, #80	@ 0x50
 80098d0:	80fb      	strh	r3, [r7, #6]
 80098d2:	e004      	b.n	80098de <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80098d4:	88fb      	ldrh	r3, [r7, #6]
 80098d6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80098da:	80fb      	strh	r3, [r7, #6]
 80098dc:	bf00      	nop
			}
			break;
 80098de:	e008      	b.n	80098f2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80098e0:	89fb      	ldrh	r3, [r7, #14]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d195      	bne.n	8009812 <ff_wtoupper+0x1a>
 80098e6:	8a3b      	ldrh	r3, [r7, #16]
 80098e8:	005b      	lsls	r3, r3, #1
 80098ea:	697a      	ldr	r2, [r7, #20]
 80098ec:	4413      	add	r3, r2
 80098ee:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80098f0:	e78f      	b.n	8009812 <ff_wtoupper+0x1a>
			break;
 80098f2:	bf00      	nop
	}

	return chr;
 80098f4:	88fb      	ldrh	r3, [r7, #6]
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	371c      	adds	r7, #28
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr
 8009902:	bf00      	nop
 8009904:	0800a658 	.word	0x0800a658
 8009908:	0800a84c 	.word	0x0800a84c

0800990c <siprintf>:
 800990c:	b40e      	push	{r1, r2, r3}
 800990e:	b500      	push	{lr}
 8009910:	b09c      	sub	sp, #112	@ 0x70
 8009912:	ab1d      	add	r3, sp, #116	@ 0x74
 8009914:	9002      	str	r0, [sp, #8]
 8009916:	9006      	str	r0, [sp, #24]
 8009918:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800991c:	4809      	ldr	r0, [pc, #36]	@ (8009944 <siprintf+0x38>)
 800991e:	9107      	str	r1, [sp, #28]
 8009920:	9104      	str	r1, [sp, #16]
 8009922:	4909      	ldr	r1, [pc, #36]	@ (8009948 <siprintf+0x3c>)
 8009924:	f853 2b04 	ldr.w	r2, [r3], #4
 8009928:	9105      	str	r1, [sp, #20]
 800992a:	6800      	ldr	r0, [r0, #0]
 800992c:	9301      	str	r3, [sp, #4]
 800992e:	a902      	add	r1, sp, #8
 8009930:	f000 f9ce 	bl	8009cd0 <_svfiprintf_r>
 8009934:	9b02      	ldr	r3, [sp, #8]
 8009936:	2200      	movs	r2, #0
 8009938:	701a      	strb	r2, [r3, #0]
 800993a:	b01c      	add	sp, #112	@ 0x70
 800993c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009940:	b003      	add	sp, #12
 8009942:	4770      	bx	lr
 8009944:	20000010 	.word	0x20000010
 8009948:	ffff0208 	.word	0xffff0208

0800994c <_vsniprintf_r>:
 800994c:	b530      	push	{r4, r5, lr}
 800994e:	4614      	mov	r4, r2
 8009950:	2c00      	cmp	r4, #0
 8009952:	b09b      	sub	sp, #108	@ 0x6c
 8009954:	4605      	mov	r5, r0
 8009956:	461a      	mov	r2, r3
 8009958:	da05      	bge.n	8009966 <_vsniprintf_r+0x1a>
 800995a:	238b      	movs	r3, #139	@ 0x8b
 800995c:	6003      	str	r3, [r0, #0]
 800995e:	f04f 30ff 	mov.w	r0, #4294967295
 8009962:	b01b      	add	sp, #108	@ 0x6c
 8009964:	bd30      	pop	{r4, r5, pc}
 8009966:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800996a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800996e:	bf14      	ite	ne
 8009970:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009974:	4623      	moveq	r3, r4
 8009976:	9302      	str	r3, [sp, #8]
 8009978:	9305      	str	r3, [sp, #20]
 800997a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800997e:	9100      	str	r1, [sp, #0]
 8009980:	9104      	str	r1, [sp, #16]
 8009982:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009986:	4669      	mov	r1, sp
 8009988:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800998a:	f000 f9a1 	bl	8009cd0 <_svfiprintf_r>
 800998e:	1c43      	adds	r3, r0, #1
 8009990:	bfbc      	itt	lt
 8009992:	238b      	movlt	r3, #139	@ 0x8b
 8009994:	602b      	strlt	r3, [r5, #0]
 8009996:	2c00      	cmp	r4, #0
 8009998:	d0e3      	beq.n	8009962 <_vsniprintf_r+0x16>
 800999a:	9b00      	ldr	r3, [sp, #0]
 800999c:	2200      	movs	r2, #0
 800999e:	701a      	strb	r2, [r3, #0]
 80099a0:	e7df      	b.n	8009962 <_vsniprintf_r+0x16>
	...

080099a4 <vsniprintf>:
 80099a4:	b507      	push	{r0, r1, r2, lr}
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	4613      	mov	r3, r2
 80099aa:	460a      	mov	r2, r1
 80099ac:	4601      	mov	r1, r0
 80099ae:	4803      	ldr	r0, [pc, #12]	@ (80099bc <vsniprintf+0x18>)
 80099b0:	6800      	ldr	r0, [r0, #0]
 80099b2:	f7ff ffcb 	bl	800994c <_vsniprintf_r>
 80099b6:	b003      	add	sp, #12
 80099b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80099bc:	20000010 	.word	0x20000010

080099c0 <memset>:
 80099c0:	4402      	add	r2, r0
 80099c2:	4603      	mov	r3, r0
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d100      	bne.n	80099ca <memset+0xa>
 80099c8:	4770      	bx	lr
 80099ca:	f803 1b01 	strb.w	r1, [r3], #1
 80099ce:	e7f9      	b.n	80099c4 <memset+0x4>

080099d0 <__errno>:
 80099d0:	4b01      	ldr	r3, [pc, #4]	@ (80099d8 <__errno+0x8>)
 80099d2:	6818      	ldr	r0, [r3, #0]
 80099d4:	4770      	bx	lr
 80099d6:	bf00      	nop
 80099d8:	20000010 	.word	0x20000010

080099dc <__libc_init_array>:
 80099dc:	b570      	push	{r4, r5, r6, lr}
 80099de:	4d0d      	ldr	r5, [pc, #52]	@ (8009a14 <__libc_init_array+0x38>)
 80099e0:	4c0d      	ldr	r4, [pc, #52]	@ (8009a18 <__libc_init_array+0x3c>)
 80099e2:	1b64      	subs	r4, r4, r5
 80099e4:	10a4      	asrs	r4, r4, #2
 80099e6:	2600      	movs	r6, #0
 80099e8:	42a6      	cmp	r6, r4
 80099ea:	d109      	bne.n	8009a00 <__libc_init_array+0x24>
 80099ec:	4d0b      	ldr	r5, [pc, #44]	@ (8009a1c <__libc_init_array+0x40>)
 80099ee:	4c0c      	ldr	r4, [pc, #48]	@ (8009a20 <__libc_init_array+0x44>)
 80099f0:	f000 fc66 	bl	800a2c0 <_init>
 80099f4:	1b64      	subs	r4, r4, r5
 80099f6:	10a4      	asrs	r4, r4, #2
 80099f8:	2600      	movs	r6, #0
 80099fa:	42a6      	cmp	r6, r4
 80099fc:	d105      	bne.n	8009a0a <__libc_init_array+0x2e>
 80099fe:	bd70      	pop	{r4, r5, r6, pc}
 8009a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a04:	4798      	blx	r3
 8009a06:	3601      	adds	r6, #1
 8009a08:	e7ee      	b.n	80099e8 <__libc_init_array+0xc>
 8009a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a0e:	4798      	blx	r3
 8009a10:	3601      	adds	r6, #1
 8009a12:	e7f2      	b.n	80099fa <__libc_init_array+0x1e>
 8009a14:	0800a944 	.word	0x0800a944
 8009a18:	0800a944 	.word	0x0800a944
 8009a1c:	0800a944 	.word	0x0800a944
 8009a20:	0800a948 	.word	0x0800a948

08009a24 <__retarget_lock_acquire_recursive>:
 8009a24:	4770      	bx	lr

08009a26 <__retarget_lock_release_recursive>:
 8009a26:	4770      	bx	lr

08009a28 <_free_r>:
 8009a28:	b538      	push	{r3, r4, r5, lr}
 8009a2a:	4605      	mov	r5, r0
 8009a2c:	2900      	cmp	r1, #0
 8009a2e:	d041      	beq.n	8009ab4 <_free_r+0x8c>
 8009a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a34:	1f0c      	subs	r4, r1, #4
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	bfb8      	it	lt
 8009a3a:	18e4      	addlt	r4, r4, r3
 8009a3c:	f000 f8e0 	bl	8009c00 <__malloc_lock>
 8009a40:	4a1d      	ldr	r2, [pc, #116]	@ (8009ab8 <_free_r+0x90>)
 8009a42:	6813      	ldr	r3, [r2, #0]
 8009a44:	b933      	cbnz	r3, 8009a54 <_free_r+0x2c>
 8009a46:	6063      	str	r3, [r4, #4]
 8009a48:	6014      	str	r4, [r2, #0]
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a50:	f000 b8dc 	b.w	8009c0c <__malloc_unlock>
 8009a54:	42a3      	cmp	r3, r4
 8009a56:	d908      	bls.n	8009a6a <_free_r+0x42>
 8009a58:	6820      	ldr	r0, [r4, #0]
 8009a5a:	1821      	adds	r1, r4, r0
 8009a5c:	428b      	cmp	r3, r1
 8009a5e:	bf01      	itttt	eq
 8009a60:	6819      	ldreq	r1, [r3, #0]
 8009a62:	685b      	ldreq	r3, [r3, #4]
 8009a64:	1809      	addeq	r1, r1, r0
 8009a66:	6021      	streq	r1, [r4, #0]
 8009a68:	e7ed      	b.n	8009a46 <_free_r+0x1e>
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	b10b      	cbz	r3, 8009a74 <_free_r+0x4c>
 8009a70:	42a3      	cmp	r3, r4
 8009a72:	d9fa      	bls.n	8009a6a <_free_r+0x42>
 8009a74:	6811      	ldr	r1, [r2, #0]
 8009a76:	1850      	adds	r0, r2, r1
 8009a78:	42a0      	cmp	r0, r4
 8009a7a:	d10b      	bne.n	8009a94 <_free_r+0x6c>
 8009a7c:	6820      	ldr	r0, [r4, #0]
 8009a7e:	4401      	add	r1, r0
 8009a80:	1850      	adds	r0, r2, r1
 8009a82:	4283      	cmp	r3, r0
 8009a84:	6011      	str	r1, [r2, #0]
 8009a86:	d1e0      	bne.n	8009a4a <_free_r+0x22>
 8009a88:	6818      	ldr	r0, [r3, #0]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	6053      	str	r3, [r2, #4]
 8009a8e:	4408      	add	r0, r1
 8009a90:	6010      	str	r0, [r2, #0]
 8009a92:	e7da      	b.n	8009a4a <_free_r+0x22>
 8009a94:	d902      	bls.n	8009a9c <_free_r+0x74>
 8009a96:	230c      	movs	r3, #12
 8009a98:	602b      	str	r3, [r5, #0]
 8009a9a:	e7d6      	b.n	8009a4a <_free_r+0x22>
 8009a9c:	6820      	ldr	r0, [r4, #0]
 8009a9e:	1821      	adds	r1, r4, r0
 8009aa0:	428b      	cmp	r3, r1
 8009aa2:	bf04      	itt	eq
 8009aa4:	6819      	ldreq	r1, [r3, #0]
 8009aa6:	685b      	ldreq	r3, [r3, #4]
 8009aa8:	6063      	str	r3, [r4, #4]
 8009aaa:	bf04      	itt	eq
 8009aac:	1809      	addeq	r1, r1, r0
 8009aae:	6021      	streq	r1, [r4, #0]
 8009ab0:	6054      	str	r4, [r2, #4]
 8009ab2:	e7ca      	b.n	8009a4a <_free_r+0x22>
 8009ab4:	bd38      	pop	{r3, r4, r5, pc}
 8009ab6:	bf00      	nop
 8009ab8:	20010fe4 	.word	0x20010fe4

08009abc <sbrk_aligned>:
 8009abc:	b570      	push	{r4, r5, r6, lr}
 8009abe:	4e0f      	ldr	r6, [pc, #60]	@ (8009afc <sbrk_aligned+0x40>)
 8009ac0:	460c      	mov	r4, r1
 8009ac2:	6831      	ldr	r1, [r6, #0]
 8009ac4:	4605      	mov	r5, r0
 8009ac6:	b911      	cbnz	r1, 8009ace <sbrk_aligned+0x12>
 8009ac8:	f000 fba6 	bl	800a218 <_sbrk_r>
 8009acc:	6030      	str	r0, [r6, #0]
 8009ace:	4621      	mov	r1, r4
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	f000 fba1 	bl	800a218 <_sbrk_r>
 8009ad6:	1c43      	adds	r3, r0, #1
 8009ad8:	d103      	bne.n	8009ae2 <sbrk_aligned+0x26>
 8009ada:	f04f 34ff 	mov.w	r4, #4294967295
 8009ade:	4620      	mov	r0, r4
 8009ae0:	bd70      	pop	{r4, r5, r6, pc}
 8009ae2:	1cc4      	adds	r4, r0, #3
 8009ae4:	f024 0403 	bic.w	r4, r4, #3
 8009ae8:	42a0      	cmp	r0, r4
 8009aea:	d0f8      	beq.n	8009ade <sbrk_aligned+0x22>
 8009aec:	1a21      	subs	r1, r4, r0
 8009aee:	4628      	mov	r0, r5
 8009af0:	f000 fb92 	bl	800a218 <_sbrk_r>
 8009af4:	3001      	adds	r0, #1
 8009af6:	d1f2      	bne.n	8009ade <sbrk_aligned+0x22>
 8009af8:	e7ef      	b.n	8009ada <sbrk_aligned+0x1e>
 8009afa:	bf00      	nop
 8009afc:	20010fe0 	.word	0x20010fe0

08009b00 <_malloc_r>:
 8009b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b04:	1ccd      	adds	r5, r1, #3
 8009b06:	f025 0503 	bic.w	r5, r5, #3
 8009b0a:	3508      	adds	r5, #8
 8009b0c:	2d0c      	cmp	r5, #12
 8009b0e:	bf38      	it	cc
 8009b10:	250c      	movcc	r5, #12
 8009b12:	2d00      	cmp	r5, #0
 8009b14:	4606      	mov	r6, r0
 8009b16:	db01      	blt.n	8009b1c <_malloc_r+0x1c>
 8009b18:	42a9      	cmp	r1, r5
 8009b1a:	d904      	bls.n	8009b26 <_malloc_r+0x26>
 8009b1c:	230c      	movs	r3, #12
 8009b1e:	6033      	str	r3, [r6, #0]
 8009b20:	2000      	movs	r0, #0
 8009b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009bfc <_malloc_r+0xfc>
 8009b2a:	f000 f869 	bl	8009c00 <__malloc_lock>
 8009b2e:	f8d8 3000 	ldr.w	r3, [r8]
 8009b32:	461c      	mov	r4, r3
 8009b34:	bb44      	cbnz	r4, 8009b88 <_malloc_r+0x88>
 8009b36:	4629      	mov	r1, r5
 8009b38:	4630      	mov	r0, r6
 8009b3a:	f7ff ffbf 	bl	8009abc <sbrk_aligned>
 8009b3e:	1c43      	adds	r3, r0, #1
 8009b40:	4604      	mov	r4, r0
 8009b42:	d158      	bne.n	8009bf6 <_malloc_r+0xf6>
 8009b44:	f8d8 4000 	ldr.w	r4, [r8]
 8009b48:	4627      	mov	r7, r4
 8009b4a:	2f00      	cmp	r7, #0
 8009b4c:	d143      	bne.n	8009bd6 <_malloc_r+0xd6>
 8009b4e:	2c00      	cmp	r4, #0
 8009b50:	d04b      	beq.n	8009bea <_malloc_r+0xea>
 8009b52:	6823      	ldr	r3, [r4, #0]
 8009b54:	4639      	mov	r1, r7
 8009b56:	4630      	mov	r0, r6
 8009b58:	eb04 0903 	add.w	r9, r4, r3
 8009b5c:	f000 fb5c 	bl	800a218 <_sbrk_r>
 8009b60:	4581      	cmp	r9, r0
 8009b62:	d142      	bne.n	8009bea <_malloc_r+0xea>
 8009b64:	6821      	ldr	r1, [r4, #0]
 8009b66:	1a6d      	subs	r5, r5, r1
 8009b68:	4629      	mov	r1, r5
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	f7ff ffa6 	bl	8009abc <sbrk_aligned>
 8009b70:	3001      	adds	r0, #1
 8009b72:	d03a      	beq.n	8009bea <_malloc_r+0xea>
 8009b74:	6823      	ldr	r3, [r4, #0]
 8009b76:	442b      	add	r3, r5
 8009b78:	6023      	str	r3, [r4, #0]
 8009b7a:	f8d8 3000 	ldr.w	r3, [r8]
 8009b7e:	685a      	ldr	r2, [r3, #4]
 8009b80:	bb62      	cbnz	r2, 8009bdc <_malloc_r+0xdc>
 8009b82:	f8c8 7000 	str.w	r7, [r8]
 8009b86:	e00f      	b.n	8009ba8 <_malloc_r+0xa8>
 8009b88:	6822      	ldr	r2, [r4, #0]
 8009b8a:	1b52      	subs	r2, r2, r5
 8009b8c:	d420      	bmi.n	8009bd0 <_malloc_r+0xd0>
 8009b8e:	2a0b      	cmp	r2, #11
 8009b90:	d917      	bls.n	8009bc2 <_malloc_r+0xc2>
 8009b92:	1961      	adds	r1, r4, r5
 8009b94:	42a3      	cmp	r3, r4
 8009b96:	6025      	str	r5, [r4, #0]
 8009b98:	bf18      	it	ne
 8009b9a:	6059      	strne	r1, [r3, #4]
 8009b9c:	6863      	ldr	r3, [r4, #4]
 8009b9e:	bf08      	it	eq
 8009ba0:	f8c8 1000 	streq.w	r1, [r8]
 8009ba4:	5162      	str	r2, [r4, r5]
 8009ba6:	604b      	str	r3, [r1, #4]
 8009ba8:	4630      	mov	r0, r6
 8009baa:	f000 f82f 	bl	8009c0c <__malloc_unlock>
 8009bae:	f104 000b 	add.w	r0, r4, #11
 8009bb2:	1d23      	adds	r3, r4, #4
 8009bb4:	f020 0007 	bic.w	r0, r0, #7
 8009bb8:	1ac2      	subs	r2, r0, r3
 8009bba:	bf1c      	itt	ne
 8009bbc:	1a1b      	subne	r3, r3, r0
 8009bbe:	50a3      	strne	r3, [r4, r2]
 8009bc0:	e7af      	b.n	8009b22 <_malloc_r+0x22>
 8009bc2:	6862      	ldr	r2, [r4, #4]
 8009bc4:	42a3      	cmp	r3, r4
 8009bc6:	bf0c      	ite	eq
 8009bc8:	f8c8 2000 	streq.w	r2, [r8]
 8009bcc:	605a      	strne	r2, [r3, #4]
 8009bce:	e7eb      	b.n	8009ba8 <_malloc_r+0xa8>
 8009bd0:	4623      	mov	r3, r4
 8009bd2:	6864      	ldr	r4, [r4, #4]
 8009bd4:	e7ae      	b.n	8009b34 <_malloc_r+0x34>
 8009bd6:	463c      	mov	r4, r7
 8009bd8:	687f      	ldr	r7, [r7, #4]
 8009bda:	e7b6      	b.n	8009b4a <_malloc_r+0x4a>
 8009bdc:	461a      	mov	r2, r3
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	42a3      	cmp	r3, r4
 8009be2:	d1fb      	bne.n	8009bdc <_malloc_r+0xdc>
 8009be4:	2300      	movs	r3, #0
 8009be6:	6053      	str	r3, [r2, #4]
 8009be8:	e7de      	b.n	8009ba8 <_malloc_r+0xa8>
 8009bea:	230c      	movs	r3, #12
 8009bec:	6033      	str	r3, [r6, #0]
 8009bee:	4630      	mov	r0, r6
 8009bf0:	f000 f80c 	bl	8009c0c <__malloc_unlock>
 8009bf4:	e794      	b.n	8009b20 <_malloc_r+0x20>
 8009bf6:	6005      	str	r5, [r0, #0]
 8009bf8:	e7d6      	b.n	8009ba8 <_malloc_r+0xa8>
 8009bfa:	bf00      	nop
 8009bfc:	20010fe4 	.word	0x20010fe4

08009c00 <__malloc_lock>:
 8009c00:	4801      	ldr	r0, [pc, #4]	@ (8009c08 <__malloc_lock+0x8>)
 8009c02:	f7ff bf0f 	b.w	8009a24 <__retarget_lock_acquire_recursive>
 8009c06:	bf00      	nop
 8009c08:	20010fdc 	.word	0x20010fdc

08009c0c <__malloc_unlock>:
 8009c0c:	4801      	ldr	r0, [pc, #4]	@ (8009c14 <__malloc_unlock+0x8>)
 8009c0e:	f7ff bf0a 	b.w	8009a26 <__retarget_lock_release_recursive>
 8009c12:	bf00      	nop
 8009c14:	20010fdc 	.word	0x20010fdc

08009c18 <__ssputs_r>:
 8009c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c1c:	688e      	ldr	r6, [r1, #8]
 8009c1e:	461f      	mov	r7, r3
 8009c20:	42be      	cmp	r6, r7
 8009c22:	680b      	ldr	r3, [r1, #0]
 8009c24:	4682      	mov	sl, r0
 8009c26:	460c      	mov	r4, r1
 8009c28:	4690      	mov	r8, r2
 8009c2a:	d82d      	bhi.n	8009c88 <__ssputs_r+0x70>
 8009c2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009c34:	d026      	beq.n	8009c84 <__ssputs_r+0x6c>
 8009c36:	6965      	ldr	r5, [r4, #20]
 8009c38:	6909      	ldr	r1, [r1, #16]
 8009c3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c3e:	eba3 0901 	sub.w	r9, r3, r1
 8009c42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c46:	1c7b      	adds	r3, r7, #1
 8009c48:	444b      	add	r3, r9
 8009c4a:	106d      	asrs	r5, r5, #1
 8009c4c:	429d      	cmp	r5, r3
 8009c4e:	bf38      	it	cc
 8009c50:	461d      	movcc	r5, r3
 8009c52:	0553      	lsls	r3, r2, #21
 8009c54:	d527      	bpl.n	8009ca6 <__ssputs_r+0x8e>
 8009c56:	4629      	mov	r1, r5
 8009c58:	f7ff ff52 	bl	8009b00 <_malloc_r>
 8009c5c:	4606      	mov	r6, r0
 8009c5e:	b360      	cbz	r0, 8009cba <__ssputs_r+0xa2>
 8009c60:	6921      	ldr	r1, [r4, #16]
 8009c62:	464a      	mov	r2, r9
 8009c64:	f000 fae8 	bl	800a238 <memcpy>
 8009c68:	89a3      	ldrh	r3, [r4, #12]
 8009c6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009c6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c72:	81a3      	strh	r3, [r4, #12]
 8009c74:	6126      	str	r6, [r4, #16]
 8009c76:	6165      	str	r5, [r4, #20]
 8009c78:	444e      	add	r6, r9
 8009c7a:	eba5 0509 	sub.w	r5, r5, r9
 8009c7e:	6026      	str	r6, [r4, #0]
 8009c80:	60a5      	str	r5, [r4, #8]
 8009c82:	463e      	mov	r6, r7
 8009c84:	42be      	cmp	r6, r7
 8009c86:	d900      	bls.n	8009c8a <__ssputs_r+0x72>
 8009c88:	463e      	mov	r6, r7
 8009c8a:	6820      	ldr	r0, [r4, #0]
 8009c8c:	4632      	mov	r2, r6
 8009c8e:	4641      	mov	r1, r8
 8009c90:	f000 faa8 	bl	800a1e4 <memmove>
 8009c94:	68a3      	ldr	r3, [r4, #8]
 8009c96:	1b9b      	subs	r3, r3, r6
 8009c98:	60a3      	str	r3, [r4, #8]
 8009c9a:	6823      	ldr	r3, [r4, #0]
 8009c9c:	4433      	add	r3, r6
 8009c9e:	6023      	str	r3, [r4, #0]
 8009ca0:	2000      	movs	r0, #0
 8009ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ca6:	462a      	mov	r2, r5
 8009ca8:	f000 fad4 	bl	800a254 <_realloc_r>
 8009cac:	4606      	mov	r6, r0
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	d1e0      	bne.n	8009c74 <__ssputs_r+0x5c>
 8009cb2:	6921      	ldr	r1, [r4, #16]
 8009cb4:	4650      	mov	r0, sl
 8009cb6:	f7ff feb7 	bl	8009a28 <_free_r>
 8009cba:	230c      	movs	r3, #12
 8009cbc:	f8ca 3000 	str.w	r3, [sl]
 8009cc0:	89a3      	ldrh	r3, [r4, #12]
 8009cc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cc6:	81a3      	strh	r3, [r4, #12]
 8009cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ccc:	e7e9      	b.n	8009ca2 <__ssputs_r+0x8a>
	...

08009cd0 <_svfiprintf_r>:
 8009cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd4:	4698      	mov	r8, r3
 8009cd6:	898b      	ldrh	r3, [r1, #12]
 8009cd8:	061b      	lsls	r3, r3, #24
 8009cda:	b09d      	sub	sp, #116	@ 0x74
 8009cdc:	4607      	mov	r7, r0
 8009cde:	460d      	mov	r5, r1
 8009ce0:	4614      	mov	r4, r2
 8009ce2:	d510      	bpl.n	8009d06 <_svfiprintf_r+0x36>
 8009ce4:	690b      	ldr	r3, [r1, #16]
 8009ce6:	b973      	cbnz	r3, 8009d06 <_svfiprintf_r+0x36>
 8009ce8:	2140      	movs	r1, #64	@ 0x40
 8009cea:	f7ff ff09 	bl	8009b00 <_malloc_r>
 8009cee:	6028      	str	r0, [r5, #0]
 8009cf0:	6128      	str	r0, [r5, #16]
 8009cf2:	b930      	cbnz	r0, 8009d02 <_svfiprintf_r+0x32>
 8009cf4:	230c      	movs	r3, #12
 8009cf6:	603b      	str	r3, [r7, #0]
 8009cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cfc:	b01d      	add	sp, #116	@ 0x74
 8009cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d02:	2340      	movs	r3, #64	@ 0x40
 8009d04:	616b      	str	r3, [r5, #20]
 8009d06:	2300      	movs	r3, #0
 8009d08:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d0a:	2320      	movs	r3, #32
 8009d0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d10:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d14:	2330      	movs	r3, #48	@ 0x30
 8009d16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009eb4 <_svfiprintf_r+0x1e4>
 8009d1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d1e:	f04f 0901 	mov.w	r9, #1
 8009d22:	4623      	mov	r3, r4
 8009d24:	469a      	mov	sl, r3
 8009d26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d2a:	b10a      	cbz	r2, 8009d30 <_svfiprintf_r+0x60>
 8009d2c:	2a25      	cmp	r2, #37	@ 0x25
 8009d2e:	d1f9      	bne.n	8009d24 <_svfiprintf_r+0x54>
 8009d30:	ebba 0b04 	subs.w	fp, sl, r4
 8009d34:	d00b      	beq.n	8009d4e <_svfiprintf_r+0x7e>
 8009d36:	465b      	mov	r3, fp
 8009d38:	4622      	mov	r2, r4
 8009d3a:	4629      	mov	r1, r5
 8009d3c:	4638      	mov	r0, r7
 8009d3e:	f7ff ff6b 	bl	8009c18 <__ssputs_r>
 8009d42:	3001      	adds	r0, #1
 8009d44:	f000 80a7 	beq.w	8009e96 <_svfiprintf_r+0x1c6>
 8009d48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d4a:	445a      	add	r2, fp
 8009d4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f000 809f 	beq.w	8009e96 <_svfiprintf_r+0x1c6>
 8009d58:	2300      	movs	r3, #0
 8009d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d62:	f10a 0a01 	add.w	sl, sl, #1
 8009d66:	9304      	str	r3, [sp, #16]
 8009d68:	9307      	str	r3, [sp, #28]
 8009d6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d70:	4654      	mov	r4, sl
 8009d72:	2205      	movs	r2, #5
 8009d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d78:	484e      	ldr	r0, [pc, #312]	@ (8009eb4 <_svfiprintf_r+0x1e4>)
 8009d7a:	f7f6 fa41 	bl	8000200 <memchr>
 8009d7e:	9a04      	ldr	r2, [sp, #16]
 8009d80:	b9d8      	cbnz	r0, 8009dba <_svfiprintf_r+0xea>
 8009d82:	06d0      	lsls	r0, r2, #27
 8009d84:	bf44      	itt	mi
 8009d86:	2320      	movmi	r3, #32
 8009d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d8c:	0711      	lsls	r1, r2, #28
 8009d8e:	bf44      	itt	mi
 8009d90:	232b      	movmi	r3, #43	@ 0x2b
 8009d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d96:	f89a 3000 	ldrb.w	r3, [sl]
 8009d9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d9c:	d015      	beq.n	8009dca <_svfiprintf_r+0xfa>
 8009d9e:	9a07      	ldr	r2, [sp, #28]
 8009da0:	4654      	mov	r4, sl
 8009da2:	2000      	movs	r0, #0
 8009da4:	f04f 0c0a 	mov.w	ip, #10
 8009da8:	4621      	mov	r1, r4
 8009daa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dae:	3b30      	subs	r3, #48	@ 0x30
 8009db0:	2b09      	cmp	r3, #9
 8009db2:	d94b      	bls.n	8009e4c <_svfiprintf_r+0x17c>
 8009db4:	b1b0      	cbz	r0, 8009de4 <_svfiprintf_r+0x114>
 8009db6:	9207      	str	r2, [sp, #28]
 8009db8:	e014      	b.n	8009de4 <_svfiprintf_r+0x114>
 8009dba:	eba0 0308 	sub.w	r3, r0, r8
 8009dbe:	fa09 f303 	lsl.w	r3, r9, r3
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	9304      	str	r3, [sp, #16]
 8009dc6:	46a2      	mov	sl, r4
 8009dc8:	e7d2      	b.n	8009d70 <_svfiprintf_r+0xa0>
 8009dca:	9b03      	ldr	r3, [sp, #12]
 8009dcc:	1d19      	adds	r1, r3, #4
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	9103      	str	r1, [sp, #12]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	bfbb      	ittet	lt
 8009dd6:	425b      	neglt	r3, r3
 8009dd8:	f042 0202 	orrlt.w	r2, r2, #2
 8009ddc:	9307      	strge	r3, [sp, #28]
 8009dde:	9307      	strlt	r3, [sp, #28]
 8009de0:	bfb8      	it	lt
 8009de2:	9204      	strlt	r2, [sp, #16]
 8009de4:	7823      	ldrb	r3, [r4, #0]
 8009de6:	2b2e      	cmp	r3, #46	@ 0x2e
 8009de8:	d10a      	bne.n	8009e00 <_svfiprintf_r+0x130>
 8009dea:	7863      	ldrb	r3, [r4, #1]
 8009dec:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dee:	d132      	bne.n	8009e56 <_svfiprintf_r+0x186>
 8009df0:	9b03      	ldr	r3, [sp, #12]
 8009df2:	1d1a      	adds	r2, r3, #4
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	9203      	str	r2, [sp, #12]
 8009df8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009dfc:	3402      	adds	r4, #2
 8009dfe:	9305      	str	r3, [sp, #20]
 8009e00:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009ec4 <_svfiprintf_r+0x1f4>
 8009e04:	7821      	ldrb	r1, [r4, #0]
 8009e06:	2203      	movs	r2, #3
 8009e08:	4650      	mov	r0, sl
 8009e0a:	f7f6 f9f9 	bl	8000200 <memchr>
 8009e0e:	b138      	cbz	r0, 8009e20 <_svfiprintf_r+0x150>
 8009e10:	9b04      	ldr	r3, [sp, #16]
 8009e12:	eba0 000a 	sub.w	r0, r0, sl
 8009e16:	2240      	movs	r2, #64	@ 0x40
 8009e18:	4082      	lsls	r2, r0
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	3401      	adds	r4, #1
 8009e1e:	9304      	str	r3, [sp, #16]
 8009e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e24:	4824      	ldr	r0, [pc, #144]	@ (8009eb8 <_svfiprintf_r+0x1e8>)
 8009e26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e2a:	2206      	movs	r2, #6
 8009e2c:	f7f6 f9e8 	bl	8000200 <memchr>
 8009e30:	2800      	cmp	r0, #0
 8009e32:	d036      	beq.n	8009ea2 <_svfiprintf_r+0x1d2>
 8009e34:	4b21      	ldr	r3, [pc, #132]	@ (8009ebc <_svfiprintf_r+0x1ec>)
 8009e36:	bb1b      	cbnz	r3, 8009e80 <_svfiprintf_r+0x1b0>
 8009e38:	9b03      	ldr	r3, [sp, #12]
 8009e3a:	3307      	adds	r3, #7
 8009e3c:	f023 0307 	bic.w	r3, r3, #7
 8009e40:	3308      	adds	r3, #8
 8009e42:	9303      	str	r3, [sp, #12]
 8009e44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e46:	4433      	add	r3, r6
 8009e48:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e4a:	e76a      	b.n	8009d22 <_svfiprintf_r+0x52>
 8009e4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e50:	460c      	mov	r4, r1
 8009e52:	2001      	movs	r0, #1
 8009e54:	e7a8      	b.n	8009da8 <_svfiprintf_r+0xd8>
 8009e56:	2300      	movs	r3, #0
 8009e58:	3401      	adds	r4, #1
 8009e5a:	9305      	str	r3, [sp, #20]
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	f04f 0c0a 	mov.w	ip, #10
 8009e62:	4620      	mov	r0, r4
 8009e64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e68:	3a30      	subs	r2, #48	@ 0x30
 8009e6a:	2a09      	cmp	r2, #9
 8009e6c:	d903      	bls.n	8009e76 <_svfiprintf_r+0x1a6>
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d0c6      	beq.n	8009e00 <_svfiprintf_r+0x130>
 8009e72:	9105      	str	r1, [sp, #20]
 8009e74:	e7c4      	b.n	8009e00 <_svfiprintf_r+0x130>
 8009e76:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e7a:	4604      	mov	r4, r0
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e7f0      	b.n	8009e62 <_svfiprintf_r+0x192>
 8009e80:	ab03      	add	r3, sp, #12
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	462a      	mov	r2, r5
 8009e86:	4b0e      	ldr	r3, [pc, #56]	@ (8009ec0 <_svfiprintf_r+0x1f0>)
 8009e88:	a904      	add	r1, sp, #16
 8009e8a:	4638      	mov	r0, r7
 8009e8c:	f3af 8000 	nop.w
 8009e90:	1c42      	adds	r2, r0, #1
 8009e92:	4606      	mov	r6, r0
 8009e94:	d1d6      	bne.n	8009e44 <_svfiprintf_r+0x174>
 8009e96:	89ab      	ldrh	r3, [r5, #12]
 8009e98:	065b      	lsls	r3, r3, #25
 8009e9a:	f53f af2d 	bmi.w	8009cf8 <_svfiprintf_r+0x28>
 8009e9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ea0:	e72c      	b.n	8009cfc <_svfiprintf_r+0x2c>
 8009ea2:	ab03      	add	r3, sp, #12
 8009ea4:	9300      	str	r3, [sp, #0]
 8009ea6:	462a      	mov	r2, r5
 8009ea8:	4b05      	ldr	r3, [pc, #20]	@ (8009ec0 <_svfiprintf_r+0x1f0>)
 8009eaa:	a904      	add	r1, sp, #16
 8009eac:	4638      	mov	r0, r7
 8009eae:	f000 f879 	bl	8009fa4 <_printf_i>
 8009eb2:	e7ed      	b.n	8009e90 <_svfiprintf_r+0x1c0>
 8009eb4:	0800a908 	.word	0x0800a908
 8009eb8:	0800a912 	.word	0x0800a912
 8009ebc:	00000000 	.word	0x00000000
 8009ec0:	08009c19 	.word	0x08009c19
 8009ec4:	0800a90e 	.word	0x0800a90e

08009ec8 <_printf_common>:
 8009ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ecc:	4616      	mov	r6, r2
 8009ece:	4698      	mov	r8, r3
 8009ed0:	688a      	ldr	r2, [r1, #8]
 8009ed2:	690b      	ldr	r3, [r1, #16]
 8009ed4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	bfb8      	it	lt
 8009edc:	4613      	movlt	r3, r2
 8009ede:	6033      	str	r3, [r6, #0]
 8009ee0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009ee4:	4607      	mov	r7, r0
 8009ee6:	460c      	mov	r4, r1
 8009ee8:	b10a      	cbz	r2, 8009eee <_printf_common+0x26>
 8009eea:	3301      	adds	r3, #1
 8009eec:	6033      	str	r3, [r6, #0]
 8009eee:	6823      	ldr	r3, [r4, #0]
 8009ef0:	0699      	lsls	r1, r3, #26
 8009ef2:	bf42      	ittt	mi
 8009ef4:	6833      	ldrmi	r3, [r6, #0]
 8009ef6:	3302      	addmi	r3, #2
 8009ef8:	6033      	strmi	r3, [r6, #0]
 8009efa:	6825      	ldr	r5, [r4, #0]
 8009efc:	f015 0506 	ands.w	r5, r5, #6
 8009f00:	d106      	bne.n	8009f10 <_printf_common+0x48>
 8009f02:	f104 0a19 	add.w	sl, r4, #25
 8009f06:	68e3      	ldr	r3, [r4, #12]
 8009f08:	6832      	ldr	r2, [r6, #0]
 8009f0a:	1a9b      	subs	r3, r3, r2
 8009f0c:	42ab      	cmp	r3, r5
 8009f0e:	dc26      	bgt.n	8009f5e <_printf_common+0x96>
 8009f10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f14:	6822      	ldr	r2, [r4, #0]
 8009f16:	3b00      	subs	r3, #0
 8009f18:	bf18      	it	ne
 8009f1a:	2301      	movne	r3, #1
 8009f1c:	0692      	lsls	r2, r2, #26
 8009f1e:	d42b      	bmi.n	8009f78 <_printf_common+0xb0>
 8009f20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f24:	4641      	mov	r1, r8
 8009f26:	4638      	mov	r0, r7
 8009f28:	47c8      	blx	r9
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	d01e      	beq.n	8009f6c <_printf_common+0xa4>
 8009f2e:	6823      	ldr	r3, [r4, #0]
 8009f30:	6922      	ldr	r2, [r4, #16]
 8009f32:	f003 0306 	and.w	r3, r3, #6
 8009f36:	2b04      	cmp	r3, #4
 8009f38:	bf02      	ittt	eq
 8009f3a:	68e5      	ldreq	r5, [r4, #12]
 8009f3c:	6833      	ldreq	r3, [r6, #0]
 8009f3e:	1aed      	subeq	r5, r5, r3
 8009f40:	68a3      	ldr	r3, [r4, #8]
 8009f42:	bf0c      	ite	eq
 8009f44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f48:	2500      	movne	r5, #0
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	bfc4      	itt	gt
 8009f4e:	1a9b      	subgt	r3, r3, r2
 8009f50:	18ed      	addgt	r5, r5, r3
 8009f52:	2600      	movs	r6, #0
 8009f54:	341a      	adds	r4, #26
 8009f56:	42b5      	cmp	r5, r6
 8009f58:	d11a      	bne.n	8009f90 <_printf_common+0xc8>
 8009f5a:	2000      	movs	r0, #0
 8009f5c:	e008      	b.n	8009f70 <_printf_common+0xa8>
 8009f5e:	2301      	movs	r3, #1
 8009f60:	4652      	mov	r2, sl
 8009f62:	4641      	mov	r1, r8
 8009f64:	4638      	mov	r0, r7
 8009f66:	47c8      	blx	r9
 8009f68:	3001      	adds	r0, #1
 8009f6a:	d103      	bne.n	8009f74 <_printf_common+0xac>
 8009f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f74:	3501      	adds	r5, #1
 8009f76:	e7c6      	b.n	8009f06 <_printf_common+0x3e>
 8009f78:	18e1      	adds	r1, r4, r3
 8009f7a:	1c5a      	adds	r2, r3, #1
 8009f7c:	2030      	movs	r0, #48	@ 0x30
 8009f7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f82:	4422      	add	r2, r4
 8009f84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009f8c:	3302      	adds	r3, #2
 8009f8e:	e7c7      	b.n	8009f20 <_printf_common+0x58>
 8009f90:	2301      	movs	r3, #1
 8009f92:	4622      	mov	r2, r4
 8009f94:	4641      	mov	r1, r8
 8009f96:	4638      	mov	r0, r7
 8009f98:	47c8      	blx	r9
 8009f9a:	3001      	adds	r0, #1
 8009f9c:	d0e6      	beq.n	8009f6c <_printf_common+0xa4>
 8009f9e:	3601      	adds	r6, #1
 8009fa0:	e7d9      	b.n	8009f56 <_printf_common+0x8e>
	...

08009fa4 <_printf_i>:
 8009fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fa8:	7e0f      	ldrb	r7, [r1, #24]
 8009faa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009fac:	2f78      	cmp	r7, #120	@ 0x78
 8009fae:	4691      	mov	r9, r2
 8009fb0:	4680      	mov	r8, r0
 8009fb2:	460c      	mov	r4, r1
 8009fb4:	469a      	mov	sl, r3
 8009fb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009fba:	d807      	bhi.n	8009fcc <_printf_i+0x28>
 8009fbc:	2f62      	cmp	r7, #98	@ 0x62
 8009fbe:	d80a      	bhi.n	8009fd6 <_printf_i+0x32>
 8009fc0:	2f00      	cmp	r7, #0
 8009fc2:	f000 80d2 	beq.w	800a16a <_printf_i+0x1c6>
 8009fc6:	2f58      	cmp	r7, #88	@ 0x58
 8009fc8:	f000 80b9 	beq.w	800a13e <_printf_i+0x19a>
 8009fcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009fd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009fd4:	e03a      	b.n	800a04c <_printf_i+0xa8>
 8009fd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009fda:	2b15      	cmp	r3, #21
 8009fdc:	d8f6      	bhi.n	8009fcc <_printf_i+0x28>
 8009fde:	a101      	add	r1, pc, #4	@ (adr r1, 8009fe4 <_printf_i+0x40>)
 8009fe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fe4:	0800a03d 	.word	0x0800a03d
 8009fe8:	0800a051 	.word	0x0800a051
 8009fec:	08009fcd 	.word	0x08009fcd
 8009ff0:	08009fcd 	.word	0x08009fcd
 8009ff4:	08009fcd 	.word	0x08009fcd
 8009ff8:	08009fcd 	.word	0x08009fcd
 8009ffc:	0800a051 	.word	0x0800a051
 800a000:	08009fcd 	.word	0x08009fcd
 800a004:	08009fcd 	.word	0x08009fcd
 800a008:	08009fcd 	.word	0x08009fcd
 800a00c:	08009fcd 	.word	0x08009fcd
 800a010:	0800a151 	.word	0x0800a151
 800a014:	0800a07b 	.word	0x0800a07b
 800a018:	0800a10b 	.word	0x0800a10b
 800a01c:	08009fcd 	.word	0x08009fcd
 800a020:	08009fcd 	.word	0x08009fcd
 800a024:	0800a173 	.word	0x0800a173
 800a028:	08009fcd 	.word	0x08009fcd
 800a02c:	0800a07b 	.word	0x0800a07b
 800a030:	08009fcd 	.word	0x08009fcd
 800a034:	08009fcd 	.word	0x08009fcd
 800a038:	0800a113 	.word	0x0800a113
 800a03c:	6833      	ldr	r3, [r6, #0]
 800a03e:	1d1a      	adds	r2, r3, #4
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	6032      	str	r2, [r6, #0]
 800a044:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a048:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a04c:	2301      	movs	r3, #1
 800a04e:	e09d      	b.n	800a18c <_printf_i+0x1e8>
 800a050:	6833      	ldr	r3, [r6, #0]
 800a052:	6820      	ldr	r0, [r4, #0]
 800a054:	1d19      	adds	r1, r3, #4
 800a056:	6031      	str	r1, [r6, #0]
 800a058:	0606      	lsls	r6, r0, #24
 800a05a:	d501      	bpl.n	800a060 <_printf_i+0xbc>
 800a05c:	681d      	ldr	r5, [r3, #0]
 800a05e:	e003      	b.n	800a068 <_printf_i+0xc4>
 800a060:	0645      	lsls	r5, r0, #25
 800a062:	d5fb      	bpl.n	800a05c <_printf_i+0xb8>
 800a064:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a068:	2d00      	cmp	r5, #0
 800a06a:	da03      	bge.n	800a074 <_printf_i+0xd0>
 800a06c:	232d      	movs	r3, #45	@ 0x2d
 800a06e:	426d      	negs	r5, r5
 800a070:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a074:	4859      	ldr	r0, [pc, #356]	@ (800a1dc <_printf_i+0x238>)
 800a076:	230a      	movs	r3, #10
 800a078:	e011      	b.n	800a09e <_printf_i+0xfa>
 800a07a:	6821      	ldr	r1, [r4, #0]
 800a07c:	6833      	ldr	r3, [r6, #0]
 800a07e:	0608      	lsls	r0, r1, #24
 800a080:	f853 5b04 	ldr.w	r5, [r3], #4
 800a084:	d402      	bmi.n	800a08c <_printf_i+0xe8>
 800a086:	0649      	lsls	r1, r1, #25
 800a088:	bf48      	it	mi
 800a08a:	b2ad      	uxthmi	r5, r5
 800a08c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a08e:	4853      	ldr	r0, [pc, #332]	@ (800a1dc <_printf_i+0x238>)
 800a090:	6033      	str	r3, [r6, #0]
 800a092:	bf14      	ite	ne
 800a094:	230a      	movne	r3, #10
 800a096:	2308      	moveq	r3, #8
 800a098:	2100      	movs	r1, #0
 800a09a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a09e:	6866      	ldr	r6, [r4, #4]
 800a0a0:	60a6      	str	r6, [r4, #8]
 800a0a2:	2e00      	cmp	r6, #0
 800a0a4:	bfa2      	ittt	ge
 800a0a6:	6821      	ldrge	r1, [r4, #0]
 800a0a8:	f021 0104 	bicge.w	r1, r1, #4
 800a0ac:	6021      	strge	r1, [r4, #0]
 800a0ae:	b90d      	cbnz	r5, 800a0b4 <_printf_i+0x110>
 800a0b0:	2e00      	cmp	r6, #0
 800a0b2:	d04b      	beq.n	800a14c <_printf_i+0x1a8>
 800a0b4:	4616      	mov	r6, r2
 800a0b6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a0ba:	fb03 5711 	mls	r7, r3, r1, r5
 800a0be:	5dc7      	ldrb	r7, [r0, r7]
 800a0c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a0c4:	462f      	mov	r7, r5
 800a0c6:	42bb      	cmp	r3, r7
 800a0c8:	460d      	mov	r5, r1
 800a0ca:	d9f4      	bls.n	800a0b6 <_printf_i+0x112>
 800a0cc:	2b08      	cmp	r3, #8
 800a0ce:	d10b      	bne.n	800a0e8 <_printf_i+0x144>
 800a0d0:	6823      	ldr	r3, [r4, #0]
 800a0d2:	07df      	lsls	r7, r3, #31
 800a0d4:	d508      	bpl.n	800a0e8 <_printf_i+0x144>
 800a0d6:	6923      	ldr	r3, [r4, #16]
 800a0d8:	6861      	ldr	r1, [r4, #4]
 800a0da:	4299      	cmp	r1, r3
 800a0dc:	bfde      	ittt	le
 800a0de:	2330      	movle	r3, #48	@ 0x30
 800a0e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a0e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a0e8:	1b92      	subs	r2, r2, r6
 800a0ea:	6122      	str	r2, [r4, #16]
 800a0ec:	f8cd a000 	str.w	sl, [sp]
 800a0f0:	464b      	mov	r3, r9
 800a0f2:	aa03      	add	r2, sp, #12
 800a0f4:	4621      	mov	r1, r4
 800a0f6:	4640      	mov	r0, r8
 800a0f8:	f7ff fee6 	bl	8009ec8 <_printf_common>
 800a0fc:	3001      	adds	r0, #1
 800a0fe:	d14a      	bne.n	800a196 <_printf_i+0x1f2>
 800a100:	f04f 30ff 	mov.w	r0, #4294967295
 800a104:	b004      	add	sp, #16
 800a106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a10a:	6823      	ldr	r3, [r4, #0]
 800a10c:	f043 0320 	orr.w	r3, r3, #32
 800a110:	6023      	str	r3, [r4, #0]
 800a112:	4833      	ldr	r0, [pc, #204]	@ (800a1e0 <_printf_i+0x23c>)
 800a114:	2778      	movs	r7, #120	@ 0x78
 800a116:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a11a:	6823      	ldr	r3, [r4, #0]
 800a11c:	6831      	ldr	r1, [r6, #0]
 800a11e:	061f      	lsls	r7, r3, #24
 800a120:	f851 5b04 	ldr.w	r5, [r1], #4
 800a124:	d402      	bmi.n	800a12c <_printf_i+0x188>
 800a126:	065f      	lsls	r7, r3, #25
 800a128:	bf48      	it	mi
 800a12a:	b2ad      	uxthmi	r5, r5
 800a12c:	6031      	str	r1, [r6, #0]
 800a12e:	07d9      	lsls	r1, r3, #31
 800a130:	bf44      	itt	mi
 800a132:	f043 0320 	orrmi.w	r3, r3, #32
 800a136:	6023      	strmi	r3, [r4, #0]
 800a138:	b11d      	cbz	r5, 800a142 <_printf_i+0x19e>
 800a13a:	2310      	movs	r3, #16
 800a13c:	e7ac      	b.n	800a098 <_printf_i+0xf4>
 800a13e:	4827      	ldr	r0, [pc, #156]	@ (800a1dc <_printf_i+0x238>)
 800a140:	e7e9      	b.n	800a116 <_printf_i+0x172>
 800a142:	6823      	ldr	r3, [r4, #0]
 800a144:	f023 0320 	bic.w	r3, r3, #32
 800a148:	6023      	str	r3, [r4, #0]
 800a14a:	e7f6      	b.n	800a13a <_printf_i+0x196>
 800a14c:	4616      	mov	r6, r2
 800a14e:	e7bd      	b.n	800a0cc <_printf_i+0x128>
 800a150:	6833      	ldr	r3, [r6, #0]
 800a152:	6825      	ldr	r5, [r4, #0]
 800a154:	6961      	ldr	r1, [r4, #20]
 800a156:	1d18      	adds	r0, r3, #4
 800a158:	6030      	str	r0, [r6, #0]
 800a15a:	062e      	lsls	r6, r5, #24
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	d501      	bpl.n	800a164 <_printf_i+0x1c0>
 800a160:	6019      	str	r1, [r3, #0]
 800a162:	e002      	b.n	800a16a <_printf_i+0x1c6>
 800a164:	0668      	lsls	r0, r5, #25
 800a166:	d5fb      	bpl.n	800a160 <_printf_i+0x1bc>
 800a168:	8019      	strh	r1, [r3, #0]
 800a16a:	2300      	movs	r3, #0
 800a16c:	6123      	str	r3, [r4, #16]
 800a16e:	4616      	mov	r6, r2
 800a170:	e7bc      	b.n	800a0ec <_printf_i+0x148>
 800a172:	6833      	ldr	r3, [r6, #0]
 800a174:	1d1a      	adds	r2, r3, #4
 800a176:	6032      	str	r2, [r6, #0]
 800a178:	681e      	ldr	r6, [r3, #0]
 800a17a:	6862      	ldr	r2, [r4, #4]
 800a17c:	2100      	movs	r1, #0
 800a17e:	4630      	mov	r0, r6
 800a180:	f7f6 f83e 	bl	8000200 <memchr>
 800a184:	b108      	cbz	r0, 800a18a <_printf_i+0x1e6>
 800a186:	1b80      	subs	r0, r0, r6
 800a188:	6060      	str	r0, [r4, #4]
 800a18a:	6863      	ldr	r3, [r4, #4]
 800a18c:	6123      	str	r3, [r4, #16]
 800a18e:	2300      	movs	r3, #0
 800a190:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a194:	e7aa      	b.n	800a0ec <_printf_i+0x148>
 800a196:	6923      	ldr	r3, [r4, #16]
 800a198:	4632      	mov	r2, r6
 800a19a:	4649      	mov	r1, r9
 800a19c:	4640      	mov	r0, r8
 800a19e:	47d0      	blx	sl
 800a1a0:	3001      	adds	r0, #1
 800a1a2:	d0ad      	beq.n	800a100 <_printf_i+0x15c>
 800a1a4:	6823      	ldr	r3, [r4, #0]
 800a1a6:	079b      	lsls	r3, r3, #30
 800a1a8:	d413      	bmi.n	800a1d2 <_printf_i+0x22e>
 800a1aa:	68e0      	ldr	r0, [r4, #12]
 800a1ac:	9b03      	ldr	r3, [sp, #12]
 800a1ae:	4298      	cmp	r0, r3
 800a1b0:	bfb8      	it	lt
 800a1b2:	4618      	movlt	r0, r3
 800a1b4:	e7a6      	b.n	800a104 <_printf_i+0x160>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	4632      	mov	r2, r6
 800a1ba:	4649      	mov	r1, r9
 800a1bc:	4640      	mov	r0, r8
 800a1be:	47d0      	blx	sl
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	d09d      	beq.n	800a100 <_printf_i+0x15c>
 800a1c4:	3501      	adds	r5, #1
 800a1c6:	68e3      	ldr	r3, [r4, #12]
 800a1c8:	9903      	ldr	r1, [sp, #12]
 800a1ca:	1a5b      	subs	r3, r3, r1
 800a1cc:	42ab      	cmp	r3, r5
 800a1ce:	dcf2      	bgt.n	800a1b6 <_printf_i+0x212>
 800a1d0:	e7eb      	b.n	800a1aa <_printf_i+0x206>
 800a1d2:	2500      	movs	r5, #0
 800a1d4:	f104 0619 	add.w	r6, r4, #25
 800a1d8:	e7f5      	b.n	800a1c6 <_printf_i+0x222>
 800a1da:	bf00      	nop
 800a1dc:	0800a919 	.word	0x0800a919
 800a1e0:	0800a92a 	.word	0x0800a92a

0800a1e4 <memmove>:
 800a1e4:	4288      	cmp	r0, r1
 800a1e6:	b510      	push	{r4, lr}
 800a1e8:	eb01 0402 	add.w	r4, r1, r2
 800a1ec:	d902      	bls.n	800a1f4 <memmove+0x10>
 800a1ee:	4284      	cmp	r4, r0
 800a1f0:	4623      	mov	r3, r4
 800a1f2:	d807      	bhi.n	800a204 <memmove+0x20>
 800a1f4:	1e43      	subs	r3, r0, #1
 800a1f6:	42a1      	cmp	r1, r4
 800a1f8:	d008      	beq.n	800a20c <memmove+0x28>
 800a1fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a202:	e7f8      	b.n	800a1f6 <memmove+0x12>
 800a204:	4402      	add	r2, r0
 800a206:	4601      	mov	r1, r0
 800a208:	428a      	cmp	r2, r1
 800a20a:	d100      	bne.n	800a20e <memmove+0x2a>
 800a20c:	bd10      	pop	{r4, pc}
 800a20e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a212:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a216:	e7f7      	b.n	800a208 <memmove+0x24>

0800a218 <_sbrk_r>:
 800a218:	b538      	push	{r3, r4, r5, lr}
 800a21a:	4d06      	ldr	r5, [pc, #24]	@ (800a234 <_sbrk_r+0x1c>)
 800a21c:	2300      	movs	r3, #0
 800a21e:	4604      	mov	r4, r0
 800a220:	4608      	mov	r0, r1
 800a222:	602b      	str	r3, [r5, #0]
 800a224:	f7f7 f9a8 	bl	8001578 <_sbrk>
 800a228:	1c43      	adds	r3, r0, #1
 800a22a:	d102      	bne.n	800a232 <_sbrk_r+0x1a>
 800a22c:	682b      	ldr	r3, [r5, #0]
 800a22e:	b103      	cbz	r3, 800a232 <_sbrk_r+0x1a>
 800a230:	6023      	str	r3, [r4, #0]
 800a232:	bd38      	pop	{r3, r4, r5, pc}
 800a234:	20010fd8 	.word	0x20010fd8

0800a238 <memcpy>:
 800a238:	440a      	add	r2, r1
 800a23a:	4291      	cmp	r1, r2
 800a23c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a240:	d100      	bne.n	800a244 <memcpy+0xc>
 800a242:	4770      	bx	lr
 800a244:	b510      	push	{r4, lr}
 800a246:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a24a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a24e:	4291      	cmp	r1, r2
 800a250:	d1f9      	bne.n	800a246 <memcpy+0xe>
 800a252:	bd10      	pop	{r4, pc}

0800a254 <_realloc_r>:
 800a254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a258:	4680      	mov	r8, r0
 800a25a:	4615      	mov	r5, r2
 800a25c:	460c      	mov	r4, r1
 800a25e:	b921      	cbnz	r1, 800a26a <_realloc_r+0x16>
 800a260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a264:	4611      	mov	r1, r2
 800a266:	f7ff bc4b 	b.w	8009b00 <_malloc_r>
 800a26a:	b92a      	cbnz	r2, 800a278 <_realloc_r+0x24>
 800a26c:	f7ff fbdc 	bl	8009a28 <_free_r>
 800a270:	2400      	movs	r4, #0
 800a272:	4620      	mov	r0, r4
 800a274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a278:	f000 f81a 	bl	800a2b0 <_malloc_usable_size_r>
 800a27c:	4285      	cmp	r5, r0
 800a27e:	4606      	mov	r6, r0
 800a280:	d802      	bhi.n	800a288 <_realloc_r+0x34>
 800a282:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a286:	d8f4      	bhi.n	800a272 <_realloc_r+0x1e>
 800a288:	4629      	mov	r1, r5
 800a28a:	4640      	mov	r0, r8
 800a28c:	f7ff fc38 	bl	8009b00 <_malloc_r>
 800a290:	4607      	mov	r7, r0
 800a292:	2800      	cmp	r0, #0
 800a294:	d0ec      	beq.n	800a270 <_realloc_r+0x1c>
 800a296:	42b5      	cmp	r5, r6
 800a298:	462a      	mov	r2, r5
 800a29a:	4621      	mov	r1, r4
 800a29c:	bf28      	it	cs
 800a29e:	4632      	movcs	r2, r6
 800a2a0:	f7ff ffca 	bl	800a238 <memcpy>
 800a2a4:	4621      	mov	r1, r4
 800a2a6:	4640      	mov	r0, r8
 800a2a8:	f7ff fbbe 	bl	8009a28 <_free_r>
 800a2ac:	463c      	mov	r4, r7
 800a2ae:	e7e0      	b.n	800a272 <_realloc_r+0x1e>

0800a2b0 <_malloc_usable_size_r>:
 800a2b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2b4:	1f18      	subs	r0, r3, #4
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	bfbc      	itt	lt
 800a2ba:	580b      	ldrlt	r3, [r1, r0]
 800a2bc:	18c0      	addlt	r0, r0, r3
 800a2be:	4770      	bx	lr

0800a2c0 <_init>:
 800a2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c2:	bf00      	nop
 800a2c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2c6:	bc08      	pop	{r3}
 800a2c8:	469e      	mov	lr, r3
 800a2ca:	4770      	bx	lr

0800a2cc <_fini>:
 800a2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ce:	bf00      	nop
 800a2d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2d2:	bc08      	pop	{r3}
 800a2d4:	469e      	mov	lr, r3
 800a2d6:	4770      	bx	lr
